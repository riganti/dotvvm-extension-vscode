<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotVVM.Framework</name>
    </assembly>
    <members>
        <member name="T:DotVVM.Framework.Binding.BindingCompilationRequirementsAttribute">
            <summary>
            Specifies requirements that binding has to satisfy in order to successfully Initialize (and compile).
            Can be applied on binding class, bound property or instance (as property).
            Attribute can be applied multiple times - all values are combined before compilation.
            </summary>
        </member>
        <member name="F:DotVVM.Framework.Binding.BindingCompilationRequirementsAttribute.Required">
            <summary>
            Properties that have to created in order to Initialize.
            </summary>
        </member>
        <member name="F:DotVVM.Framework.Binding.BindingCompilationRequirementsAttribute.Optional">
            <summary>
            Properties that will be computed, if possible.
            </summary>
        </member>
        <member name="F:DotVVM.Framework.Binding.BindingCompilationRequirementsAttribute.Excluded">
            <summary>
            Properties that does not have to be there - overwrites previous specification of Required or Optional.
            For example may be useful for property that may contain value binding, but does not need a Javascript translation
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.BindingCompilationService.InitializeBinding(DotVVM.Framework.Binding.Expressions.IBinding,System.Collections.Generic.IEnumerable{DotVVM.Framework.Binding.BindingCompilationRequirementsAttribute})">
            <summary>
            Resolves required and optional properties
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.BindingFactory.CreateBinding(DotVVM.Framework.Binding.BindingCompilationService,System.Type,System.Object[])">
            <summary>
            Creates the binding by calling .ctor(BindingCompilationService service, object[] properties), does not wrap exceptions to TargetInvocationException.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.BindingHelper.GetKnockoutBindingExpression(DotVVM.Framework.Binding.Expressions.IValueBinding,DotVVM.Framework.Controls.DotvvmBindableObject,System.Boolean)">
            <summary>
            Gets the javascript translation of the binding adjusted to the `currentControl`s DataContext
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.BindingHelper.GetParametrizedKnockoutExpression(DotVVM.Framework.Binding.Expressions.IValueBinding,DotVVM.Framework.Controls.DotvvmBindableObject,System.Boolean)">
            <summary>
            Gets the javascript translation of the binding adjusted to the `currentControl`s DataContext, returned value is ParametrizedCode, so it can be further adjusted
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.BindingHelper.FormatKnockoutScript(DotVVM.Framework.Compilation.Javascript.ParametrizedCode,DotVVM.Framework.Controls.DotvvmBindableObject,DotVVM.Framework.Binding.Expressions.IBinding)">
            <summary>
            Adjusts the knockout expression to `currentControl`s DataContext like it was translated in `currentBinding`s context
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.BindingHelper.FormatKnockoutScript(DotVVM.Framework.Compilation.Javascript.ParametrizedCode,DotVVM.Framework.Controls.DotvvmBindableObject,DotVVM.Framework.Binding.Expressions.IBinding,System.Int32)">
            <summary>
            Adjusts the knockout expression to `currentControl`s DataContext like it was translated in `currentBinding`s context
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.BindingHelper.GetDataContextPathFragment(DotVVM.Framework.Controls.DotvvmBindableObject)">
            <summary>
            Gets Internal.PathFragmentProperty or DataContext.KnockoutExpression. Returns null if none of these is set.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.BindingHelper.FindDataContextTarget(DotVVM.Framework.Binding.Expressions.IBinding,DotVVM.Framework.Controls.DotvvmBindableObject)">
            <summary>
            Finds expected context control of the `binding` and returns (parent index of the correct DataContext, control in the correct context)
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.BindingHelper.ExecUpdateDelegate(DotVVM.Framework.Binding.Expressions.BindingUpdateDelegate,DotVVM.Framework.Controls.DotvvmBindableObject,System.Object)">
            <summary>
            Prepares DataContext hierarchy argument and executes update delegate.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.BindingHelper.ExecUpdateDelegate``1(DotVVM.Framework.Binding.Expressions.BindingUpdateDelegate{``0},DotVVM.Framework.Controls.DotvvmBindableObject,``0)">
            <summary>
            Prepares DataContext hierarchy argument and executes update delegate.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.BindingHelper.ExecDelegate(DotVVM.Framework.Binding.Expressions.BindingDelegate,DotVVM.Framework.Controls.DotvvmBindableObject)">
            <summary>
            Prepares DataContext hierarchy argument and executes update delegate.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.BindingHelper.ExecDelegate``1(DotVVM.Framework.Binding.Expressions.BindingDelegate{``0},DotVVM.Framework.Controls.DotvvmBindableObject)">
            <summary>
            Prepares DataContext hierarchy argument and executes update delegate.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.BindingHelper.GetDataContexts(DotVVM.Framework.Controls.DotvvmBindableObject,System.Int32)">
            <summary>
            Gets all data context on the path to root. Maximum count can be specified by `count`
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.BindingHelper.Evaluate(DotVVM.Framework.Binding.Expressions.IStaticValueBinding,DotVVM.Framework.Controls.DotvvmBindableObject)">
            <summary>
            Finds expected DataContext target in control.Ancestors() and evaluates the `binding.BindingDelegate`.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.BindingHelper.Evaluate``1(DotVVM.Framework.Binding.Expressions.IStaticValueBinding{``0},DotVVM.Framework.Controls.DotvvmBindableObject)">
            <summary>
            Finds expected DataContext target in control.Ancestors() and evaluates the `binding.BindingDelegate`.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.BindingHelper.UpdateSource(DotVVM.Framework.Binding.Expressions.IUpdatableValueBinding,System.Object,DotVVM.Framework.Controls.DotvvmBindableObject)">
            <summary>
            Writes the value to binding - bound viewModel property is updated. May throw an exception when binding does not support assignment.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.BindingHelper.UpdateSource``1(DotVVM.Framework.Binding.Expressions.IUpdatableValueBinding{``0},``0,DotVVM.Framework.Controls.DotvvmBindableObject)">
            <summary>
            Writes the value to binding - bound viewModel property is updated. May throw an exception when binding does not support assignment.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.BindingHelper.GetCommandDelegate(DotVVM.Framework.Binding.Expressions.ICommandBinding,DotVVM.Framework.Controls.DotvvmBindableObject)">
            <summary>
            Finds expected DataContext and gets the delegate from command binding.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.BindingHelper.GetCommandDelegate``1(DotVVM.Framework.Binding.Expressions.ICommandBinding{``0},DotVVM.Framework.Controls.DotvvmBindableObject)">
            <summary>
            Finds expected DataContext and gets the delegate from command binding.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.BindingHelper.Evaluate(DotVVM.Framework.Binding.Expressions.ICommandBinding,DotVVM.Framework.Controls.DotvvmBindableObject,System.Func{System.Type,System.Object}[])">
            <summary>
            Finds expected DataContext, gets the delegate from command binding and evaluates it with `args`
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.BindingHelper.GetParametrizedCommandJavascript(DotVVM.Framework.Binding.Expressions.ICommandBinding,DotVVM.Framework.Controls.DotvvmBindableObject)">
            <summary>
            Gets DataContext-adjusted javascript that can be used for command invocation.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.BindingHelper.DeriveBinding``1(``0,DotVVM.Framework.Compilation.ControlTree.DataContextStack,System.Linq.Expressions.Expression,System.Object[])">
            <summary>
            Creates new `TBinding` with the original DataContextStack, LocationInfo, AdditionalResolvers and BindingCompilationService.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.BindingHelper.DeriveBinding``1(``0,System.Linq.Expressions.Expression,System.Object[])">
            <summary>
            Creates new `TBinding` with the original DataContextStack, LocationInfo, AdditionalResolvers and BindingCompilationService.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.BindingHelper.DeriveBinding``1(``0,System.Object[])">
            <summary>
            Creates new `TBinding` with the original DataContextStack, LocationInfo, AdditionalResolvers and BindingCompilationService.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.BindingHelper.Cache``2(System.Func{``0,``1})">
            <summary>
            Caches all function evaluations in the closure based on parameter. TParam should be immutable, as it is used as Dictionary key.
            It thread-safe.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.BindingHelper.GetDataContextType(DotVVM.Framework.Binding.DotvvmProperty,DotVVM.Framework.Controls.DotvvmBindableObject)">
            <summary> Return the expected data context type for this property. Returns null if the type is unknown. </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.BindingHelper.GetDataContextType(DotVVM.Framework.Binding.DotvvmProperty,DotVVM.Framework.Compilation.ControlTree.Resolved.ResolvedControl)">
            <summary> Return the expected data context type for this property. Returns null if the type is unknown. </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.BindingHelper.AnnotateStandardContextParams(System.Linq.Expressions.Expression,DotVVM.Framework.Compilation.ControlTree.DataContextStack)">
            <summary>
            Annotates `_this`, `_parent`, `_root` parameters with BindingParameterAnnotation indicating their DataContext
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Binding.Properties.KnockoutExpressionBindingProperty">
            <summary>
            Contains Javascript evaluable in knockout binding, knockout context parameters are represented as symbolic parameters in the ParametrizedCode
            </summary>
            <param name="Code">Knockout binding expression. May return observable.</param>
            <param name="UnwrappedCode">Knockout binding expression. Always unwraps the observable.</param>
            <param name="WrappedCode">Knockout binding expression. Always returns an observable.</param>
        </member>
        <member name="M:DotVVM.Framework.Binding.Properties.KnockoutExpressionBindingProperty.#ctor(DotVVM.Framework.Compilation.Javascript.ParametrizedCode,DotVVM.Framework.Compilation.Javascript.ParametrizedCode,DotVVM.Framework.Compilation.Javascript.ParametrizedCode)">
            <summary>
            Contains Javascript evaluable in knockout binding, knockout context parameters are represented as symbolic parameters in the ParametrizedCode
            </summary>
            <param name="Code">Knockout binding expression. May return observable.</param>
            <param name="UnwrappedCode">Knockout binding expression. Always unwraps the observable.</param>
            <param name="WrappedCode">Knockout binding expression. Always returns an observable.</param>
        </member>
        <member name="P:DotVVM.Framework.Binding.Properties.KnockoutExpressionBindingProperty.Code">
            <summary>Knockout binding expression. May return observable.</summary>
        </member>
        <member name="P:DotVVM.Framework.Binding.Properties.KnockoutExpressionBindingProperty.UnwrappedCode">
            <summary>Knockout binding expression. Always unwraps the observable.</summary>
        </member>
        <member name="P:DotVVM.Framework.Binding.Properties.KnockoutExpressionBindingProperty.WrappedCode">
            <summary>Knockout binding expression. Always returns an observable.</summary>
        </member>
        <member name="T:DotVVM.Framework.Binding.Properties.SimplePathExpressionBindingProperty">
            <summary>
            Contains string that identifies the translated binding.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.Properties.SimplePathExpressionBindingProperty.#ctor(DotVVM.Framework.Compilation.Javascript.ParametrizedCode)">
            <summary>
            Contains string that identifies the translated binding.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Binding.Properties.OriginalStringBindingProperty">
            <summary>
            Contains original binding string, as it was typed in dothtml file. (it is trimmed)
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.Properties.OriginalStringBindingProperty.#ctor(System.String)">
            <summary>
            Contains original binding string, as it was typed in dothtml file. (it is trimmed)
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Binding.Properties.ResultTypeBindingProperty">
            <summary>
            Contains binding's result type.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.Properties.ResultTypeBindingProperty.#ctor(System.Type)">
            <summary>
            Contains binding's result type.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Binding.Properties.IdBindingProperty">
            <summary>
            Contains unique id of binding in its DataContext and the page
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.Properties.IdBindingProperty.#ctor(System.String)">
            <summary>
            Contains unique id of binding in its DataContext and the page
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Binding.Properties.CommandJavascriptBindingProperty">
            <summary>
            Contains JS code, that will invoke the command. May contain symbolic parameters from `JavascriptTranslator` and `CommandBindingExpression`
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.Properties.CommandJavascriptBindingProperty.#ctor(DotVVM.Framework.Compilation.Javascript.ParametrizedCode)">
            <summary>
            Contains JS code, that will invoke the command. May contain symbolic parameters from `JavascriptTranslator` and `CommandBindingExpression`
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Binding.Properties.StaticCommandOptionsLambdaJavascriptProperty">
            <summary>
            Contains JS code, that will invoke the static command wrapped in (options) => ... lambda. May contain symbolic parameters from `CommandBindingExpression`, knockout context is taken from the options
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.Properties.StaticCommandOptionsLambdaJavascriptProperty.#ctor(DotVVM.Framework.Compilation.Javascript.ParametrizedCode)">
            <summary>
            Contains JS code, that will invoke the static command wrapped in (options) => ... lambda. May contain symbolic parameters from `CommandBindingExpression`, knockout context is taken from the options
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Binding.Properties.StaticCommandJavascriptProperty">
            <summary>
            Contains JS code, that will invoke the static command. May contain symbolic parameters from `JavascriptTranslator` and `CommandBindingExpression`
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.Properties.StaticCommandJavascriptProperty.#ctor(DotVVM.Framework.Compilation.Javascript.ParametrizedCode)">
            <summary>
            Contains JS code, that will invoke the static command. May contain symbolic parameters from `JavascriptTranslator` and `CommandBindingExpression`
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Binding.Properties.StaticCommandJsAstProperty">
            <summary>
            Contains JS code, that will invoke the static command. May contain symbolic parameters from `JavascriptTranslator` and `CommandBindingExpression`
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.Properties.StaticCommandJsAstProperty.#ctor(DotVVM.Framework.Compilation.Javascript.Ast.JsExpression)">
            <summary>
            Contains JS code, that will invoke the static command. May contain symbolic parameters from `JavascriptTranslator` and `CommandBindingExpression`
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Binding.Properties.ParsedExpressionBindingProperty">
            <summary>
            Contains <see cref="T:System.Linq.Expressions.Expression"/> instance that represents code as it was written in markup with minimal processing.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.Properties.ParsedExpressionBindingProperty.#ctor(System.Linq.Expressions.Expression)">
            <summary>
            Contains <see cref="T:System.Linq.Expressions.Expression"/> instance that represents code as it was written in markup with minimal processing.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Binding.Properties.CastedExpressionBindingProperty">
            <summary>
            Contains <see cref="T:System.Linq.Expressions.Expression"/> instance that represents code converted to be evaluated as binding (type conversions applied, ...). 
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.Properties.CastedExpressionBindingProperty.#ctor(System.Linq.Expressions.Expression)">
            <summary>
            Contains <see cref="T:System.Linq.Expressions.Expression"/> instance that represents code converted to be evaluated as binding (type conversions applied, ...). 
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Binding.Properties.KnockoutJsExpressionBindingProperty">
            <summary>
            Contains raw translated JS AST that came from JavascriptTranslator. Specifically it has type annotations on it and does not include observable unwraps and null-checks.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.Properties.KnockoutJsExpressionBindingProperty.#ctor(DotVVM.Framework.Compilation.Javascript.Ast.JsExpression)">
            <summary>
            Contains raw translated JS AST that came from JavascriptTranslator. Specifically it has type annotations on it and does not include observable unwraps and null-checks.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Binding.Properties.ActionFiltersBindingProperty">
            <summary>
            Contains action filters that should be invoked before the binding invocation.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.Properties.ActionFiltersBindingProperty.#ctor(System.Collections.Immutable.ImmutableArray{DotVVM.Framework.Runtime.Filters.IActionFilter})">
            <summary>
            Contains action filters that should be invoked before the binding invocation.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Binding.Properties.ExpectedTypeBindingProperty">
            <summary>
            Contains expected type of the binding - typically type of the bound property.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.Properties.ExpectedTypeBindingProperty.#ctor(System.Type)">
            <summary>
            Contains expected type of the binding - typically type of the bound property.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Binding.Properties.AssignedPropertyBindingProperty">
            <summary>
            Contains the property where the binding is assigned.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.Properties.AssignedPropertyBindingProperty.#ctor(DotVVM.Framework.Binding.DotvvmProperty)">
            <summary>
            Contains the property where the binding is assigned.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Binding.Properties.DiagnosticSeverity">
            <summary>
            Describes how severe a diagnostic is.
            </summary>
        </member>
        <member name="F:DotVVM.Framework.Binding.Properties.DiagnosticSeverity.Hidden">
            <summary>
            Something that is an issue, as determined by some authority,
            but is not surfaced through normal means.
            There may be different mechanisms that act on these issues.
            </summary>
        </member>
        <member name="F:DotVVM.Framework.Binding.Properties.DiagnosticSeverity.Info">
            <summary>
            Information that does not indicate a problem (i.e. not prescriptive).
            </summary>
        </member>
        <member name="F:DotVVM.Framework.Binding.Properties.DiagnosticSeverity.Warning">
            <summary>
            Something suspicious but allowed.
            </summary>
        </member>
        <member name="F:DotVVM.Framework.Binding.Properties.DiagnosticSeverity.Error">
            <summary>
            Something not allowed by the rules of the language or other authority.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Binding.Properties.BindingErrorReporterProperty">
            <summary>
            Contains (mutable) list of error that are produced during the binding lifetime.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Binding.Properties.DataSourceAccessBinding">
            <summary>
            Contains a binding that unwraps <see cref="P:DotVVM.Framework.Controls.IBaseGridViewDataSet.Items"/>
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.Properties.DataSourceAccessBinding.#ctor(DotVVM.Framework.Binding.Expressions.IBinding)">
            <summary>
            Contains a binding that unwraps <see cref="P:DotVVM.Framework.Controls.IBaseGridViewDataSet.Items"/>
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Binding.Properties.DataSourceCurrentElementBinding">
            <summary>
            Contains a binding that accesses $index-th element in the collection. Uses the <see cref="T:DotVVM.Framework.Compilation.ControlTree.CurrentCollectionIndexExtensionParameter"/>.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.Properties.DataSourceCurrentElementBinding.#ctor(DotVVM.Framework.Binding.Expressions.IBinding)">
            <summary>
            Contains a binding that accesses $index-th element in the collection. Uses the <see cref="T:DotVVM.Framework.Compilation.ControlTree.CurrentCollectionIndexExtensionParameter"/>.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Binding.Properties.DataSourceLengthBinding">
            <summary>
            Contains a binding that gets the collection's Length or Count
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.Properties.DataSourceLengthBinding.#ctor(DotVVM.Framework.Binding.Expressions.IBinding)">
            <summary>
            Contains a binding that gets the collection's Length or Count
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Binding.Properties.SelectorItemBindingProperty">
            <summary> Contains a lambda function that gets the collection element for a given index.</summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.Properties.SelectorItemBindingProperty.#ctor(DotVVM.Framework.Binding.Expressions.IValueBinding)">
            <summary> Contains a lambda function that gets the collection element for a given index.</summary>
        </member>
        <member name="T:DotVVM.Framework.Binding.Properties.RequiredRuntimeResourcesBindingProperty">
            <summary> Which resources are requested by this binding.</summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.Properties.RequiredRuntimeResourcesBindingProperty.#ctor(System.Collections.Immutable.ImmutableArray{System.String})">
            <summary> Which resources are requested by this binding.</summary>
        </member>
        <member name="T:DotVVM.Framework.Binding.Properties.GlobalizeResourceBindingProperty">
            <summary> Specifies that globalize resource with the current culture is necessary for this binding. </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.Properties.GlobalizeResourceBindingProperty.#ctor">
            <summary> Specifies that globalize resource with the current culture is necessary for this binding. </summary>
        </member>
        <member name="T:DotVVM.Framework.Binding.Properties.ThisBindingProperty">
            <summary> Contains binding {value: _this} as the current data context. </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.Properties.ThisBindingProperty.#ctor(DotVVM.Framework.Binding.Expressions.IBinding)">
            <summary> Contains binding {value: _this} as the current data context. </summary>
        </member>
        <member name="T:DotVVM.Framework.Binding.Properties.CollectionElementDataContextBindingProperty">
            <summary> Contains <see cref="T:DotVVM.Framework.Compilation.ControlTree.DataContextStack">data context</see> which would be expected in a Repeater bound to this binding. </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.Properties.CollectionElementDataContextBindingProperty.#ctor(DotVVM.Framework.Compilation.ControlTree.DataContextStack)">
            <summary> Contains <see cref="T:DotVVM.Framework.Compilation.ControlTree.DataContextStack">data context</see> which would be expected in a Repeater bound to this binding. </summary>
        </member>
        <member name="T:DotVVM.Framework.Binding.Properties.IsMoreThanZeroBindingProperty">
            <summary> Contains a binding with the expression {thisBinding} > 0 </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.Properties.IsMoreThanZeroBindingProperty.#ctor(DotVVM.Framework.Binding.Expressions.IBinding)">
            <summary> Contains a binding with the expression {thisBinding} > 0 </summary>
        </member>
        <member name="T:DotVVM.Framework.Binding.Properties.NegatedBindingExpression">
            <summary> Contains a binding with the expression !{thisBinding} </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.Properties.NegatedBindingExpression.#ctor(DotVVM.Framework.Binding.Expressions.IBinding)">
            <summary> Contains a binding with the expression !{thisBinding} </summary>
        </member>
        <member name="T:DotVVM.Framework.Binding.Properties.IsNullBindingExpression">
            <summary> Contains a binding with the expression {thisBinding} is null </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.Properties.IsNullBindingExpression.#ctor(DotVVM.Framework.Binding.Expressions.IBinding)">
            <summary> Contains a binding with the expression {thisBinding} is null </summary>
        </member>
        <member name="T:DotVVM.Framework.Binding.Properties.IsNullOrWhitespaceBindingExpression">
            <summary> Contains a binding with the expression string.IsNullOrWhiteSpace({thisBinding}) </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.Properties.IsNullOrWhitespaceBindingExpression.#ctor(DotVVM.Framework.Binding.Expressions.IBinding)">
            <summary> Contains a binding with the expression string.IsNullOrWhiteSpace({thisBinding}) </summary>
        </member>
        <member name="T:DotVVM.Framework.Binding.Properties.IsNullOrEmptyBindingExpression">
            <summary> Contains a binding with the expression string.IsNullOrEmpty({thisBinding}) </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.Properties.IsNullOrEmptyBindingExpression.#ctor(DotVVM.Framework.Binding.Expressions.IBinding)">
            <summary> Contains a binding with the expression string.IsNullOrEmpty({thisBinding}) </summary>
        </member>
        <member name="T:DotVVM.Framework.Binding.Properties.ExpectedAsStringBindingExpression">
            <summary> Contains the same binding as this binding but converted to a string. </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.Properties.ExpectedAsStringBindingExpression.#ctor(DotVVM.Framework.Binding.Expressions.IBinding)">
            <summary> Contains the same binding as this binding but converted to a string. </summary>
        </member>
        <member name="T:DotVVM.Framework.Binding.Properties.ReferencedViewModelPropertiesBindingProperty">
            <summary> Contains references to the .NET properties referenced in the binding. MainProperty is the property on the root node (modulo conversions and simple expressions). </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.Properties.ReferencedViewModelPropertiesBindingProperty.#ctor(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo[],DotVVM.Framework.Binding.Expressions.IValueBinding)">
            <summary> Contains references to the .NET properties referenced in the binding. MainProperty is the property on the root node (modulo conversions and simple expressions). </summary>
        </member>
        <member name="T:DotVVM.Framework.Binding.DotvvmCapabilityProperty">
            <summary> Descriptor of a DotVVM capability.
            Capability is a way to register multiple properties at once in DotVVM. </summary>
        </member>
        <member name="P:DotVVM.Framework.Binding.DotvvmCapabilityProperty.PropertyMapping">
            <summary> List of properties that this capability contains. Note that this may contain nested capabilities. </summary>
        </member>
        <member name="P:DotVVM.Framework.Binding.DotvvmCapabilityProperty.PropertyGroupMapping">
            <summary> List of property groups that this capability contains. Note that other property groups may be in nested capabilities (see the <see cref="P:DotVVM.Framework.Binding.DotvvmCapabilityProperty.PropertyMapping" /> array). </summary>
        </member>
        <member name="P:DotVVM.Framework.Binding.DotvvmCapabilityProperty.Prefix">
            <summary> Prefix prepended to all properties registered by this capability. </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.DotvvmCapabilityProperty.Find(System.Type,System.Type)">
            <summary> Looks up a capability on the specified control (<paramref name="declaringType"/>).
            If multiple capabilities of this type are registered, <see cref="M:DotVVM.Framework.Binding.DotvvmCapabilityProperty.Find(System.Type,System.Type,System.String)" /> method must be used to retrieve the one with specified prefix. </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.DotvvmCapabilityProperty.Find(System.Type,System.Type,System.String)">
            <summary> Looks up a capability on the specified control (<paramref name="declaringType"/>). </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.DotvvmCapabilityProperty.GetCapabilities(System.Type)">
            <summary> Lists capabilities on the specified control (<paramref name="declaringType"/>). </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.DotvvmCapabilityProperty.GetCapabilities(System.Type,System.Type)">
            <summary> Lists capabilities of the selected type on the specified control (<paramref name="declaringType"/>). </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.DotvvmCapabilityProperty.ThisAndOwners">
            <summary> Returns an iterator of the <see cref="P:DotVVM.Framework.Binding.DotvvmProperty.OwningCapability" /> chain. The first element is this capability. </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.DotvvmCapabilityProperty.RegisterCapability``2(System.String,System.String,System.Reflection.ICustomAttributeProvider)">
            <summary> Registers a new DotVVM capability. For a given <typeparamref name="TCapabilityType"/>, this method will register a DotVVM property for each property of the capability type. </summary>
            <param name="globalPrefix"> Prefix prepended to all properties registered by this capability. </param>
            <param name="name"> Name of the DotvvmProperty which will contain the capability. If not specified, name of <typeparamref name="TCapabilityType"/> will be used. </param>
            <param name="capabilityAttributeProvider"> A member info from System.Reflection which will be used to look for attributes. If not specified, DotVVM will look for property or field with the specified <paramref name="name"/>. </param>
        </member>
        <member name="M:DotVVM.Framework.Binding.DotvvmCapabilityProperty.RegisterCapability(System.Type,System.Type,System.String,System.String,System.Reflection.ICustomAttributeProvider,DotVVM.Framework.Binding.DotvvmCapabilityProperty)">
            <summary> Registers a new DotVVM capability. For a given <paramref name="capabilityType"/>, this method will register a DotVVM property for each property of the capability type. </summary>
            <param name="globalPrefix"> Prefix prepended to all properties registered by this capability. </param>
            <param name="name"> Name of the DotvvmProperty which will contain the capability. If not specified, name of <paramref name="capabilityType"/> will be used. </param>
            <param name="capabilityAttributeProvider"> A member info from System.Reflection which will be used to look for attributes. If not specified, DotVVM will look for property or field with the specified <paramref name="name"/>. </param>
        </member>
        <member name="M:DotVVM.Framework.Binding.DotvvmCapabilityProperty.InitializeArgument(System.Reflection.ICustomAttributeProvider,System.String,System.Type,System.Type,DotVVM.Framework.Binding.DotvvmCapabilityProperty,System.Nullable{DotVVM.Framework.Binding.ValueOrBinding{System.Object}})">
            <summary> Returns DotvvmProperty, DotvvmCapabilityProperty or DotvvmPropertyGroup </summary>
        </member>
        <member name="T:DotVVM.Framework.Binding.CompileTimeOnlyDotvvmProperty">
            <summary>
            The DotvvmProperty that fallbacks to another DotvvmProperty's value.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.CompileTimeOnlyDotvvmProperty.Register``2(System.String)">
            <summary>
            Registers a new DotVVM property which can only be used at compile time.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Binding.DataContextChangeAttribute">
            Controls which data context should be used inside of the marked control or property
        </member>
        <member name="P:DotVVM.Framework.Binding.DataContextChangeAttribute.Order">
            When there is multiple of these attributes, they are executed in order which is determined by this parameter
        </member>
        <member name="M:DotVVM.Framework.Binding.DataContextChangeAttribute.GetChildDataContextType(DotVVM.Framework.Compilation.ControlTree.ITypeDescriptor,DotVVM.Framework.Compilation.ControlTree.IDataContextStack,DotVVM.Framework.Compilation.ControlTree.IAbstractControl,DotVVM.Framework.Compilation.ControlTree.IPropertyDescriptor)">
            Returns a the data context type that should be inside of the annotated control/property.
            Returning null means that the data context should not be changed. This overload is used by the view compiler.
        </member>
        <member name="M:DotVVM.Framework.Binding.DataContextChangeAttribute.GetChildDataContextType(System.Type,DotVVM.Framework.Compilation.ControlTree.DataContextStack,DotVVM.Framework.Controls.DotvvmBindableObject,DotVVM.Framework.Binding.DotvvmProperty)">
            Returns a the data context type that should be inside of the annotated control/property.
            Returning null means that the data context should not be changed. This overload is used at runtime, by `DotvvmProperty.GetDataContextType(DotvvmBindableObject)` helper method.
        </member>
        <member name="M:DotVVM.Framework.Binding.DataContextChangeAttribute.GetExtensionParameters(DotVVM.Framework.Compilation.ControlTree.ITypeDescriptor)">
            Gets the extension parameters that should be made available to the bindings inside.
        </member>
        <member name="P:DotVVM.Framework.Binding.DataContextChangeAttribute.PropertyDependsOn">
            Gets a list of attributes that need to be resolved before this attribute is invoked.
        </member>
        <member name="M:DotVVM.Framework.Binding.DotvvmBindingCacheHelper.CreateValueBinding(System.String,DotVVM.Framework.Compilation.ControlTree.DataContextStack,DotVVM.Framework.Compilation.BindingParserOptions)">
            <summary> Compiles a new `{value: ...code...}` binding which can be evaluated server-side and also client-side. The result is cached. </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.DotvvmBindingCacheHelper.CreateValueBinding``1(System.String,DotVVM.Framework.Compilation.ControlTree.DataContextStack,DotVVM.Framework.Compilation.BindingParserOptions)">
            <summary> Compiles a new `{value: ...code...}` binding which can be evaluated server-side and also client-side. The result is implicitly converted to <typeparamref name="TResult" />. The result is cached. </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.DotvvmBindingCacheHelper.CreateStaticCommand(System.String,DotVVM.Framework.Compilation.ControlTree.DataContextStack,DotVVM.Framework.Compilation.BindingParserOptions)">
            <summary> Compiles a new `{staticCommand: ...code...}` binding which can be evaluated server-side and also client-side. The result is cached. </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.DotvvmBindingCacheHelper.CreateStaticCommand``1(System.String,DotVVM.Framework.Compilation.ControlTree.DataContextStack,DotVVM.Framework.Compilation.BindingParserOptions)">
            <summary> Compiles a new `{staticCommand: ...code...}` binding which can be evaluated server-side and also client-side. The result is implicitly converted to <typeparamref name="TResult" />. The result is cached. </summary>
        </member>
        <member name="T:DotVVM.Framework.Binding.DotvvmControlCapabilityAttribute">
            <summary> This attribute is used for marking a DotVVM capability type. It can be also used to mark a capability property inside another capability. </summary>
        </member>
        <member name="T:DotVVM.Framework.Binding.DotvvmProperty">
            <summary>
            Represents a property of DotVVM controls.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Binding.DotvvmProperty.Name">
            <summary>
            Gets or sets the name of the property.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Binding.DotvvmProperty.DefaultValue">
            <summary>
            Gets the default value of the property.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Binding.DotvvmProperty.PropertyType">
            <summary>
            Gets the type of the property.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Binding.DotvvmProperty.DeclaringType">
            <summary>
            Gets the type of the class where the property is registered.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Binding.DotvvmProperty.IsValueInherited">
            <summary>
            Gets whether the value can be inherited from the parent controls.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Binding.DotvvmProperty.PropertyInfo">
            <summary>
            Gets or sets the Reflection property information.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Binding.DotvvmProperty.AttributeProvider">
            <summary>
            Provider of custom attributes for this property.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Binding.DotvvmProperty.MarkupOptions">
            <summary>
            Gets or sets the markup options.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Binding.DotvvmProperty.IsBindingProperty">
            <summary>
            Determines if property type inherits from IBinding
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Binding.DotvvmProperty.DescriptorFullName">
            <summary>
            Gets the full name of the descriptor.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Binding.DotvvmProperty.FullName">
            <summary>
            Gets the full name of the property.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Binding.DotvvmProperty.OwningCapability">
            <summary> The capability which declared this property. When the property is declared by an capability, it can only be used by this capability. </summary>
        </member>
        <member name="P:DotVVM.Framework.Binding.DotvvmProperty.UsedInCapabilities">
            <summary> The capabilities which use this property. </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.DotvvmProperty.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:DotVVM.Framework.Binding.DotvvmProperty"/> class from being created.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.DotvvmProperty.GetValue(DotVVM.Framework.Controls.DotvvmBindableObject,System.Boolean)">
            <summary>
            Gets the value of the property.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.DotvvmProperty.IsSet(DotVVM.Framework.Controls.DotvvmBindableObject,System.Boolean)">
            <summary>
            Gets whether the value of the property is set
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.DotvvmProperty.SetValue(DotVVM.Framework.Controls.DotvvmBindableObject,System.Object)">
            <summary>
            Sets the value of the property.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.DotvvmProperty.Register``2(System.Linq.Expressions.Expression{System.Func{DotVVM.Framework.Binding.DotvvmProperty}},``0,System.Boolean)">
            <summary>
            Registers the specified DotVVM property.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.DotvvmProperty.Register``2(System.Linq.Expressions.Expression{System.Func{``1,System.Object}},``0,System.Boolean)">
            <summary>
            Registers the specified DotVVM property.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.DotvvmProperty.Register``2(System.String,``0,System.Boolean,DotVVM.Framework.Binding.DotvvmProperty)">
            <summary>
            Registers the specified DotVVM property.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.DotvvmProperty.RegisterAlias``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Registers an alias with a property accessor for another DotvvmProperty given by the PropertyAlias attribute.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.DotvvmProperty.RegisterAlias``1(System.Linq.Expressions.Expression{System.Func{DotVVM.Framework.Binding.DotvvmProperty}})">
            <summary>
            Registers an alias for another DotvvmProperty given by the PropertyAlias attribute.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.DotvvmProperty.RegisterAlias``1(System.String)">
            <summary>
            Registers an alias for another DotvvmProperty given by the PropertyAlias attribute.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.DotvvmProperty.RegisterAlias(System.String,System.Type,System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            Registers an alias for a DotvvmProperty.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.DotvvmProperty.ResolveProperty(System.Type,System.String)">
            <summary>
            Resolves the <see cref="T:DotVVM.Framework.Binding.DotvvmProperty"/> by the declaring type and name.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.DotvvmProperty.ResolveProperty(System.String,System.Boolean)">
            <summary>
            Resolves the <see cref="T:DotVVM.Framework.Binding.DotvvmProperty"/> from the full name (DeclaringTypeName.PropertyName).
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.DotvvmProperty.ResolveProperties(System.Type)">
            <summary>
            Resolves all properties of specified type.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.DotvvmPropertyUtils.GetConstant``1(System.Linq.Expressions.Expression)">
            <summary> Gets a constant from the expression or throws if it's not possible </summary>
        </member>
        <member name="T:DotVVM.Framework.Binding.DotvvmPropertyWithFallback">
            <summary>
            The DotvvmProperty that fallbacks to another DotvvmProperty's value.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Binding.DotvvmPropertyWithFallback.FallbackProperty">
            <summary>
            Gets the property which value will be used as a fallback when this property is not set.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.DotvvmPropertyWithFallback.GetValue(DotVVM.Framework.Controls.DotvvmBindableObject,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:DotVVM.Framework.Binding.DotvvmPropertyWithFallback.IsSet(DotVVM.Framework.Controls.DotvvmBindableObject,System.Boolean)">
            <summary>
            Gets whether the value of the property is set
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.DotvvmPropertyWithFallback.Register``2(System.Linq.Expressions.Expression{System.Func{``1,System.Object}},DotVVM.Framework.Binding.DotvvmProperty,System.Boolean)">
            <summary>
            Registers a new DotVVM property which fallbacks to the <paramref name="fallbackProperty" /> when not set.
            </summary>
            <param name="propertyAccessor">The expression pointing to instance property.</param>
            <param name="fallbackProperty">The property which value will be used as a fallback when the new property is not set.</param>
            <param name="isValueInherited">Indicates whether the value can be inherited from the parent controls.</param>
        </member>
        <member name="M:DotVVM.Framework.Binding.DotvvmPropertyWithFallback.Register``2(System.String,DotVVM.Framework.Binding.DotvvmProperty,System.Boolean)">
            <summary>
            Registers a new DotVVM property which fallbacks to the <paramref name="fallbackProperty" /> when not set.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="fallbackProperty">The property which value will be used as a fallback when the new property is not set.</param>
            <param name="isValueInherited">Indicates whether the value can be inherited from the parent controls.</param>
        </member>
        <member name="M:DotVVM.Framework.Binding.Expressions.BindingExpression.AddNullResolvers">
            <summary>
            For performance reasons, derived bindings can set BindingResolverCollection to null to prevent runtime computation of the property which is somewhat costly
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Binding.Expressions.Command">
            <summary>
            Represents typical command binding delegate, equivalent to Func&lt;Task&gt;
            </summary>
        </member>
        <member name="F:DotVVM.Framework.Binding.Expressions.CommandBindingExpression.OptionalKnockoutContextParameter">
            Knockout context passed as postback argument. May be null, when it's the same as ko.contextFor(element).
        </member>
        <member name="M:DotVVM.Framework.Binding.Expressions.CommandBindingExpression.CreateJsPostbackInvocation(System.String,System.Nullable{System.Boolean})">
            <param name="needsCommandArgs">Whether the Javascript will contain commandArgs (true - it will be required, false - the symbolic parameter will not be available, null - it will be optional)</param>
        </member>
        <member name="P:DotVVM.Framework.Binding.Expressions.IStaticCommandBinding.OptionsLambdaJavascript">
            <summary> Returns code that should be placed in dotvvm.applyPostbackHandlers </summary>
        </member>
        <member name="T:DotVVM.Framework.Binding.Expressions.ValueBindingExpression">
            <summary>
            A binding that gets the value from a viewmodel property.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.Expressions.ValueBindingExpression.CreateThisBinding``1(DotVVM.Framework.Binding.BindingCompilationService,DotVVM.Framework.Compilation.ControlTree.DataContextStack)">
            Creates binding {value: _this} for a specific data context. Note that the result is cached (non-deterministically, using the <see cref="T:DotVVM.Framework.Runtime.Caching.IDotvvmCacheAdapter" />)
        </member>
        <member name="M:DotVVM.Framework.Binding.Expressions.ValueBindingExpression.CreateBinding``1(DotVVM.Framework.Binding.BindingCompilationService,System.Func{System.Object[],``0},DotVVM.Framework.Compilation.Javascript.Ast.JsExpression,DotVVM.Framework.Compilation.ControlTree.DataContextStack)">
            Crates a new value binding expression from the specified .NET delegate and Javascript expression. Note that this operation is not very cheap and the result is not cached.
        </member>
        <member name="M:DotVVM.Framework.Binding.Expressions.ValueBindingExpression.CreateBinding``1(DotVVM.Framework.Binding.BindingCompilationService,System.Func{System.Object[],``0},DotVVM.Framework.Compilation.Javascript.ParametrizedCode,DotVVM.Framework.Compilation.ControlTree.DataContextStack,System.Object[])">
            Crates a new value binding expression from the specified .NET delegate and Javascript expression. Note that this operation is not very cheap and the result is not cached.
        </member>
        <member name="M:DotVVM.Framework.Binding.Expressions.ValueBindingExpression.CreateBinding``1(DotVVM.Framework.Binding.BindingCompilationService,System.Linq.Expressions.Expression{System.Func{System.Object[],``0}},DotVVM.Framework.Compilation.ControlTree.DataContextStack,System.Object[])">
            Crates a new value binding expression from the specified Linq.Expression. Note that this operation is quite expansive and the result is not cached (you are supposed to do it and NOT invoke this function for every request).
        </member>
        <member name="M:DotVVM.Framework.Binding.HelperNamespace.DateTimeExtensions.ToBrowserLocalTime(System.DateTime)">
            <summary>
            Converts the date (assuming it is in UTC) to browser's local time.
            CAUTION: When evaluated on the server, no conversion is made as we don't know the browser timezone.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.HelperNamespace.DateTimeExtensions.ToBrowserLocalTime(System.Nullable{System.DateTime})">
            <summary>
            Converts the date (assuming it is in UTC) to browser's local time.
            CAUTION: When evaluated on the server, no conversion is made as we don't know the browser timezone.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.HelperNamespace.JsBindingApi.Invoke(System.String,System.Object[])">
            <summary> Invoke a command in client-side module registered for this page or control. The command cannot return a promise, use <see cref="M:DotVVM.Framework.Binding.HelperNamespace.JsBindingApi.InvokeAsync(System.String,System.Object[])" /> for that. </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.HelperNamespace.JsBindingApi.Invoke``1(System.String,System.Object[])">
            <summary> Invoke a command in client-side module registered for this page or control. <typeparamref name="T"/> is the return type. The command cannot return a promise, use <see cref="M:DotVVM.Framework.Binding.HelperNamespace.JsBindingApi.InvokeAsync``1(System.String,System.Object[])" /> for that. </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.HelperNamespace.JsBindingApi.InvokeAsync(System.String,System.Object[])">
            <summary> Invoke a command in client-side module registered for this page or control. The command can return a Promise. </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.HelperNamespace.JsBindingApi.InvokeAsync``1(System.String,System.Object[])">
            <summary> Invoke a command in client-side module registered for this page or control. <typeparamref name="T"/> is the return type. The command can return a Promise. </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.HelperNamespace.NetFrameworkExtensions.Split(System.String,System.String,System.StringSplitOptions)">
            <summary>
            This is an extension method that allows using unavailable string.Split(..) overload in .NET Framework
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.HelperNamespace.NetFrameworkExtensions.Split(System.String,System.Char,System.StringSplitOptions)">
            <summary>
            This is an extension method that allows using unavailable string.Split(..) overload in .NET Framework
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.HelperNamespace.NetFrameworkExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            This is an extension method that allows using unavailable string.Contains(..) overload in .NET Framework
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.HelperNamespace.NetFrameworkExtensions.Trim(System.String,System.Char)">
            <summary>
            This is an extension method that allows using unavailable string.Trim(..) overload in .NET Framework
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.HelperNamespace.NetFrameworkExtensions.TrimStart(System.String)">
            <summary>
            This is an extension method that allows using unavailable string.TrimStart(..) overload in .NET Framework
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.HelperNamespace.NetFrameworkExtensions.TrimEnd(System.String)">
            <summary>
            This is an extension method that allows using unavailable string.TrimEnd(..) overload in .NET Framework
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Binding.PropertyGroupAttribute">
            <summary> Attribute for annotating DotVVM property group. It is important for VS Extension to understand the property groups, it is irrelevant for DotVVM runtime.  </summary>
        </member>
        <member name="T:DotVVM.Framework.Binding.ValueOrBinding">
            <summary> Non-generic variant of <see cref="T:DotVVM.Framework.Binding.ValueOrBinding`1" />. Represents either a binding or a constant value. In TypeScript this would be object | <see cref="T:DotVVM.Framework.Binding.Expressions.IBinding"/>  </summary>
        </member>
        <member name="T:DotVVM.Framework.Binding.ValueOrBinding`1">
            <summary> Represents either a binding or a constant value. In TypeScript this would be <typeparamref name="T"/> | <see cref="T:DotVVM.Framework.Binding.Expressions.IBinding"/>. Note that `default(<see cref="T:DotVVM.Framework.Binding.ValueOrBinding`1" />)` is the same as `new <see cref="T:DotVVM.Framework.Binding.ValueOrBinding`1" />(default(T))` </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.ValueOrBinding`1.#ctor(DotVVM.Framework.Binding.Expressions.IBinding)">
            <summary> Creates new ValueOrBinding which contains the specified binding. Will throw an exception if the binding's result type is not assignable to <typeparamref name="T"/> </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.ValueOrBinding`1.#ctor(DotVVM.Framework.Binding.Expressions.IStaticValueBinding{`0})">
            <summary> Creates new ValueOrBinding which contains the specified binding. </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.ValueOrBinding`1.#ctor(`0)">
            <summary> Creates new ValueOrBinding which contains the specified value. Note that there is an implicit conversion for this, so calling the constructor explicitly may be unnecessary. </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.ValueOrBinding`1.FromBoxedValue(System.Object)">
            <summary> Creates a ValueOrBinding from raw object. If the object is IBinding, the ValueOrBinding will <see cref="P:DotVVM.Framework.Binding.ValueOrBinding`1.HasBinding"/> == true, otherwise it will <see cref="P:DotVVM.Framework.Binding.ValueOrBinding`1.HasValue" /> == true. </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.ValueOrBinding`1.Evaluate(DotVVM.Framework.Controls.DotvvmBindableObject)">
            <summary> If the binding <see cref="P:DotVVM.Framework.Binding.ValueOrBinding`1.HasValue" />, returns it. If it <see cref="P:DotVVM.Framework.Binding.ValueOrBinding`1.HasBinding" />, evaluates it on the <paramref name="control"/> and returns the result. </summary>
        </member>
        <member name="P:DotVVM.Framework.Binding.ValueOrBinding`1.ValueOrDefault">
            <summary> Returns the value as object if this <see cref="P:DotVVM.Framework.Binding.ValueOrBinding`1.HasValue"/> or `default(T)` if this <see cref="P:DotVVM.Framework.Binding.ValueOrBinding`1.HasBinding"/>. </summary>
        </member>
        <member name="P:DotVVM.Framework.Binding.ValueOrBinding`1.BindingOrDefault">
            <summary> Returns the binding if this <see cref="P:DotVVM.Framework.Binding.ValueOrBinding`1.HasBinding"/>, or null if this <see cref="P:DotVVM.Framework.Binding.ValueOrBinding`1.HasValue"/> or `default(T)`. </summary>
        </member>
        <member name="P:DotVVM.Framework.Binding.ValueOrBinding`1.BoxedValue">
            <summary> Returns the value as object if this <see cref="P:DotVVM.Framework.Binding.ValueOrBinding`1.HasValue"/> or null if this <see cref="P:DotVVM.Framework.Binding.ValueOrBinding`1.HasBinding"/>. </summary>
        </member>
        <member name="P:DotVVM.Framework.Binding.ValueOrBinding`1.HasValue">
            <summary> If this ValueOrBinding contains value. </summary>
        </member>
        <member name="P:DotVVM.Framework.Binding.ValueOrBinding`1.HasBinding">
            <summary> If this ValueOrBinding contains binding. </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.ValueOrBinding`1.GetBinding">
            <summary> Gets a binding or throws an exception if the ValueOrBinding contains a value. </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.ValueOrBinding`1.GetValue">
            <summary> Gets a value from ValueOrBinding or throws an exception if the it contains a binding. To evaluate the binding use the <see cref="M:DotVVM.Framework.Binding.ValueOrBinding`1.Evaluate(DotVVM.Framework.Controls.DotvvmBindableObject)" /> method. </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.ValueOrBinding`1.DownCast``1(DotVVM.Framework.Binding.ValueOrBinding{``0})">
            <summary> Returns a ValueOrBinding with new type T which is a base type of the old T2 </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.ValueOrBinding`1.UpCast``1">
            <summary> Returns a ValueOrBinding with new type T2 which is a derived type of the old T. Will throw an exception if the conversion is not possible. </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.ValueOrBinding`1.GetParametrizedJsExpression(DotVVM.Framework.Controls.DotvvmBindableObject,System.Boolean)">
            <summary> Returns a Javascript (knockout) expression representing this value or this binding. </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.ValueOrBinding`1.GetJsExpression(DotVVM.Framework.Controls.DotvvmBindableObject,System.Boolean)">
            <summary> Returns a Javascript (knockout) expression representing this value or this binding. The parameters are set to defaults, so knockout context is $context, view model is $data and both are available as global. </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.ValueOrBinding`1.Process(System.Action{`0},System.Action{DotVVM.Framework.Binding.Expressions.IBinding})">
            <summary> Simple helper which invokes <paramref name="processValue"/> if this HasValue and <paramref name="processBinding"/> if it HasBinding. </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.ValueOrBinding`1.Process``1(System.Func{`0,``0},System.Func{DotVVM.Framework.Binding.Expressions.IBinding,``0})">
            <summary> Simple helper which invokes <paramref name="processValue"/> if this HasValue and <paramref name="processBinding"/> if it HasBinding. </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.ValueOrBinding`1.ProcessValueBinding(DotVVM.Framework.Controls.DotvvmBindableObject,System.Action{`0},System.Action{DotVVM.Framework.Binding.Expressions.IValueBinding})">
            <summary> Simple helper which invokes <paramref name="processValue"/> if this HasValue or if the binding is a resource binding. Invokes <paramref name="processBinding"/> if it HasBinding and the binding is <see cref="T:DotVVM.Framework.Binding.Expressions.IValueBinding" />. </summary>
        </member>
        <member name="M:DotVVM.Framework.Binding.ValueOrBinding`1.ProcessValueBinding``1(DotVVM.Framework.Controls.DotvvmBindableObject,System.Func{`0,``0},System.Func{DotVVM.Framework.Binding.Expressions.IValueBinding,``0})">
            <summary> Simple helper which invokes <paramref name="processValue"/> if this HasValue or if the binding is a resource binding. Invokes <paramref name="processBinding"/> if it HasBinding and the binding is <see cref="T:DotVVM.Framework.Binding.Expressions.IValueBinding" />. </summary>
        </member>
        <member name="T:DotVVM.Framework.Binding.ViewModuleReferenceInfo">
            <summary>
            Reference to a javascript file.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Binding.ViewModuleReferenceInfo.ViewId">
            <summary>The modules are referenced under an Id to the dotvvm client-side runtime. The same ID must be used in the invocation from the _js literal.</summary>
        </member>
        <member name="P:DotVVM.Framework.Binding.ViewModuleReferenceInfo.IsMarkupControl">
            <summary> Whether control id should be used instead of ViewId to identify the modules. </summary>
        </member>
        <member name="P:DotVVM.Framework.Compilation.Binding.ExpressionBuildingVisitor.ResolveOnlyTypeName">
            <summary> We use the parser to parse directives where only type name is expected. At that place, the flag is set to true otherwise it's false </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Binding.MemberExpressionFactory.UpdateMember(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Creates an expression that updates the member inside <paramref name="leftWrapped"/> with a
            new <paramref name="value"/>.
            </summary>
            <remarks>
            Should <paramref name="leftWrapped"/> contain a call to the
            <see cref="M:DotVVM.Framework.Controls.DotvvmBindableObject.GetValue(DotVVM.Framework.Binding.DotvvmProperty,System.Boolean)"/> method, it will be
            replaced with a <see cref="M:DotVVM.Framework.Controls.DotvvmBindableObject.SetValue(DotVVM.Framework.Binding.DotvvmProperty,System.Object)"/>
            call.
            </remarks>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Binding.TypeConversion.Convert(System.Linq.Expressions.Expression@,System.Linq.Expressions.Expression@)">
            <summary>
            Performs implicit conversion between two expressions depending on their type precedence
            </summary>
            <param name="le"></param>
            <param name="re"></param>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Binding.TypeConversion.Convert(System.Linq.Expressions.Expression,System.Type)">
            <summary>
            Performs implicit conversion on an expression against a specified type
            </summary>
            <param name="le"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Binding.TypeConversion.CanConvert(System.Type,System.Type)">
            <summary>
            Compares two types for implicit conversion
            </summary>
            <param name="from">The source type</param>
            <param name="to">The destination type</param>
            <returns>-1 if conversion is not possible, 0 if no conversion necessary, +1 if conversion possible</returns>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Binding.TypeConversion.ImplicitNumericConversion(System.Linq.Expressions.Expression,System.Type)">
            <summary>
            Tries to perform implicit numeric conversion
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Binding.TypeConversion.MagicLambdaConversion(System.Linq.Expressions.Expression,System.Type)">
            This is a strange conversion that wraps the entire expression into a Lambda
            and makes an invocable delegate from a normal expression.
            It also replaces special ExtensionParameters attached to the expression for lambda parameters
        </member>
        <member name="M:DotVVM.Framework.Compilation.Binding.TypeConversion.TaskConversion(System.Linq.Expressions.Expression,System.Type)">
            Performs conversions by wrapping or unwrapping results to/from <see cref="T:System.Threading.Tasks.Task" />
        </member>
        <member name="T:DotVVM.Framework.Compilation.Binding.VariableHoistingVisitor">
            <summary> Takes all variables from block expressions and hoists them into a top-level expression.
            This prevents glitches with undefined variables that would be introduced by following steps in static command translation. </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Binding.VariableHoistingVisitor.HoistVariables(System.Linq.Expressions.Expression)">
            <summary> Takes all variables from block expressions and hoists them into a top-level expression.
            This prevents glitches with undefined variables that would be introduced by following steps in static command translation. </summary>
        </member>
        <member name="P:DotVVM.Framework.Compilation.BindingParserOptions.ImportNamespaces">
            <summary>
            Additional namespace imports that will be added to imports defined in Dotvvm page just before the binding is resolved
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Compilation.BindingParserOptions.ExtensionParameters">
            <summary>
            Additional export parameters that will be added to export parameters defined in Dotvvm page just before the binding is resolved
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.CompiledAssemblyCache.DefaultOnResolving(System.Runtime.Loader.AssemblyLoadContext,System.Reflection.AssemblyName)">
            <summary>
            Tries to resolve compiled assembly.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Compilation.ControlPrecompilationVisitor">
            <summary> Evaluates GetContents method on composite controls with <see cref="P:DotVVM.Framework.Controls.ControlMarkupOptionsAttribute.Precompile" /> set. </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlPrecompilationVisitor.Precompile(DotVVM.Framework.Compilation.ControlTree.Resolved.ResolvedControl,DotVVM.Framework.Controls.ControlPrecompilationMode,System.IServiceProvider)">
            <summary> Tries to precompile the specified control. Null is returned only in "IfPossible" precompilation mode when there is a binding which cannot be passed into the control. </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlPrecompilationVisitor.AllowsBindings(System.Type)">
            Returns true if we can send binding into the property without evaluating it
            -> true for ValueOrBinding, IBinding, or IReadOnlyDictionary{_, T}, IDictionary{_, T} where T allows bindings
        </member>
        <member name="T:DotVVM.Framework.Compilation.SkipPrecompilationException">
            <summary> When thrown, precompilation will be skipped, even though normal exceptions are not ignored. If precompilation mode is set to Always, the compilation fails with the specified message. </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.SkipPrecompilationException.#ctor(System.String,System.Exception)">
            <summary> When thrown, precompilation will be skipped, even though normal exceptions are not ignored. If precompilation mode is set to Always, the compilation fails with the specified message. </summary>
        </member>
        <member name="T:DotVVM.Framework.Compilation.ControlTree.BindingExtensionParameter">
            Base class for defining an extension parameter.
        </member>
        <member name="P:DotVVM.Framework.Compilation.ControlTree.BindingExtensionParameter.Identifier">
            A name that will be used in binding expressions to reference this parameter
        </member>
        <member name="P:DotVVM.Framework.Compilation.ControlTree.BindingExtensionParameter.ParameterType">
            Type of the parameter. When used in a binding, the expression will have this type.
        </member>
        <member name="P:DotVVM.Framework.Compilation.ControlTree.BindingExtensionParameter.Inherit">
            When the extension parameter is introduced in a specific data context, this parameter controls if the parameter will also be valid in child data contexts.
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.BindingExtensionParameter.GetServerEquivalent(System.Linq.Expressions.Expression)">
            Returns an expression that is evaluated when value of this parameter is needed when running on server
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.BindingExtensionParameter.GetJsTranslation(DotVVM.Framework.Compilation.Javascript.Ast.JsExpression)">
            Returns a JS expression that is put into the emitted JS code on the place of the parameter
        </member>
        <member name="T:DotVVM.Framework.Compilation.ControlTree.ControlResolverBase">
            <summary>
            Default DotVVM control resolver.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.ControlResolverBase.#ctor(DotVVM.Framework.Configuration.DotvvmMarkupConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:DotVVM.Framework.Compilation.ControlTree.ControlResolverBase"/> class.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.ControlResolverBase.ResolveControl(System.String,System.String,System.Object[]@)">
            <summary>
            Resolves the metadata for specified element.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.ControlResolverBase.ResolveControl(DotVVM.Framework.Compilation.IControlType)">
            <summary>
            Resolves the control metadata for specified type.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.ControlResolverBase.ResolveControl(DotVVM.Framework.Compilation.ControlTree.ITypeDescriptor)">
            <summary>
            Resolves the control metadata for specified type.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.ControlResolverBase.ResolveBinding(System.String)">
            <summary>
            Resolves the binding type.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.ControlResolverBase.FindControlType(System.String,System.String)">
            <summary>
            Finds the control metadata.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.ControlResolverBase.FindProperty(DotVVM.Framework.Compilation.ControlTree.IControlResolverMetadata,System.String,DotVVM.Framework.Controls.MappingMode)">
            <summary>
            Finds the property in the control metadata.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.ControlResolverBase.FindGlobalPropertyOrGroup(System.String,DotVVM.Framework.Controls.MappingMode)">
            <summary>
            Finds the DotVVM property in the global property store.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.ControlResolverBase.FindCompiledControl(System.String,System.String,System.String,System.String)">
            <summary>
            Finds the compiled control.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.ControlResolverBase.FindMarkupControl(System.String)">
            <summary>
            Finds the markup control.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.ControlResolverBase.BuildControlMetadata(DotVVM.Framework.Compilation.IControlType)">
            <summary>
            Gets the control metadata.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.ControlResolverMetadata.FindProperty(System.String)">
            <summary>
            Finds the property.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Compilation.ControlTree.ControlTreeResolverBase">
            <summary>
            An abstract base class for control tree resolver.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.ControlTreeResolverBase.#ctor(DotVVM.Framework.Compilation.ControlTree.IControlResolver,DotVVM.Framework.Compilation.ControlTree.IAbstractTreeBuilder,DotVVM.Framework.Compilation.Directives.IMarkupDirectiveCompilerPipeline)">
            <summary>
            Initializes a new instance of the <see cref="T:DotVVM.Framework.Compilation.ControlTree.ControlTreeResolverBase"/> class.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.ControlTreeResolverBase.ResolveTree(DotVVM.Framework.Compilation.Parser.Dothtml.Parser.DothtmlRootNode,System.String)">
            <summary>
            Resolves the control tree.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.ControlTreeResolverBase.ResolveRootContent(DotVVM.Framework.Compilation.Parser.Dothtml.Parser.DothtmlRootNode,DotVVM.Framework.Compilation.ControlTree.IAbstractControl,DotVVM.Framework.Compilation.ControlTree.IControlResolverMetadata)">
            <summary>
            Resolves the content of the root node.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.ControlTreeResolverBase.ProcessNode(DotVVM.Framework.Compilation.ControlTree.IAbstractTreeNode,DotVVM.Framework.Compilation.Parser.Dothtml.Parser.DothtmlNode,DotVVM.Framework.Compilation.ControlTree.IControlResolverMetadata,DotVVM.Framework.Compilation.ControlTree.IDataContextStack)">
            <summary>
            Processes the parser node and builds a control.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.ControlTreeResolverBase.ProcessObjectElement(DotVVM.Framework.Compilation.Parser.Dothtml.Parser.DothtmlElementNode,DotVVM.Framework.Compilation.ControlTree.IDataContextStack)">
            <summary>
            Processes the HTML element that represents a new object.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.ControlTreeResolverBase.ProcessBinding(DotVVM.Framework.Compilation.Parser.Dothtml.Parser.DothtmlBindingNode,DotVVM.Framework.Compilation.ControlTree.IDataContextStack,DotVVM.Framework.Compilation.ControlTree.IPropertyDescriptor)">
            <summary>
            Processes the binding node.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.ControlTreeResolverBase.ProcessAttribute(DotVVM.Framework.Compilation.ControlTree.IPropertyDescriptor,DotVVM.Framework.Compilation.Parser.Dothtml.Parser.DothtmlAttributeNode,DotVVM.Framework.Compilation.ControlTree.IAbstractControl,DotVVM.Framework.Compilation.ControlTree.IDataContextStack)">
            <summary>
            Processes the attribute node.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.ControlTreeResolverBase.ProcessControlContent(DotVVM.Framework.Compilation.ControlTree.IAbstractControl,System.Collections.Generic.IEnumerable{DotVVM.Framework.Compilation.Parser.Dothtml.Parser.DothtmlNode})">
            <summary>
            Processes the content of the control node.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.ControlTreeResolverBase.ResolveControlContentImmediately(DotVVM.Framework.Compilation.ControlTree.IAbstractControl,System.Collections.Generic.List{DotVVM.Framework.Compilation.Parser.Dothtml.Parser.DothtmlNode})">
            <summary>
            Resolves the content of the control immediately during the parsing.
            Override this method if you need lazy loading of tree node contents.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.ControlTreeResolverBase.ProcessElementProperty(DotVVM.Framework.Compilation.ControlTree.IAbstractControl,DotVVM.Framework.Compilation.ControlTree.IPropertyDescriptor,System.Collections.Generic.IEnumerable{DotVVM.Framework.Compilation.Parser.Dothtml.Parser.DothtmlNode},DotVVM.Framework.Compilation.Parser.Dothtml.Parser.DothtmlElementNode)">
            <summary>
            Processes the element which contains property value.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.ControlTreeResolverBase.ProcessTemplate(DotVVM.Framework.Compilation.ControlTree.IAbstractTreeNode,System.Collections.Generic.IEnumerable{DotVVM.Framework.Compilation.Parser.Dothtml.Parser.DothtmlNode},DotVVM.Framework.Compilation.ControlTree.IDataContextStack)">
            <summary>
            Processes the template contents.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.ControlTreeResolverBase.FilterNodes``1(System.Collections.Generic.IEnumerable{DotVVM.Framework.Compilation.Parser.Dothtml.Parser.DothtmlNode},DotVVM.Framework.Compilation.ControlTree.IPropertyDescriptor)">
            <summary>
            Gets the inner property elements and makes sure that no other content is present.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.ControlTreeResolverBase.GetDataContextChange(DotVVM.Framework.Compilation.ControlTree.IDataContextStack,DotVVM.Framework.Compilation.ControlTree.IAbstractControl,DotVVM.Framework.Compilation.ControlTree.IPropertyDescriptor)">
            <summary>
            Gets the data context change behavior for the specified control property.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.ControlTreeResolverBase.CreateControlType(DotVVM.Framework.Compilation.ControlTree.ITypeDescriptor,System.String)">
            <summary>
            Creates the IControlType identification of the control.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.ControlTreeResolverBase.CreateDataContextTypeStack(DotVVM.Framework.Compilation.ControlTree.ITypeDescriptor,DotVVM.Framework.Compilation.ControlTree.IDataContextStack,System.Collections.Generic.IReadOnlyList{DotVVM.Framework.Compilation.NamespaceImport},System.Collections.Generic.IReadOnlyList{DotVVM.Framework.Compilation.ControlTree.BindingExtensionParameter})">
            <summary>
            Creates the data context type stack object.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.ControlTreeResolverBase.ConvertValue(System.String,DotVVM.Framework.Compilation.ControlTree.ITypeDescriptor)">
            <summary>
            Converts the value to the property type.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.ControlTreeResolverBase.CompileBinding(DotVVM.Framework.Compilation.Parser.Dothtml.Parser.DothtmlBindingNode,DotVVM.Framework.Compilation.BindingParserOptions,DotVVM.Framework.Compilation.ControlTree.IDataContextStack,DotVVM.Framework.Compilation.ControlTree.IPropertyDescriptor)">
            <summary>
            Compiles the binding.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Compilation.ControlTree.DataContextStack">
            <summary>
            Represents compile-time DataContext info - Type of current DataContext, it's parent and other available parameters
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.DataContextStack.GetCurrentExtensionParameters">
            <summary>
            Gets all extension parameter available in current context and their definition offset
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.DefaultControlResolver.InvokeStaticConstructorsOnAllControls">
            <summary>
            Invokes the static constructors on all controls to register all <see cref="T:DotVVM.Framework.Binding.DotvvmProperty"/>.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.DefaultControlResolver.InitType(System.Type)">
            <summary> Ensures that the type is initialized - run .cctor and registers all properties/capabilities. </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.DefaultControlResolver.ResolveAllPropertyAliases">
            <summary>
            After all DotvvmProperties have been registered, those marked with PropertyAliasAttribute can be resolved.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.DefaultControlResolver.BuildControlAliasesMap">
            <summary>
            After all DotvvmControls have been discovered, build a map of alternative names.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.DefaultControlResolver.ResolveControl(DotVVM.Framework.Compilation.ControlTree.ITypeDescriptor)">
            <summary>
            Resolves the control metadata for specified type.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.DefaultControlResolver.FindCompiledControl(System.String,System.String,System.String,System.String)">
            <summary>
            Finds the compiled control.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.DefaultControlResolver.FindMarkupControl(System.String)">
            <summary>
            Finds the markup control.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.DefaultControlResolver.BuildControlMetadata(DotVVM.Framework.Compilation.IControlType)">
            <summary>
            Gets the control metadata.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Compilation.ControlTree.DefaultControlTreeResolver">
            <summary>
            A runtime implementation of the control tree resolver.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.DefaultControlTreeResolver.#ctor(DotVVM.Framework.Compilation.ControlTree.IControlResolver,DotVVM.Framework.Compilation.ControlTree.IAbstractTreeBuilder,DotVVM.Framework.Compilation.Directives.IMarkupDirectiveCompilerPipeline)">
            <summary>
            Initializes a new instance of the <see cref="T:DotVVM.Framework.Compilation.ControlTree.DefaultControlTreeResolver"/> class.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Compilation.ControlTree.DotvvmPropertyGroup.OwningCapability">
            <summary> The capability which declared this property. When the property is declared by an capability, it can only be used by this capability. </summary>
        </member>
        <member name="P:DotVVM.Framework.Compilation.ControlTree.DotvvmPropertyGroup.UsedInCapabilities">
            <summary> The capabilities which use this property. </summary>
        </member>
        <member name="T:DotVVM.Framework.Compilation.ControlTree.IAbstractDirectiveAttributeReference">
            <summary>
            Abstract tree node representing attribute defined on a markup declared property.
            See the part marked by `-- --` in th following next example:
            @property MyProp, --MyAttribute.Property--
            
            This is used to provide simplyfied equivalent of `[MyAttribute]` C# syntax
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Compilation.ControlTree.IAbstractPropertyDeclarationDirective">
             <summary>
             Abstract tree node representing semantic for control property declaration in DotHTML markup.
            
             Example:
             @property string MyProperty = "Initial value", MyAttribute.Property = true
             </summary>
        </member>
        <member name="P:DotVVM.Framework.Compilation.ControlTree.IAbstractViewModuleDirective.ImportedModule">
            <summary>Original path specified by the module</summary>
        </member>
        <member name="P:DotVVM.Framework.Compilation.ControlTree.IAbstractViewModuleDirective.ImportedResourceName">
            <summary>The imported resource that will be referenced at runtime</summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.IControlResolver.ResolveControl(System.String,System.String,System.Object[]@)">
            <summary>
            Resolves the metadata for specified element.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.IControlResolver.ResolveControl(DotVVM.Framework.Compilation.IControlType)">
            <summary>
            Resolves the control metadata for specified type.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.IControlResolver.BuildControlMetadata(DotVVM.Framework.Compilation.IControlType)">
            <summary>
            Builds the control metadata.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.IControlResolver.ResolveControl(DotVVM.Framework.Compilation.ControlTree.ITypeDescriptor)">
            <summary>
            Resolves the control metadata for specified type.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.IControlResolver.ResolveBinding(System.String)">
            <summary>
            Resolves the binding type.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.IControlResolver.FindProperty(DotVVM.Framework.Compilation.ControlTree.IControlResolverMetadata,System.String,DotVVM.Framework.Controls.MappingMode)">
            <summary>
            Finds the property in the control metadata.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Compilation.ControlTree.IControlResolverMetadata.PropertyGroups">
            <summary>
            Gets property groups available on this control (list is ordered - longer prefix goes first)
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Compilation.ControlTree.ITypeDescriptor.CSharpName">
            <summary> Returns type name with generic arguments in the C# style. Does not include namespaces. </summary>
        </member>
        <member name="P:DotVVM.Framework.Compilation.ControlTree.ITypeDescriptor.CSharpFullName">
            <summary> Returns type name including namespace with generic arguments in the C# style. </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlTree.LifecycleRequirementsAssigningVisitor.ClearCaches(System.Type[])">
            <summary> Clear cache when hot reload happens </summary>
        </member>
        <member name="T:DotVVM.Framework.Compilation.ControlTree.Resolved.ResolvedViewModuleDirective">
            <summary> Represents the @js directive - import ES module on the client side </summary>
        </member>
        <member name="P:DotVVM.Framework.Compilation.ControlTree.Resolved.ResolvedViewModuleDirective.ImportedModule">
            <summary>Original path specified by the module</summary>
        </member>
        <member name="P:DotVVM.Framework.Compilation.ControlTree.Resolved.ResolvedViewModuleDirective.ImportedResourceName">
            <summary>The imported resource that will be referenced at runtime</summary>
        </member>
        <member name="T:DotVVM.Framework.Compilation.UsedPropertiesFindingVisitor">
            <summary> Tracks which control properties are used in this markup control and stores that in <see cref="F:DotVVM.Framework.Controls.Internal.UsedPropertiesInfoProperty" /> </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ControlType.#ctor(System.Type,System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:DotVVM.Framework.Compilation.ControlType"/> class.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Compilation.DataContextPropertyAssigningVisitor">
            <summary>
            Assigns <see cref="F:DotVVM.Framework.Controls.Internal.DataContextTypeProperty" /> to all controls that have different datacontext that their parent
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Compilation.DefaultAttributeValueMerger">
             <summary>
             Merges provided values based on implemented static 'MergeValues' or 'MergeExpression' method:
            
             implement public static object MergeValues([DotvvmProperty], ValueA, ValueB) and this will decide which will should be used
             or implement public static Expression MergeExpressions(DotvvmProperty, Expression a, Expression b)
             </summary>
        </member>
        <member name="T:DotVVM.Framework.Compilation.DefaultControlBuilderFactory">
            <summary>
            Provides control builder objects for markup files.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.DefaultControlBuilderFactory.GetControlBuilder(System.String)">
            <summary>
            Gets the control builder.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.DefaultControlBuilderFactory.CreateControlBuilder(DotVVM.Framework.Hosting.MarkupFile)">
            <summary>
            Creates the control builder.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Directives.BaseTypeDirectiveCompiler.GetDefaultWrapperType">
            <summary>
            Gets the default type of the wrapper for the view.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Compilation.DotHtmlFileInfo.VirtualPath">
            <summary>Gets or sets the virtual path to the view.</summary>
        </member>
        <member name="T:DotVVM.Framework.Compilation.DotvvmLocationInfo">
            <summary>
            Contains debug information about original binding location.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.DotvvmLocationInfo.#ctor(System.String,System.ValueTuple{System.Int32,System.Int32}[],System.Nullable{System.Int32},System.Type,DotVVM.Framework.Binding.DotvvmProperty)">
            <summary>
            Contains debug information about original binding location.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.DotvvmViewCompilationService.RegisterCompiledView(System.String,DotVVM.Framework.Compilation.ViewCompiler.ControlBuilderDescriptor,System.Exception)">
            <summary> Callback from the compiler which adds the view compilation result to the status page. </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ExtensionMethodsCache.ClearCaches(System.Type[])">
            <summary> Clear cache when hot reload happens </summary>
        </member>
        <member name="T:DotVVM.Framework.Compilation.HandleAsImmutableObjectInDotvvmPropertyAttribute">
            <summary>
            Tells the DotVVM view compiler that instance of a marked type may be used in DotvvmProperty. It is supposed to be immutable, as it will be shared across all requests and controls with the same property setter.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.IDotvvmViewCompilationService.GetFilesWithFailedCompilation">
            <summary>
            Gets all DotHtmlFileInfos with Status CompilationFailed from last compilation.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.IDotvvmViewCompilationService.GetMasterPages">
            <summary>
            Returns all currently known masterpages.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.IDotvvmViewCompilationService.GetControls">
            <summary>
            Returns all discovered controls.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.IDotvvmViewCompilationService.GetRoutes">
            <summary>
            Returns all discovered routes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotVVM.Framework.Compilation.IDotvvmViewCompilationService.BuildView(DotVVM.Framework.Compilation.DotHtmlFileInfo,DotVVM.Framework.Compilation.DotHtmlFileInfo@)">
            <summary>
            Builds given DotHtml file.
            </summary>
            <param name="file">File to compile</param>
            <param name="masterPage">Master page associated with given file.</param>
            <returns></returns>
        </member>
        <member name="M:DotVVM.Framework.Compilation.IDotvvmViewCompilationService.CompileAll(System.Boolean,System.Boolean)">
            <summary>
            Compiles all view which have not been compiled yet.
            </summary>
            <param name="buildInParallel">If set, than the compilations will be performed in parallel.</param>
            <param name="forceRecompile">If set, than everything will be recompiled.</param>
            <returns>Returns whether compilation was successful.</returns>
        </member>
        <member name="T:DotVVM.Framework.Compilation.Javascript.Ast.IAnnotatable">
            <summary>
            Provides an interface to handle annotations in an object.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Compilation.Javascript.Ast.IAnnotatable.Annotations">
            <summary>
            Gets all annotations stored on this IAnnotatable.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Javascript.Ast.IAnnotatable.Annotation``1">
            <summary>
            Gets the first annotation of the specified type.
            Returns null if no matching annotation exists.
            </summary>
            <typeparam name='T'>
            The type of the annotation.
            </typeparam>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Javascript.Ast.IAnnotatable.HasAnnotation(System.Object)">
            <summary>
            Uses reference comparison to determine whether the object has the annotation.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Javascript.Ast.IAnnotatable.Annotation(System.Type)">
            <summary>
            Gets the first annotation of the specified type.
            Returns null if no matching annotation exists.
            </summary>
            <param name='type'>
            The type of the annotation.
            </param>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Javascript.Ast.IAnnotatable.AddAnnotation``1(``0)">
            <summary>
            Adds an annotation to this instance.
            </summary>
            <param name='annotation'>
            The annotation to add.
            </param>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Javascript.Ast.IAnnotatable.RemoveAnnotations``1">
            <summary>
            Removes all annotations of the specified type.
            </summary>
            <typeparam name='T'>
            The type of the annotations to remove.
            </typeparam>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Javascript.Ast.IAnnotatable.RemoveAnnotations(System.Type)">
            <summary>
            Removes all annotations of the specified type.
            </summary>
            <param name='type'>
            The type of the annotations to remove.
            </param>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Javascript.Ast.IAnnotatable.RemoveAnnotation(System.Object)">
            <summary>
            Removes the specified annotation
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Compilation.Javascript.Ast.AbstractAnnotatable">
            <summary>
            Base class used to implement the IAnnotatable interface.
            This implementation is thread-safe.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Javascript.Ast.AbstractAnnotatable.CloneAnnotations">
            <summary>
            Clones all annotations.
            This method is intended to be called by Clone() implementations in derived classes.
            <code>
            var copy = (AstNode)MemberwiseClone();
            copy.CloneAnnotations();
            </code>
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Compilation.Javascript.Ast.AbstractAnnotatable.Annotations">
            <summary>
            Gets all annotations stored on this node.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Javascript.Ast.JsAstHelpers.Return(DotVVM.Framework.Compilation.Javascript.Ast.JsExpression)">
            Builds `return {expr}`
        </member>
        <member name="M:DotVVM.Framework.Compilation.Javascript.Ast.JsAstHelpers.GetLeafResultNodes(DotVVM.Framework.Compilation.Javascript.Ast.JsExpression)">
            <summary>
            Gets nodes for the expression that can be result.
            for `a + b` return `a +b`
            for `a ? b : c` returns `b` and `c`
            for `a || b` returns `a` and `b`
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Javascript.Ast.JsAstHelpers.Clone``1(``0)">
            <summary>
            Clones the whole subtree starting at this AST node.
            </summary>
            <remarks>Annotations are copied over to the new nodes; and any annotations implementing ICloneable will be cloned.</remarks>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Javascript.Ast.JsAstHelpers.CloneIfAlreadyUsed``1(``0)">
            <summary>
            Clones the whole subtree starting at this AST node, but only if the node is already used in a tree
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Javascript.Ast.JsAstHelpers.EnsureObservableWrapped(DotVVM.Framework.Compilation.Javascript.Ast.JsExpression)">
            Wraps the expression in `dotvvm.evaluator.wrapObservable` if needed
            Note that this method may be used to process nodes that are already fully handled by all the transformation regarding observables -> it's fine to use to post-process a generate expression, but you shall not use it in custom method translator (see <see cref="F:DotVVM.Framework.Compilation.Javascript.ObservableTransformationAnnotation.EnsureWrapped"/> annotation instead)
        </member>
        <member name="P:DotVVM.Framework.Compilation.Javascript.Ast.JsLiteral.LiteralValue">
            <summary>
            Javascript (JSON) representation of the object.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Compilation.Javascript.Ast.JsMemberAccessExpression.IsOptional">
            <summary> If true, `?.` operator will be used. If false, `.` is used (this is default) </summary>
        </member>
        <member name="P:DotVVM.Framework.Compilation.Javascript.Ast.JsNode.Ancestors">
            <summary>
            Gets the ancestors of this node (excluding this node itself)
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Compilation.Javascript.Ast.JsNode.AncestorsAndSelf">
            <summary>
            Gets the ancestors of this node (including this node itself)
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Compilation.Javascript.Ast.JsNode.Descendants">
            <summary>
            Gets all descendants of this node (excluding this node itself) in pre-order.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Compilation.Javascript.Ast.JsNode.DescendantsAndSelf">
            <summary>
            Gets all descendants of this node (including this node itself) in pre-order.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Javascript.Ast.JsNode.GetChildByRole``1(DotVVM.Framework.Compilation.Javascript.Ast.JsTreeRole{``0})">
            <summary>
            Gets the first child with the specified role.
            Returns the role's null object if the child is not found.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Javascript.Ast.JsNode.AddChildUnsafe(DotVVM.Framework.Compilation.Javascript.Ast.JsNode,DotVVM.Framework.Compilation.Javascript.Ast.JsTreeRole)">
            <summary>
            Adds a child without performing any safety checks.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Javascript.Ast.JsNode.Remove">
            <summary>
            Removes this node from its parent.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Javascript.Ast.JsNode.ReplaceWith(DotVVM.Framework.Compilation.Javascript.Ast.JsNode)">
            <summary>
            Replaces this node with the new node.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Javascript.Ast.JsNode.GetNextNode(System.Func{DotVVM.Framework.Compilation.Javascript.Ast.JsNode,System.Boolean})">
            <summary>
            Gets the next node which fulfills a given predicate
            </summary>
            <returns>The next node.</returns>
            <param name="pred">The predicate.</param>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Javascript.Ast.JsNode.GetPrevNode(System.Func{DotVVM.Framework.Compilation.Javascript.Ast.JsNode,System.Boolean})">
            <summary>
            Gets the previous node which fulfills a given predicate
            </summary>
            <returns>The next node.</returns>
            <param name="pred">The predicate.</param>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Javascript.Ast.JsNode.GetNextSibling(System.Func{DotVVM.Framework.Compilation.Javascript.Ast.JsNode,System.Boolean})">
            <summary>
            Gets the next sibling which fulfills a given predicate
            </summary>
            <returns>The next node.</returns>
            <param name="pred">The predicate.</param>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Javascript.Ast.JsNode.GetPrevSibling(System.Func{DotVVM.Framework.Compilation.Javascript.Ast.JsNode,System.Boolean})">
            <summary>
            Gets the next sibling which fulfills a given predicate
            </summary>
            <returns>The next node.</returns>
            <param name="pred">The predicate.</param>
        </member>
        <member name="T:DotVVM.Framework.Compilation.Javascript.Ast.JsNodeCollection`1">
            <summary>
            Represents the children of an JsNode that have a specific role.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Javascript.Ast.JsNodeCollection`1.FirstOrDefault(System.Func{`0,System.Boolean})">
            <summary>
            Returns the first element for which the predicate returns true,
            or the null node (JsNode with IsNull=true) if no such object is found.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Javascript.Ast.JsNodeCollection`1.LastOrDefault(System.Func{`0,System.Boolean})">
            <summary>
            Returns the last element for which the predicate returns true,
            or the null node (JsNode with IsNull=true) if no such object is found.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Javascript.Ast.JsNodeCollection`1.AcceptVisitor(DotVVM.Framework.Compilation.Javascript.Ast.IJsNodeVisitor)">
            <summary>
            Applies the <paramref name="visitor"/> to all nodes in this collection.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Compilation.Javascript.LazyTranslatedExpression">
            Represents an Linq.Expression that is being translated to JsAst.
        </member>
        <member name="M:DotVVM.Framework.Compilation.Javascript.JavascriptTranslator.FormatKnockoutScript(DotVVM.Framework.Compilation.Javascript.Ast.JsExpression,System.Boolean,System.Int32)">
            <summary>
            Get's Javascript code that can be executed inside knockout data-bind attribute.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Javascript.JavascriptTranslator.FormatKnockoutScript(DotVVM.Framework.Compilation.Javascript.ParametrizedCode,System.Boolean,System.Int32)">
            <summary>
            Get's Javascript code that can be executed inside knockout data-bind attribute.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Javascript.JavascriptTranslator.FormatKnockoutScript(DotVVM.Framework.Compilation.Javascript.ParametrizedCode,DotVVM.Framework.Compilation.Javascript.ParametrizedCode,DotVVM.Framework.Compilation.Javascript.ParametrizedCode)">
            <summary>
            Get's Javascript code that can be executed inside knockout data-bind attribute.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Compilation.Javascript.VMPropertyInfoAnnotation">
            <summary> Marks that the expression is essentially a member access on the target. We use this to keep track which objects have observables and which don't. </summary>
        </member>
        <member name="F:DotVVM.Framework.Compilation.Javascript.OperatorPrecedence.Atomic">
            <summary> atomic expression, like `x`, `(x + y)`, `0`, `{"f": 123}`, `x[1]`, ... </summary>
        </member>
        <member name="F:DotVVM.Framework.Compilation.Javascript.OperatorPrecedence.UnaryPostfix">
            <summary> postfix unary expressions `x++`, `x--` </summary>
        </member>
        <member name="F:DotVVM.Framework.Compilation.Javascript.OperatorPrecedence.UnaryPrefix">
            <summary> prefix unary expressions `typeof x`, `!x`, `+x`, `-x`, `++x`, ... </summary>
        </member>
        <member name="F:DotVVM.Framework.Compilation.Javascript.OperatorPrecedence.Multiplication">
            <summary> Multiplication, division or modulo binary expression </summary>
        </member>
        <member name="F:DotVVM.Framework.Compilation.Javascript.OperatorPrecedence.Addition">
            <summary> Plus or minus binary expression </summary>
        </member>
        <member name="F:DotVVM.Framework.Compilation.Javascript.OperatorPrecedence.BinaryShifts">
            <summary> int32 binary shift expressions `x >> 10`, `x &lt;&lt; 10`, `x >>> 10` </summary>
        </member>
        <member name="F:DotVVM.Framework.Compilation.Javascript.OperatorPrecedence.Comparison">
            <summary> Comparison expressions `x > 10`, `x &lt; 10`, `x >= 10`, `x in y`, `x instanceof Y` </summary>
        </member>
        <member name="F:DotVVM.Framework.Compilation.Javascript.OperatorPrecedence.Equal">
            <summary> expressions `x == 10`, `x != 10`, `x === 10`, `x !== y` </summary>
        </member>
        <member name="F:DotVVM.Framework.Compilation.Javascript.OperatorPrecedence.BitwiseAnd">
            <summary> `x &amp; 0xff` </summary>
        </member>
        <member name="F:DotVVM.Framework.Compilation.Javascript.OperatorPrecedence.BitwiseXor">
            <summary> `x ^ 0xff` </summary>
        </member>
        <member name="F:DotVVM.Framework.Compilation.Javascript.OperatorPrecedence.BitwiseOr">
            <summary> `x | 0xff` </summary>
        </member>
        <member name="F:DotVVM.Framework.Compilation.Javascript.OperatorPrecedence.ConditionalAnd">
            <summary> `x == 1 &amp;&amp; y == 1` </summary>
        </member>
        <member name="F:DotVVM.Framework.Compilation.Javascript.OperatorPrecedence.ConditionalOr">
            <summary> `x == 1 || y == 1` </summary>
        </member>
        <member name="F:DotVVM.Framework.Compilation.Javascript.OperatorPrecedence.NullishCoalescing">
            <summary> `x ?? y` </summary>
        </member>
        <member name="F:DotVVM.Framework.Compilation.Javascript.OperatorPrecedence.Conditional">
            <summary> `x == 1 ? y : z` </summary>
        </member>
        <member name="F:DotVVM.Framework.Compilation.Javascript.OperatorPrecedence.Assignment">
            <summary> `x = 123` </summary>
        </member>
        <member name="F:DotVVM.Framework.Compilation.Javascript.OperatorPrecedence.ArrowFunction">
            <summary> `x => x + 1` </summary>
        </member>
        <member name="F:DotVVM.Framework.Compilation.Javascript.OperatorPrecedence.Sequence">
            <summary> `x, y` </summary>
        </member>
        <member name="T:DotVVM.Framework.Compilation.Javascript.JsParensFixingVisitor">
            <summary> Wraps nodes with <see cref="T:DotVVM.Framework.Compilation.Javascript.Ast.JsParenthesizedExpression" /> when needed to preserve semantics when the AST is stringified. </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Javascript.JsParensFixingVisitor.GetParentLevel(DotVVM.Framework.Compilation.Javascript.Ast.JsExpression)">
            <summary> Returns the "inner operator precedence" of the parent node, as seen from the specified child node.
            For example: binary expression have the same inner and outer precedence, <see cref="T:DotVVM.Framework.Compilation.Javascript.Ast.JsParenthesizedExpression" /> will return Atomic (20) from the outside, but 0 from the inside. Similarly, <see cref="T:DotVVM.Framework.Compilation.Javascript.Ast.JsInvocationExpression" /> is Atomic from the outside, but 1 (Sequence needs parens) from the argument position and 20 (needs to be Atomic) from the invocation target position. </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Javascript.JsParensFixingVisitor.OperatorLevel(DotVVM.Framework.Compilation.Javascript.Ast.JsExpression)">
            <summary> Returns the "outer operator precedence" of the <paramref name="expression" />.
            For example, Sequence expression will return 1; <see cref="T:DotVVM.Framework.Compilation.Javascript.Ast.JsInvocationExpression" />, <see cref="T:DotVVM.Framework.Compilation.Javascript.Ast.JsParenthesizedExpression" />, ... will return Atomic (20). </summary> 
        </member>
        <member name="M:DotVVM.Framework.Compilation.Javascript.JsParensFixingVisitor.IsPreferredSide(DotVVM.Framework.Compilation.Javascript.Ast.JsExpression)">
            <summary> Returns true if the expression is in the more associative position of the parent node. For example `a + b` will return true for `a` and return false for `b`. For non-associative nodes (invocations, ...), always returns true.  </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Javascript.JsParensFixingVisitor.GetOperatorPrecedence(DotVVM.Framework.Compilation.Javascript.Ast.JsExpression)">
            <summary> Returns the "outer operator precedence" of the specified JS expression. </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Javascript.JsParensFixingVisitor.NeedsParens(DotVVM.Framework.Compilation.Javascript.Ast.JsExpression)">
            <summary>
            Determines if the expression will have to be parenthesized when called from parent expression
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Compilation.Javascript.JsPrettificationVisitor">
            <summary> Simple iterative "optimizer". Goal is to remove hard to read elements, notably sequence operators and redundant code. </summary>
        </member>
        <member name="T:DotVVM.Framework.Compilation.Javascript.ObservableTransformationAnnotation">
            Instruct the <see cref="T:DotVVM.Framework.Compilation.Javascript.KnockoutObservableHandlingVisitor" /> to process the node after it's children are resolved and before it is handled itself by the rules
        </member>
        <member name="F:DotVVM.Framework.Compilation.Javascript.ObservableTransformationAnnotation.EnsureWrapped">
            Makes sure that the observable is fully wrapped in observable (i.e. wraps the expression in `ko.pureComputed(...)` when needed)
        </member>
        <member name="M:DotVVM.Framework.Compilation.Javascript.KnockoutObservableHandlingVisitor.AddAnnotations(DotVVM.Framework.Compilation.Javascript.Ast.JsExpression,DotVVM.Framework.Compilation.Javascript.Ast.JsExpression)">
            Adds annotations about the value of the expression (if it may be null, type of the expression, ...)
        </member>
        <member name="T:DotVVM.Framework.Compilation.Javascript.ParametrizedCode">
            <summary>
            Represents a piece of Javascript code that may contain unresolved symbolic parameters.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Javascript.ParametrizedCode.ToString(System.Func{DotVVM.Framework.Compilation.Javascript.CodeSymbolicParameter,DotVVM.Framework.Compilation.Javascript.CodeParameterAssignment})">
            <summary>
            Converts this to string and assigns all parameters using `parameterAssignment`. If there is any missing, exception is thrown.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Javascript.ParametrizedCode.AssignParameters(System.Func{DotVVM.Framework.Compilation.Javascript.CodeSymbolicParameter,DotVVM.Framework.Compilation.Javascript.CodeParameterAssignment})">
            <summary>
            Assigns parameters and return new ParametrizedCode. If parameter is not assigned, it is copied to the resulting parameter. Assigner can also replace parameter by script that contains another parameters.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Javascript.ParametrizedCode.CopyTo(DotVVM.Framework.Compilation.Javascript.ParametrizedCode.Builder)">
            <summary>
            Writes this code including parameters to the ParametrizedCode.Builder
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Compilation.Javascript.ParametrizedCode.Builder">
            <summary>
            Builder class with reasonably fast Add operation. Use Build method to convert it to immutable ParametrizedCode
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Compilation.Javascript.CodeParameterInfo">
            <summary>
            Represents an symbolic parameter in the ParametrizedCode.
            </summary>
        </member>
        <member name="F:DotVVM.Framework.Compilation.Javascript.CodeParameterInfo.DefaultAssignment">
            Optional default value
        </member>
        <member name="F:DotVVM.Framework.Compilation.Javascript.CodeParameterInfo.OperatorPrecedence">
            <summary>
            Operator precedence of the top expression to make sure that the parameter is correctly parenthesized.
            </summary>
        </member>
        <member name="F:DotVVM.Framework.Compilation.Javascript.CodeParameterInfo.IsSafeMemberAccess">
            <summary>
            If the parameter would be available as global, can it be omitted?
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Compilation.Javascript.CodeSymbolicParameter">
            (Base) class for symbolic parameter descriptors.
            This is mainly a marker class, the parameters are compared by reference equality, but this contains some optional features (default and description).
        </member>
        <member name="T:DotVVM.Framework.Compilation.Javascript.PromiseAwaitingVisitor">
            <summary> Add await operator around every expression that returns a promise, if the function is async </summary>
        </member>
        <member name="F:DotVVM.Framework.Compilation.Javascript.PromiseAwaitingVisitor.isRootAsync">
            <summary> Says if the root expression allows await operators </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Javascript.PromiseAwaitingVisitor.AddAnnotations(DotVVM.Framework.Compilation.Javascript.Ast.JsExpression,DotVVM.Framework.Compilation.Javascript.Ast.JsExpression)">
            Adds annotations about the value of the expression (if it may be null, type of the expression, ...)
        </member>
        <member name="F:DotVVM.Framework.Compilation.Javascript.ResultIsPromiseAnnotation.IsOptionalAwait">
            <summary> If awaiting this expression is optional, in value bindings (synchronous context) it will be ignored. This is a hack for REST api bindings </summary>
        </member>
        <member name="F:DotVVM.Framework.Compilation.Javascript.ResultIsPromiseAnnotation.IsPromiseGetterOptional">
            <summary> If calling promiseGetter is optional when using await. This is a small optimization for not doing `await Promise.resolve` </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Javascript.SideEffectAnalyzer.GetPossibleMutations(DotVVM.Framework.Compilation.Javascript.Ast.JsNode[])">
            Returns a <see cref="T:DotVVM.Framework.Compilation.Javascript.ExpressionMutationList" /> that contains all possible mutations done by the specified JsNodes
        </member>
        <member name="M:DotVVM.Framework.Compilation.Javascript.SideEffectAnalyzer.MayReorder(DotVVM.Framework.Compilation.Javascript.Ast.JsNode,System.Collections.Generic.IEnumerable{DotVVM.Framework.Compilation.Javascript.Ast.JsNode})">
            Checks if the specified <see cref="T:DotVVM.Framework.Compilation.Javascript.Ast.JsNode" /> has any dependencies on the specified mutated variables and if so if it can be reordered.
        </member>
        <member name="T:DotVVM.Framework.Compilation.LiteralOptimizationVisitor">
            <summary> Merges subsequent literals into one and sets HtmlGenericControl.InnerText property when appropriate </summary>
        </member>
        <member name="T:DotVVM.Framework.Compilation.Parser.BeginWithLastTokenOfTypeTokenError`2">
            <summary>
            Represents a range defined by the last token and type of the token where the error starts.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Parser.Binding.Parser.BindingParser.IsCurrentTokenIncorrect(DotVVM.Framework.Compilation.Parser.Binding.Tokenizer.BindingTokenType)">
            <summary>
            Asserts that the current token is of a specified type.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Compilation.Parser.Binding.Parser.BlockBindingParserNode.Variable">
            <summary> When not null, the result of the first expression is assigned to a variable with the specified name. </summary>
        </member>
        <member name="P:DotVVM.Framework.Compilation.Parser.Binding.Parser.IdentifierNameBindingParserNode.NameToken">
            <summary> The token from which the identifier was parsed. </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Parser.Binding.Tokenizer.BindingTokenizer.ReadStringLiteral(System.Func{System.Char},System.Func{System.Char},System.String@)">
            <summary>
            Reads the string literal.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Compilation.Parser.Dothtml.Parser.DothtmlParser">
            <summary>
            Parses the results of the DothtmlTokenizer into a tree structure.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Parser.Dothtml.Parser.DothtmlParser.Parse(System.Collections.Generic.List{DotVVM.Framework.Compilation.Parser.Dothtml.Tokenizer.DothtmlToken})">
            <summary>
            Parses the token stream and gets the node.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Parser.Dothtml.Parser.DothtmlParser.ReadElement">
            <summary>
            Reads the element.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Parser.Dothtml.Parser.DothtmlParser.ReadAttribute">
            <summary>
            Reads the attribute.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Parser.Dothtml.Parser.DothtmlParser.ReadBinding">
            <summary>
            Reads the binding.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Parser.Dothtml.Parser.DothtmlParser.ReadDirective">
            <summary>
            Reads the directive.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Parser.Dothtml.Parser.ParserBase`2.GetTokensFrom(System.Int32)">
            <summary>
            Gets the tokens from.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Parser.Dothtml.Parser.ParserBase`2.SkipWhiteSpace">
            <summary>
            Skips the whitespace.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Parser.Dothtml.Parser.ParserBase`2.Peek">
            <summary>
            Peeks the current token.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Parser.Dothtml.Parser.ParserBase`2.PeekOrFail">
            <summary>
            Peeks the current token, and throws an exception when token is not present.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Parser.Dothtml.Parser.ParserBase`2.Assert(`1)">
            <summary>
            Asserts that the current token is of a specified type.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Parser.Dothtml.Parser.ParserBase`2.Read">
            <summary>
            Reads the current token and advances to the next one.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Parser.Dothtml.Parser.ParserBase`2.ReadMultiple(System.Func{`0,System.Boolean})">
            <summary>
            Reads the current token and advances to the next one.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Compilation.Parser.Dothtml.Tokenizer.DothtmlTokenizer">
            <summary>
            Reads the Dothtml content and returns tokens.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Parser.Dothtml.Tokenizer.DothtmlTokenizer.ReadDocument">
            <summary>
            Tokenizes whole dothtml document from start to end.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Parser.Dothtml.Tokenizer.DothtmlTokenizer.ReadIdentifier(DotVVM.Framework.Compilation.Parser.Dothtml.Tokenizer.DothtmlTokenType,System.Char)">
            <summary>
            Reads the identifier.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Parser.Dothtml.Tokenizer.DothtmlTokenizer.ReadAttributeName(DotVVM.Framework.Compilation.Parser.Dothtml.Tokenizer.DothtmlTokenType,System.Char)">
            <summary>
            Reads the attribute name.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Parser.Dothtml.Tokenizer.DothtmlTokenizer.ReadElement(System.Boolean)">
            <summary>
            Reads the element.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Parser.Dothtml.Tokenizer.DothtmlTokenizer.ReadTagOrAttributeName(System.Boolean)">
            <summary>
            Reads the name of the tag or attribute.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Parser.Dothtml.Tokenizer.DothtmlTokenizer.ReadAttribute">
            <summary>
            Reads the attribute of a tag.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Parser.Dothtml.Tokenizer.DothtmlTokenizer.ReadQuotedAttributeValue">
            <summary>
            Reads the quoted attribute value.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Parser.Dothtml.Tokenizer.DothtmlTokenizer.ReadBinding(System.Boolean)">
            <summary>
            Reads the binding.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Compilation.Parser.TokenizerBase`2.TextTokenType">
            <summary>
            Gets the type of the text token.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Compilation.Parser.TokenizerBase`2.WhiteSpaceTokenType">
            <summary>
            Gets the type of the white space token.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Compilation.Parser.TokenizerBase`2.CurrentLine">
            <summary>
            Gets or sets the current line number.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Compilation.Parser.TokenizerBase`2.PositionOnLine">
            <summary>
            Gets or sets the position on current line.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Compilation.Parser.TokenizerBase`2.LastTokenPosition">
            <summary>
            Gets the last token position.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Compilation.Parser.TokenizerBase`2.LastToken">
            <summary>
            Gets the last token.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Compilation.Parser.TokenizerBase`2.DistanceSinceLastToken">
            <summary>
            Gets the distance since last token.
            </summary>
        </member>
        <member name="E:DotVVM.Framework.Compilation.Parser.TokenizerBase`2.TokenFound">
            <summary>
            Occurs when a token is found.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Compilation.Parser.TokenizerBase`2.Tokens">
            <summary>
            Gets the list of tokens.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Parser.TokenizerBase`2.#ctor(`1,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:DotVVM.Framework.Compilation.Parser.TokenizerBase`2"/> class.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Parser.TokenizerBase`2.Tokenize(System.String)">
            <summary>
            Performs default tokenizer action
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Parser.TokenizerBase`2.TokenizeInternal(System.String,System.Func{System.Boolean})">
            <summary>
            Tokenizes the input.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Parser.TokenizerBase`2.SkipWhitespace(System.Boolean)">
            <summary>
            Skips the whitespace.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Parser.TokenizerBase`2.ReadTextUntilNewLine(`1,System.Char[])">
            <summary>
            Skips the until new line or when it hits the specified stop chars.
            When the new line is hit, the method automatically consumes it and creates WhiteSpace token.
            When the stopchar is hit, it is not consumed.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Parser.TokenizerBase`2.CreateToken(`1,System.Int32,System.Func{`0,DotVVM.Framework.Compilation.Parser.TokenError})">
            <summary>
            Creates the token.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Parser.TokenizerBase`2.CreateToken(`1,System.String)">
            <summary> Slightly optimized version of CreateToken when exact string representation of the token is known at compile-time. </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Parser.TokenizerBase`2.OnTokenFound(`0)">
            <summary>
            Called when a token is found.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Parser.TokenizerBase`2.Peek">
            <summary>
            Peeks the current char.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Parser.TokenizerBase`2.Read">
            <summary>
            Returns the current char and advances to the next one.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Compilation.Styles.FunctionOrValue`2">
            <summary> A helper class for an optionally computed value that can still be used for debug strings. </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Styles.ResolvedControlHelper.FromRuntimeControl(DotVVM.Framework.Controls.DotvvmBindableObject,DotVVM.Framework.Compilation.ControlTree.DataContextStack,DotVVM.Framework.Configuration.DotvvmConfiguration)">
            <summary> Creates a ResolvedControl from a DotvvmBindableObject. Used in control precompilation and server-side styles. If <paramref name="config" /> isn't specified, it won't be able to translate <see cref="T:DotVVM.Framework.Controls.Infrastructure.MarkupControlContainer" />.  </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Styles.ResolvedControlHelper.ToRuntimeControl(DotVVM.Framework.Compilation.ControlTree.Resolved.ResolvedControl,System.IServiceProvider)">
            <summary> Creates a new instance of the dotvvm object represented by this ResolvedControl. This is a lightweight alternative to compiling the control using the <see cref="T:DotVVM.Framework.Compilation.ViewCompiler.ViewCompilingVisitor" />. Children are not initialized immediately, all child components are replaced by <see cref="T:DotVVM.Framework.Compilation.Styles.ResolvedControlHelper.LazyRuntimeControl" /> </summary>
        </member>
        <member name="T:DotVVM.Framework.Compilation.Styles.ResolvedControlHelper.LazyRuntimeControl">
            <summary> Lazily creates children from the ResolvedControl when OnInit or GetLogicalChildren is invoked. </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Styles.StyleMatcher.ClearCaches(System.Type[])">
            <summary> Clear cache when hot reload happens </summary>
        </member>
        <member name="F:DotVVM.Framework.Compilation.Styles.StyleOverrideOptions.Ignore">
            <summary> If the property is already set, nothing happens. </summary>
        </member>
        <member name="F:DotVVM.Framework.Compilation.Styles.StyleOverrideOptions.Overwrite">
            <summary> If the property is already set, it overrides the original value. </summary>
        </member>
        <member name="F:DotVVM.Framework.Compilation.Styles.StyleOverrideOptions.Append">
            <summary> If the property is already set, try to append them together. </summary>
        </member>
        <member name="F:DotVVM.Framework.Compilation.Styles.StyleOverrideOptions.Prepend">
            <summary> If the property is already set, try to append them together, but the original value should be the second one. </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Styles.StyleRepository.Register``1(System.Func{DotVVM.Framework.Compilation.Styles.StyleMatchContext{``0},System.Boolean},System.Boolean)">
            <summary>
            Registers a server-side style for <typeparamref name="T"/> that is applied upon compilation.
            </summary>
            <typeparam name="T">All objects of this type will have the style applied to them unless <paramref name="matcher"/> is specified.</typeparam>
            <param name="matcher">If this function returns true, the style will be applied, otherwise not.</param>
            <param name="allowDerived">Also allow classes that are derived from <typeparamref name="T"/>.</param>
            <returns>A <see cref="T:DotVVM.Framework.Compilation.Styles.StyleBuilder`1"/> that can be used to style the control.</returns>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Styles.StyleRepository.Register(System.Type,System.Func{DotVVM.Framework.Compilation.Styles.IStyleMatchContext,System.Boolean},System.Boolean)">
            <summary>
            Registers a server-side style for <paramref name="type"/> that is applied upon compilation.
            </summary>
            <param name="type">All objects of this type will have the style applied to them unless <paramref name="matcher"/> is specified.</param>
            <param name="matcher">If this function returns true, the style will be applied, otherwise not.</param>
            <param name="allowDerived">Also allow classes that are derived from <paramref name="type"/>.</param>
            <returns>A <see cref="T:DotVVM.Framework.Compilation.Styles.StyleBuilder`1"/> that can be used to style the control.</returns>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Styles.StyleRepository.Register(System.String,System.Func{DotVVM.Framework.Compilation.Styles.StyleMatchContext{DotVVM.Framework.Controls.HtmlGenericControl},System.Boolean})">
            <summary>
            Registers a server-side style for a HTML tag that is applied upon compilation.
            </summary>
            <param name="tagName">The HTML tag the style is applied to.</param>
            <param name="matcher">If this function returns true, the style will be applied, otherwise not.</param>
            <returns>A <see cref="T:DotVVM.Framework.Compilation.Styles.StyleBuilder`1"/> that can be used to style the control.</returns>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Styles.StyleRepository.RegisterRoot">
            <summary>
            Registers a server-side style for a root component.
            </summary>
            <returns>A <see cref="T:DotVVM.Framework.Compilation.Styles.StyleBuilder`1"/> that can be used to style the control.</returns>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Styles.StyleRepository.RegisterAnyControl(System.Func{DotVVM.Framework.Compilation.Styles.StyleMatchContext{DotVVM.Framework.Controls.DotvvmControl},System.Boolean})">
            <summary>
            Registers a server-side style for any component of type DotvvmControl (which is almost everything with exception of special objects like GridViewColumn)
            </summary>
            <returns>A <see cref="T:DotVVM.Framework.Compilation.Styles.StyleBuilder`1"/> that can be used to style the control.</returns>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Styles.StyleRepository.RegisterAnyObject(System.Func{DotVVM.Framework.Compilation.Styles.StyleMatchContext{DotVVM.Framework.Controls.DotvvmBindableObject},System.Boolean})">
            <summary>
            Registers a server-side style for any component (including special objects like GridViewColumn)
            </summary>
            <returns>A <see cref="T:DotVVM.Framework.Compilation.Styles.StyleBuilder`1"/> that can be used to style the control.</returns>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Styles.StyleRepository.RegisterForTag(System.String,System.Func{DotVVM.Framework.Compilation.Styles.StyleMatchContext{DotVVM.Framework.Controls.DotvvmBindableObject},System.Boolean})">
            <summary>
            Registers a server-side style for any component that have specified Styles.Tag (including special objects like GridViewColumn)
            </summary>
            <returns>A <see cref="T:DotVVM.Framework.Compilation.Styles.StyleBuilder`1"/> that can be used to style the control.</returns>
        </member>
        <member name="M:DotVVM.Framework.Compilation.Validation.DefaultControlUsageValidator.ClearCaches(System.Type[])">
            <summary> Clear cache when hot reload happens </summary>
        </member>
        <member name="F:DotVVM.Framework.Compilation.ViewCompilationMode.Lazy">
            <summary>
            Compilation will be done when do markup is first needed.
            </summary>
        </member>
        <member name="F:DotVVM.Framework.Compilation.ViewCompilationMode.DuringApplicationStart">
            <summary>
            Compilation will run during application startup.
            Application will start after compilation is done.
            </summary>
        </member>
        <member name="F:DotVVM.Framework.Compilation.ViewCompilationMode.AfterApplicationStart">
            <summary>
            Compilation will run after application started.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Compilation.ViewCompiler.ControlBuilderDescriptor.DataContextType">
            <summary>
            Gets required data context for the control
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Compilation.ViewCompiler.ControlBuilderDescriptor.ControlType">
            <summary>
            Gets type of result control
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Compilation.ViewCompiler.ControlBuilderDescriptor.FileName">
            <summary> File where was this page or control located </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ViewCompiler.DefaultViewCompiler.CompileViewCore(System.String,System.String)">
            <summary>
            Compiles the view and returns a function that can be invoked repeatedly. The function builds full control tree and activates the page.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ViewCompiler.DefaultViewCompilerCodeEmitter.EmitCreateObject(System.Type,System.Object[])">
            <summary>
            Emits the create object expression.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ViewCompiler.DefaultViewCompilerCodeEmitter.EmitCreateObject(System.Reflection.ConstructorInfo,System.Object[])">
            <summary>
            Emits the create object expression.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ViewCompiler.DefaultViewCompilerCodeEmitter.RegisterDotvvmProperties(System.String)">
            Instructs the emitter that this object can receive DotvvmProperties
            Note that the properties have to be committed using <see cref="M:DotVVM.Framework.Compilation.ViewCompiler.DefaultViewCompilerCodeEmitter.CommitDotvvmProperties(System.String)" />
        </member>
        <member name="M:DotVVM.Framework.Compilation.ViewCompiler.DefaultViewCompilerCodeEmitter.EmitAddCollectionItem(System.String,System.String)">
            <summary>
            Emits the code that adds the specified value as a child item in the collection.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ViewCompiler.DefaultViewCompilerCodeEmitter.EmitAddChildControl(System.String,System.String)">
            <summary>
            Emits the code that adds the specified value as a child of the control
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ViewCompiler.DefaultViewCompilerCodeEmitter.EmitAddToDictionary(System.String,System.String,System.String,System.Linq.Expressions.Expression)">
            <summary>
            Emits the add HTML attribute.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ViewCompiler.DefaultViewCompilerCodeEmitter.EmitAddDirective(System.String,System.String,System.String)">
            <summary>
            Emits the add directive.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ViewCompiler.DefaultViewCompilerCodeEmitter.EmitReturnClause(System.String)">
            <summary>
            Emits the return clause.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ViewCompiler.DefaultViewCompilerCodeEmitter.PushNewMethod(System.Linq.Expressions.ParameterExpression[])">
            <summary>
            Pushes the new method.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ViewCompiler.DefaultViewCompilerCodeEmitter.PopMethod``1">
            <summary>
            Pops the method.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Compilation.ViewCompiler.IViewCompiler">
            <summary>
            Gets the Dothtml view and compiles it into a function.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ViewCompiler.IViewCompiler.CompileView(System.String,System.String)">
            <summary>
            Compiles the view and returns a function that can be invoked repeatedly. The function builds full control tree and activates the page.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ViewCompiler.ViewCompilingVisitor.VisitControl(DotVVM.Framework.Compilation.ControlTree.Resolved.ResolvedControl)">
            <summary>
            Processes the node.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ViewCompiler.ViewCompilingVisitor.CreateControl(DotVVM.Framework.Compilation.ControlTree.Resolved.ResolvedControl)">
            <summary>
            Processes the HTML element that represents a new object.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Compilation.ViewCompiler.ViewCompilingVisitor.ProcessBinding(DotVVM.Framework.Compilation.ControlTree.Resolved.ResolvedBinding)">
            <summary>
            Emits binding constructor and returns variable name
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Configuration.ConfigurationHelper.AutoDiscoverControls(DotVVM.Framework.Configuration.DotvvmMarkupConfiguration,DotVVM.Framework.Configuration.IControlRegistrationStrategy)">
            <summary>
            Registers all controls discovered by specified <see cref="T:DotVVM.Framework.Configuration.IControlRegistrationStrategy"/> in the <see cref="T:DotVVM.Framework.Configuration.DotvvmMarkupConfiguration"/>.
            </summary>
            <param name="strategy">A strategy that provides list of control configurations.</param>
            <param name="configuration">The DotVVM Framework configuration to use.</param>
        </member>
        <member name="P:DotVVM.Framework.Configuration.DotvvmCompilationPageConfiguration.IsEnabled">
            <summary>
            Gets or sets whether the compilation status page is enabled.
            </summary>
            <remarks>
            When null, the compilation page is automatically enabled if <see cref="P:DotVVM.Framework.Configuration.DotvvmConfiguration.Debug"/>
            is true.
            </remarks>
        </member>
        <member name="P:DotVVM.Framework.Configuration.DotvvmCompilationPageConfiguration.IsApiEnabled">
            <summary>
            Gets or sets whether the compilation status page API is enabled.
            </summary>
            <remarks>
            If set to true, an additional route named {RouteName}Api will be registered at
            {Url}/api. If a GET request is sent to this route, an HTTP 200 status code is returned
            if all pages and controls can be compiled successfully, otherwise an HTTP 500 status code
            is sent back.
            </remarks>
        </member>
        <member name="P:DotVVM.Framework.Configuration.DotvvmCompilationPageConfiguration.Url">
            <summary>
            Gets or sets the URL where the compilation page will be accessible from.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Configuration.DotvvmCompilationPageConfiguration.RouteName">
            <summary>
            Gets or sets the name of the route that the compilation page will be registered as.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Configuration.DotvvmCompilationPageConfiguration.ShouldCompileAllOnLoad">
            <summary>
            Gets or sets whether the compilation page should attempt to compile all registered
            pages and markup controls when it is loaded.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Configuration.DotvvmCompilationPageConfiguration.AuthorizationPredicate">
            <summary>
            Gets or sets a predicate used to check that a request to the compilation page
            or the API (enabled by <see cref="P:DotVVM.Framework.Configuration.DotvvmCompilationPageConfiguration.IsApiEnabled"/>) is authorized.
            </summary>
            <remarks>
            By default, only local requests are authorized.
            </remarks>
        </member>
        <member name="P:DotVVM.Framework.Configuration.DotvvmConfiguration.ApplicationPhysicalPath">
            <summary>
            Gets or sets the application physical path.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Configuration.DotvvmConfiguration.Markup">
            <summary>
            Gets the settings of the markup.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Configuration.DotvvmConfiguration.RouteTable">
            <summary>
            Gets the route table.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Configuration.DotvvmConfiguration.Resources">
            <summary>
            Gets the configuration of resources.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Configuration.DotvvmConfiguration.Security">
            <summary>
            Gets the security configuration.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Configuration.DotvvmConfiguration.Runtime">
            <summary>
            Gets the runtime configuration.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Configuration.DotvvmConfiguration.DefaultCulture">
            <summary>
            Gets or sets the default culture.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Configuration.DotvvmConfiguration.ClientSideValidation">
            <summary>
            Gets or sets whether the client side validation rules should be enabled.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Configuration.DotvvmConfiguration.UseHistoryApiSpaNavigation">
            <summary>
            Gets or sets whether navigation in the SPA pages should use History API. Always true
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Configuration.DotvvmConfiguration.ExperimentalFeatures">
            <summary>
            Gets or sets the configuration for experimental features.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Configuration.DotvvmConfiguration.Debug">
            <summary>
            Gets or sets whether the application should run in debug mode.
            For ASP.NET Core check out <see href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/environments" />
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Configuration.DotvvmConfiguration.Diagnostics">
            <summary>
            Gets or sets the configuration for diagnostic features useful during the development of an application.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Configuration.DotvvmConfiguration.Freeze">
            <summary>
            Prevent from changes.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Configuration.DotvvmConfiguration.AllowBindingDebugging">
            <summary>
            Whether DotVVM compiler should generate runtime debug info for bindings. It can be useful, but may also cause unexpected problems.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Configuration.DotvvmConfiguration.ServiceLocator">
            <summary>
            Gets an instance of the service locator component.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Configuration.DotvvmConfiguration.#ctor">
            <summary> must be there for serialization </summary>
        </member>
        <member name="M:DotVVM.Framework.Configuration.DotvvmConfiguration.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DotVVM.Framework.Configuration.DotvvmConfiguration"/> class.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Configuration.DotvvmConfiguration.CreateDefault(System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection},System.Func{Microsoft.Extensions.DependencyInjection.IServiceCollection,System.IServiceProvider})">
            <summary>
            Creates the default configuration and optionally registers additional application services.
            </summary>
            <param name="registerServices">An action to register additional services.</param>
            <param name="serviceProviderFactoryMethod">Register factory method to create your own instance of IServiceProvider.</param>
        </member>
        <member name="M:DotVVM.Framework.Configuration.DotvvmConfiguration.CreateDefault(System.IServiceProvider)">
            <summary>
            Creates the default configuration using the given service provider.
            </summary>
            <param name="serviceProvider">The service provider to resolve services from.</param>
        </member>
        <member name="M:DotVVM.Framework.Configuration.DotvvmConfiguration.CreateInternal(System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})">
            <summary>
            Creates a configuration with fake services in place of hosting-specific components.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Configuration.DotvvmControlConfiguration.IsMatch(System.String,System.String)">
            <summary>
            Determines whether the specified tag prefix and tag name match this rule.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Configuration.DotvvmControlConfiguration.Validate">
            <summary>
            Validates the rule.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Configuration.DotvvmDiagnosticsConfiguration.CompilationPage">
            <summary>
            Gets or sets the options of the compilation status page.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Configuration.DotvvmDiagnosticsConfiguration.PerfWarnings">
            <summary>
            Gets or sets the options for runtime warning about slow requests, too big viewmodels, ...
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Configuration.DotvvmFeatureFlag">
            <summary> Enables certain DotVVM feature for the entire application or only for certain routes. </summary>
        </member>
        <member name="P:DotVVM.Framework.Configuration.DotvvmMarkupConfiguration.Controls">
            <summary>
            Gets the registered control namespaces.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Configuration.DotvvmMarkupConfiguration.Assemblies">
            <summary>
            Gets or sets the list of referenced assemblies.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Configuration.DotvvmMarkupConfiguration.HtmlAttributeTransforms">
            <summary>
            Gets a list of HTML attribute transforms.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Configuration.DotvvmMarkupConfiguration.DefaultDirectives">
            <summary>
            Gets a list of HTML attribute transforms.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Configuration.DotvvmMarkupConfiguration.ImportedNamespaces">
            <summary>
            Gets or sets list of namespaces imported in bindings
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Configuration.DotvvmMarkupConfiguration.#ctor(System.Lazy{DotVVM.Framework.Compilation.Javascript.JavascriptTranslatorConfiguration})">
            <summary>
            Initializes a new instance of the <see cref="T:DotVVM.Framework.Configuration.DotvvmMarkupConfiguration"/> class.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Configuration.DotvvmMarkupConfiguration.AddAssembly(System.String)">
            <summary>
            Adds the assembly to the list of required assemblies.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Configuration.DotvvmMarkupConfiguration.AddMarkupControl(System.String,System.String,System.String)">
            <summary>
            Registers markup control
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Configuration.DotvvmMarkupConfiguration.AddCodeControls(System.String,System.String,System.String)">
            <summary>
            Registers code controls in the specified namespace from the specified assembly
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Configuration.DotvvmMarkupConfiguration.AddCodeControls(System.String,System.Type)">
            <summary>
            Registers code controls from the same namespace and assembly as exampleControl
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Configuration.DotvvmPerfWarningsConfiguration.IsEnabled">
            <summary> Gets or sets whether the warnings about potentially bad performance are enabled. By default, it enabled in both Debug and Production environments.
            Before turning it off, we suggest tweaking the warning thresholds if you find the default values to be too noisy. </summary>
        </member>
        <member name="P:DotVVM.Framework.Configuration.DotvvmPerfWarningsConfiguration.SlowRequestSeconds">
            <summary> Gets or sets the threshold for the warning about too slow requests. In seconds, by default it's 3 seconds. </summary>
        </member>
        <member name="P:DotVVM.Framework.Configuration.DotvvmPerfWarningsConfiguration.BigViewModelBytes">
            <summary> Gets or sets the threshold for the warning about too big viewmodels. In bytes, by default it's 5 megabytes. </summary>
        </member>
        <member name="P:DotVVM.Framework.Configuration.DotvvmRuntimeConfiguration.GlobalFilters">
            <summary>
            Gets filters that are applied for all requests.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Configuration.DotvvmRuntimeConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotVVM.Framework.Configuration.DotvvmRuntimeConfiguration"/> class.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Configuration.DotvvmSecurityConfiguration">
            <summary>
            Contains the encryption keys for ViewModel protection.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Configuration.DotvvmSecurityConfiguration.SessionIdCookieName">
            <summary>
            Gets or sets name of HTTP cookie used for Session ID
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Configuration.DotvvmSecurityConfiguration.FrameOptionsSameOrigin">
            <summary>
            When enabled, uses `X-Frame-Options: SAMEORIGIN` instead of DENY
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Configuration.DotvvmSecurityConfiguration.FrameOptionsCrossOrigin">
            <summary>
            When enabled, does not add `X-Frame-Options: DENY` header. Enabling will force DotVVM to use SameSite=None on the session cookie
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Configuration.DotvvmSecurityConfiguration.XssProtectionHeader">
            <summary>
            When enabled, adds the `X-XSS-Protection: 1; mode=block` header, which enables some basic XSS filtering in browsers. This is enabled by default.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Configuration.DotvvmSecurityConfiguration.ContentTypeOptionsHeader">
            <summary>
            When enabled, adds the `X-Content-Type-Options: nosniff` header, which prevents browsers from incorrectly detecting non-scripts as scripts. This is enabled by default.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Configuration.DotvvmSecurityConfiguration.VerifySecFetchForPages">
            <summary>
            Verifies Sec-Fetch headers on the GET request coming to dothtml pages. The request must have `Sec-Fetch-Dest: document` or `Sec-Fetch-Site: same-origin` if the request is for SPA. If the FrameOptionsSameOrigin is enabled, DotVVM will also allow `Sec-Fetch-Dest: document` and if FrameOptionsSameOrigin is enabled, DotVVM will also allow iframe from an cross-site request. This protects agains cross-site page scraping. Also prevents potential XSS bug to scrape the non-SPA pages.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Configuration.DotvvmSecurityConfiguration.VerifySecFetchForCommands">
            <summary>
            Verifies Sec-Fetch headers on the POST request executing staticCommands and commands. The request must have `Sec-Fetch-Site: same-origin`. This protects again cross-site malicious requests even if SameSite cookies and CSRF tokens would fail. It also prevents websites on a subdomain to perform postbacks.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Configuration.DotvvmSecurityConfiguration.RequireSecFetchHeaders">
            <summary>
            Requires that requests to dotvvm pages always have the Sec-Fetch-* headers. This may offer a slight protection against server-side request forgery attacks and against attacks exploiting obsolete web browsers (MS IE and Apple IE)
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Configuration.DotvvmSecurityConfiguration.ReferrerPolicy">
            <summary>
            Include the Referrer-Policy header which disables referrers in the default configuration. Enabled by default.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Configuration.DotvvmSecurityConfiguration.ReferrerPolicyValue">
            <summary> Value of the referrer-policy header. By default it's no-referrer, if you want referrers on your domain set this to `same-origin`. See for more info: <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy" /> </summary>
        </member>
        <member name="T:DotVVM.Framework.Configuration.IDotvvmServiceConfigurator">
            <summary>
            Represents configuration point for all DotVVM services. This interface is intended for marking services to be run by compiler. 
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Configuration.IDotvvmServiceConfigurator.ConfigureServices(Microsoft.Extensions.DependencyInjection.IDotvvmServiceCollection)">
            <summary>
            Configures all services related with DotVVM to ServiceCollection.
            Warning: Configure only DotVVM services. This method is used by DotVVM.Compiler which runs this method during compilation time.
            </summary>
            <remarks>The name "options" was chosen because of easier migration.</remarks>
        </member>
        <member name="M:DotVVM.Framework.Configuration.ServiceLocator.BuildServiceProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Workaround for breaking change introduced in https://github.com/aspnet/DependencyInjection/pull/616
            In Microsoft.Extensions.DependencyInjection 2.0 signature of <see cref="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection)"/> has been changed slightly causing <see cref="T:System.MissingMethodException"/>.
            Lets bind it dynamically.
            Source: https://github.com/peachpiecompiler/peachpie/blob/eb9213f174fa909459ad0137ff996876eac2ac4c
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Configuration.UserColumnMappingCache.ClearCaches(System.Type[])">
            <summary> Clear cache when hot reload happens </summary>
        </member>
        <member name="P:DotVVM.Framework.Configuration.ViewCompilationConfiguration.Mode">
            <summary>
            Gets or sets the mode under which the view compilation (pages, controls, ... ) is done. By default, view are precompiled asynchronously after the application starts.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Configuration.ViewCompilationConfiguration.BackgroundCompilationDelay">
            <summary>
            Gets or sets the delay before view compilation will be done. This compilation delay can be set only in precompilation modes.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Configuration.ViewCompilationConfiguration.CompileInParallel">
            <summary>
            Gets or sets whether the view compilation will be performed in parallel or in series.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Configuration.ViewCompilationConfiguration.PrecompileEvenInDebug">
            <summary>
            By default, view precompilation is disabled in Debug mode, to make startup time faster. This options controls this behavior.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.AuthenticatedView">
            <summary>
            Renders different content to the users that are authenticated and users that are not.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.AuthenticatedView.AuthenticatedTemplate">
            <summary>
            Gets or sets the content displayed to the authenticated users.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.AuthenticatedView.NotAuthenticatedTemplate">
            <summary>
            Gets or sets the content displayed to the users that are not authenticated.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.Button">
            <summary>
            Renders the HTML button which is able to trigger a postback.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.Button.IsSubmitButton">
            <summary>
            Gets or sets whether the control should render a submit button or a normal button (type="submit" or type="button").
            The submit button has some special features in the browsers, e.g. handles the Return key in HTML forms etc.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.Button.ButtonTagName">
            <summary>
            Gets or sets whether the control should render the &lt;input&gt; or the &lt;button&gt; tag in the HTML.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.Button.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotVVM.Framework.Controls.Button"/> class.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.Button.AddAttributesToRender(DotVVM.Framework.Controls.IHtmlWriter,DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Adds all attributes that should be added to the control begin tag.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.ButtonBase">
            <summary>
            A common base for button controls.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.ButtonBase.Text">
            <summary>
            Gets or sets the text on the button.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.ButtonBase.Click">
            <summary>
            Gets or sets the command that will be triggered when the button is clicked.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.ButtonBase.Enabled">
            <summary>
            Gets or sets a value indicating whether the button is enabled and can be clicked on.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.ButtonBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotVVM.Framework.Controls.ButtonBase"/> class.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.ButtonBase.AddAttributesToRender(DotVVM.Framework.Controls.IHtmlWriter,DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Adds all attributes that should be added to the control begin tag.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.ButtonBase.ValidateCommand(DotVVM.Framework.Binding.DotvvmProperty)">
            <summary>
            Determines whether it is legal to invoke a command on the specified property.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.CheckableControlBase">
            <summary>
            A base control for checkbox and radiobutton controls.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.CheckableControlBase.Text">
            <summary>
            Gets or sets the label text that is rendered next to the control.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.CheckableControlBase.CheckedValue">
            <summary>
            Gets or sets the value that will be used as a result when the control is checked.
            Use this property in combination with the CheckedItem or CheckedItems property.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.CheckableControlBase.Changed">
            <summary>
            Gets or sets the command that will be triggered when the control check state is changed.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.CheckableControlBase.Enabled">
            <summary>
            Gets or sets a value indicating whether the control is enabled and can be clicked on.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.CheckableControlBase.LabelCssClass">
            <summary>
            Gets or sets a CSS class that will be appended on the rendered label element.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.CheckableControlBase.InputCssClass">
            <summary>
            Gets or sets a CSS class that will be appended on the rendered input element.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.CheckableControlBase.ItemKeyBinding">
            <summary>
            Gets or sets a property that retrieves an unique key for the CheckedValue so it can be compared with objects in the CheckedItems collection. This property must be set if the value of the CheckedValue property is not a primitive type.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.CheckableControlBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotVVM.Framework.Controls.CheckableControlBase"/> class.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.CheckableControlBase.RenderInputTag(DotVVM.Framework.Controls.IHtmlWriter)">
            <summary>
            Renders the input tag.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.CheckBox">
            <summary>
            Renders the HTML checkbox control.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.CheckBox.Checked">
            <summary>
            Gets or sets whether the control is checked.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.CheckBox.CheckedItems">
            <summary>
            Gets or sets a collection of values of all checked checkboxes. Use this property in combination with the CheckedValue property.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.CheckBox.RenderInputTag(DotVVM.Framework.Controls.IHtmlWriter)">
            <summary>
            Renders the input tag.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.ClaimView">
            <summary>
            Renders different content to the users who have a specified claim and to users who haven't.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.ClaimView.Claim">
            <summary>
            Gets or sets the type of claim the user must have.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.ClaimView.Values">
            <summary>
            Gets or sets a comma-separated list of accepted values. If specified; the user must have the <see cref="P:DotVVM.Framework.Controls.ClaimView.Claim" />
            with one or more of the values. Otherwise; all values are accepted.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.ClaimView.HasClaimTemplate">
            <summary>
            Gets or sets the content displayed to the users who have the <see cref="P:DotVVM.Framework.Controls.ClaimView.Claim" /> with one or more of accepted values.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.ClaimView.HasNotClaimTemplate">
            <summary>
            Gets or sets the content displayed to the users who don't have the <see cref="P:DotVVM.Framework.Controls.ClaimView.Claim" /> with any of accepted values.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.ClaimView.HideForAnonymousUsers">
            <summary>
            Gets or sets whether the control will be hidden completely to anonymous users. If set to <c>false</c>,
            the <see cref="P:DotVVM.Framework.Controls.ClaimView.HasNotClaimTemplate" /> will be rendered to anonymous users.
            </summary>
        </member>
        <member name="F:DotVVM.Framework.Controls.ClientIDMode.AutoGenerated">
            <summary>
            The ID is generated automatically to be unique.
            </summary>
        </member>
        <member name="F:DotVVM.Framework.Controls.ClientIDMode.Static">
            <summary>
            The ID is used without any changes.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.CloneTemplate">
            <summary> DotVVM ITemplate implementation which clones the specified <see cref="P:DotVVM.Framework.Controls.CloneTemplate.Controls" /> into each template instance. </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.ComboBox">
            <summary>
            Renders the HTML drop-down list.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.ComboBox.EmptyItemText">
            <summary>
            Text displayed when no value is selected.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.CompositeControl">
            <summary>
            Base class for controls implemented using other components returned from the `GetContents` method
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.ConcurrencyQueueSetting.EventName">
            <summary>
            Gets or sets the name of the event which the rule applies to. 
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.ConcurrencyQueueSetting.ConcurrencyQueue">
            <summary>
            Gets or sets the name of the concurrency queue that will be used for the specified event.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.ConfigurableHtmlControl">
            <summary>
            A base class for HTML controls which allows the user to configure rendered tag name and if the wrapper tag by properties.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.ConfigurableHtmlControl.WrapperTagName">
            <summary>
            Gets or sets the name of the tag that wraps the Repeater.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.ConfigurableHtmlControl.RenderWrapperTag">
            <summary>
            Gets or sets whether the control should render a wrapper element.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.ConfirmPostBackHandler">
            <summary>
            Adds a standard javascript confirm before the postback.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.ConfirmPostBackHandler.Message">
            <summary>
            Gets or sets the message of the confirmation dialog.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.Content">
            <summary>
            Contains markup that will be placed inside the according ContentPlaceHolder in the master page.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.Content.ContentPlaceHolderID">
            <summary>
            Gets or sets the ID of the ContentPlaceHolder control in the master page in which the content will be placed.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.ContentPlaceHolder">
            <summary>
            Represents a placeholder in the master page that contains the Content from the content page.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.ControlMarkupOptionsAttribute">
            <summary> Controls various aspects of how this control behaves in dothtml markup files. </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.ControlMarkupOptionsAttribute.AllowContent">
            <summary> When false, adding children to this control in a markup file will be an error. </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.ControlMarkupOptionsAttribute.DefaultContentProperty">
            <summary> Name of the DotvvmProperty where all child nodes will be placed. When null <see cref="P:DotVVM.Framework.Controls.DotvvmControl.Children" /> collection is used. If the property is not a collection type, only one child control will be allowed. </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.ControlMarkupOptionsAttribute.Precompile">
            <summary> When set, the control will be evaluated only once during view compilation, instead of execting it for every request. It only work for <see cref="T:DotVVM.Framework.Controls.CompositeControl" />s. </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.ControlMarkupOptionsAttribute.PrimaryName">
            <summary>
            If set, the control will be referenced by this name in the markup and the primary name will appear in the Visual Studio IntelliSense.
            If not set, the control class name will be used as a primary name.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.ControlMarkupOptionsAttribute.AlternativeNames">
            <summary>
            Represents a set of alternative names that are possible to use in the markup.
            </summary>
        </member>
        <member name="F:DotVVM.Framework.Controls.ControlPrecompilationMode.Never">
            <summary> Never attempt precompilation. </summary>
        </member>
        <member name="F:DotVVM.Framework.Controls.ControlPrecompilationMode.IfPossibleAndIgnoreExceptions">
            <summary> Attempt precompilation whenever it's possible (the control is CompositeControl and there are no resource bindings in properties which can't handle bindings). If exception is thrown by the control, it is ignored and precompilation is skipped. </summary>
        </member>
        <member name="F:DotVVM.Framework.Controls.ControlPrecompilationMode.IfPossible">
            <summary> Attempt precompilation whenever it's possible (the control is CompositeControl and there are no resource bindings in properties which can't handle bindings). If exception is thrown by the control, compilation fails. </summary>
        </member>
        <member name="F:DotVVM.Framework.Controls.ControlPrecompilationMode.Always">
            <summary> Always try to precompile the control and fail compilation when it's not possible. </summary>
        </member>
        <member name="F:DotVVM.Framework.Controls.ControlPrecompilationMode.InServerSideStyles">
            <summary> Always precompile this controls and do that while styles are being processed. This will allow other styles to match onto the generated controls. </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.DataItemContainer">
            <summary>
            Used in <see cref="T:DotVVM.Framework.Controls.ItemsControl" /> to wrap each data item and generate its unique ID.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DataItemContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotVVM.Framework.Controls.DataItemContainer"/> class.
            </summary>
        </member>
        <member name="F:DotVVM.Framework.Controls.DataItemContainer.index">
            <summary>
            Gets or sets the index of the data item in the data source control.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.DataPager">
            <summary>
            Renders the pagination control which can be integrated with the GridViewDataSet object to provide the paging capabilities.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.DataPager.DataSet">
            <summary>
            Gets or sets the GridViewDataSet object in the viewmodel.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.DataPager.FirstPageTemplate">
            <summary>
            Gets or sets the template of the button which moves the user to the first page.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.DataPager.LastPageTemplate">
            <summary>
            Gets or sets the template of the button which moves the user to the last page.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.DataPager.PreviousPageTemplate">
            <summary>
            Gets or sets the template of the button which moves the user to the previous page.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.DataPager.NextPageTemplate">
            <summary>
            Gets or sets the template of the button which moves the user to the next page.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.DataPager.RenderLinkForCurrentPage">
            <summary>
            Gets or sets whether a hyperlink should be rendered for the current page number. If set to false, only a plain text is rendered.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.DataPager.HideWhenOnlyOnePage">
            <summary>
            Gets or sets whether the pager should hide automatically when there is only one page of results. Must not be set to true when using the Visible property.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.Decorator">
            <summary>
            Base class for all controls that decorates another control (e.g. adds attributes).
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.DotvvmBindableObject.Properties">
            <summary>
            Gets the collection of control property values.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.DotvvmBindableObject.RenderOnServer">
            <summary>
            Gets or sets whether this control should be rendered on the server.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.DotvvmBindableObject.Parent">
            <summary>
            Gets the parent control.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObject.GetDeclaredProperties">
            <summary>
            Gets all properties declared on this class or on any of its base classes.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObject.IsPropertySet(DotVVM.Framework.Binding.DotvvmProperty,System.Boolean)">
            <summary>
            Determines whether the specified property is set.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.DotvvmBindableObject.DataContext">
            <summary>
            Gets or sets a data context for the control and its children. All value and command bindings are evaluated in context of this value.
            The DataContext is null in client-side templates.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObject.GetValue``1(DotVVM.Framework.Binding.DotvvmProperty,System.Boolean)">
            <summary> Returns the value of the specified property. If the property contains a binding, it is evaluted. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObject.EvalPropertyValue(DotVVM.Framework.Binding.DotvvmProperty,System.Object)">
            <summary> If the object is IBinding and the property is not of type IBinding, it is evaluated. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObject.GetValue(DotVVM.Framework.Binding.DotvvmProperty,System.Boolean)">
            <summary>
            Gets the value of a specified property. If the property contains a binding, it is evaluted.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObject.GetValueRaw(DotVVM.Framework.Binding.DotvvmProperty,System.Boolean)">
            <summary>
            Gets the value or a binding object for a specified property.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObject.MagicSetValue(DotVVM.Framework.Binding.DotvvmProperty[],System.Object[],System.Int32)">
            <summary> For internal use, public because it's used from our generated code. If want to use it, create the arguments using <see cref="M:DotVVM.Framework.Controls.PropertyImmutableHashtable.CreateTableWithValues``1(DotVVM.Framework.Binding.DotvvmProperty[],``0[])" /> </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObject.SetValue``1(DotVVM.Framework.Binding.DotvvmProperty,DotVVM.Framework.Binding.ValueOrBinding{``0})">
            <summary> Sets the value of a specified property. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObject.GetValueOrBinding``1(DotVVM.Framework.Binding.DotvvmProperty,System.Boolean)">
            <summary> Gets the value of a specified property. Bindings are always returned, not evaluated. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObject.SetValue(DotVVM.Framework.Binding.DotvvmProperty,System.Object)">
            <summary>
            Sets the value of a specified property.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObject.SetValue``1(DotVVM.Framework.Binding.DotvvmProperty,``0)">
            <summary>
            Sets the value of a specified property.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObject.SetValueToSource(DotVVM.Framework.Binding.DotvvmProperty,System.Object)">
            <summary> Sets the value of specified property by updating the view model this property is bound to. Throws if the property does not contain binding </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObject.SetValueRaw(DotVVM.Framework.Binding.DotvvmProperty,System.Object)">
            <summary>
            Sets the value or a binding to the specified property.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObject.GetBinding(DotVVM.Framework.Binding.DotvvmProperty,System.Boolean)">
            <summary>
            Gets the binding set to a specified property. Returns null if the property is not set or if the value is not a binding.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObject.GetValueBinding(DotVVM.Framework.Binding.DotvvmProperty,System.Boolean)">
            <summary>
            Gets the value binding set to a specified property. Returns null if the property is not a binding, throws if the binding some kind of command.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObject.GetJavascriptValue(DotVVM.Framework.Binding.DotvvmProperty,System.Boolean)">
            <summary> Returns a Javascript (knockout) expression representing value or binding of this property. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObject.GetCommandBinding(DotVVM.Framework.Binding.DotvvmProperty,System.Boolean)">
            <summary>
            Gets the command binding set to a specified property. Returns null if the property is not a binding, throws if the binding is not command, controlCommand or staticCommand.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObject.SetBinding(DotVVM.Framework.Binding.DotvvmProperty,DotVVM.Framework.Binding.Expressions.IBinding)">
            <summary>
            Sets the binding to a specified property.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObject.GetDataContextHierarchy">
            <summary>
            Gets the hierarchy of all DataContext bindings from the root to current control.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObject.GetClosestControlBindingTarget">
            <summary>
            Gets the closest control binding target. Returns null if the control is not found.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObject.GetClosestControlBindingTarget(System.Int32@)">
            <summary>
            Gets the closest control binding target and returns number of DataContext changes since the target. Returns null if the control is not found.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObject.GetClosestControlValidationTarget(System.Int32@)">
            <summary>
            Gets the closest control binding target and returns number of DataContext changes since the target. Returns null if the control is not found.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObject.GetClosestWithPropertyValue(System.Int32@,System.Func{DotVVM.Framework.Controls.DotvvmBindableObject,DotVVM.Framework.Binding.DotvvmProperty,System.Boolean},System.Boolean,DotVVM.Framework.Binding.DotvvmProperty)">
            <summary>
            Gets the closest control with specified property value and returns number of DataContext changes since the target. Returns null if the control is not found.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObject.HasBinding(DotVVM.Framework.Binding.DotvvmProperty)">
            <summary> if this property contains any kind of binding. Note that the property value is not inherited. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObject.HasValueBinding(DotVVM.Framework.Binding.DotvvmProperty)">
            <summary> if this property contains value binding. Note that the property value is not inherited. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObject.HasBinding``1(DotVVM.Framework.Binding.DotvvmProperty)">
            <summary> if this property contains binding of the specified type. Note that the property value is not inherited. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObject.GetAllBindings">
            <summary>
            Gets all bindings set on the control (excluding BindingProperties).
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObject.GetAllAncestors(System.Boolean,System.Boolean)">
            <summary>
            Gets all ancestors of this control starting with the parent.
            </summary>
            <param name="includingThis">Returns also the caller control</param>
            <param name="onlyWhenInChildren">Only enumerate until the parent has this control in <see cref="P:DotVVM.Framework.Controls.DotvvmControl.Children" />. Note that it may have a non-trivial performance penalty</param>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObject.GetRoot">
            <summary>
            Gets the root of the control tree. The the control is properly rooted, the result value will be of type <see cref="T:DotVVM.Framework.Controls.Infrastructure.DotvvmView" />
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObject.CloneControl">
            <summary> Does a deep clone of the control. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObject.GetLogicalChildren">
            <summary>
            Gets the logical children of this control (including controls that are not in the visual tree but which can contain command bindings).
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObject.CopyProperty(DotVVM.Framework.Binding.DotvvmProperty,DotVVM.Framework.Controls.DotvvmBindableObject,DotVVM.Framework.Binding.DotvvmProperty,System.Boolean)">
            <summary>
            Copies the value of a property from this <see cref="T:DotVVM.Framework.Controls.DotvvmBindableObject"/> (source) to a property of another <see cref="T:DotVVM.Framework.Controls.DotvvmBindableObject"/> (target).
            </summary>
            <exception cref="T:DotVVM.Framework.Controls.DotvvmControlException">Gets thrown if copying fails and <paramref name="throwOnFailure"/> is set to true</exception>
            <param name="sourceProperty">The <see cref="T:DotVVM.Framework.Binding.DotvvmProperty"/> whose value will be copied</param>
            <param name="target">The <see cref="T:DotVVM.Framework.Controls.DotvvmBindableObject"/> that holds the value of the <paramref name="targetProperty"/></param>
            <param name="targetProperty">The <see cref="T:DotVVM.Framework.Binding.DotvvmProperty"/> to which <paramref name="sourceProperty"/> will be copied</param>
            <param name="throwOnFailure">Determines whether to throw an exception if copying fails</param>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObjectHelper.GetDotvvmProperty``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary> Gets the DotvvmProperty referenced by the lambda expression. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObjectHelper.GetDotvvmProperty``1(``0,System.String)">
            <summary> Gets the DotvvmProperty with the specified name.  </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObjectHelper.SetProperty``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},DotVVM.Framework.Binding.Expressions.IBinding)">
            <summary> Sets binding into the DotvvmProperty referenced in the lambda expression. Returns <paramref name="control"/> for fluent API usage. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObjectHelper.SetProperty``1(``0,DotVVM.Framework.Binding.DotvvmProperty,DotVVM.Framework.Binding.Expressions.IBinding)">
            <summary> Sets binding into the DotvvmProperty. Returns <paramref name="control"/> for fluent API usage. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObjectHelper.SetProperty``1(``0,System.String,System.Object)">
            <summary> Sets a value or a binding into the DotvvmProperty with specified name. Returns <paramref name="control"/> for fluent API usage. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObjectHelper.SetProperty``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},DotVVM.Framework.Binding.ValueOrBinding{``1})">
            <summary> Sets value or binding into the DotvvmProperty referenced in the lambda expression. Returns <paramref name="control"/> for fluent API usage. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObjectHelper.SetProperty``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Nullable{DotVVM.Framework.Binding.ValueOrBinding{``1}})">
            <summary> Sets value or binding into the DotvvmProperty referenced in the lambda expression. Returns <paramref name="control"/> for fluent API usage. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObjectHelper.SetProperty``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1)">
            <summary> Sets value or binding into the DotvvmProperty referenced in the lambda expression. Returns <paramref name="control"/> for fluent API usage. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObjectHelper.SetProperty``2(``0,System.String,DotVVM.Framework.Binding.ValueOrBinding{``1})">
            <summary> Sets value or binding into the DotvvmProperty with specified name. Returns <paramref name="control"/> for fluent API usage. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObjectHelper.SetProperty``2(``0,DotVVM.Framework.Binding.DotvvmProperty,DotVVM.Framework.Binding.ValueOrBinding{``1})">
            <summary> Sets value or binding into the DotvvmProperty. Returns <paramref name="control"/> for fluent API usage. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObjectHelper.SetProperty``2(``0,DotVVM.Framework.Binding.DotvvmProperty,System.Nullable{DotVVM.Framework.Binding.ValueOrBinding{``1}})">
            <summary> Sets value or binding into the DotvvmProperty. If the <paramref name="valueOrBinding"/> is null, the property is removed. Returns <paramref name="control"/> for fluent API usage. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObjectHelper.SetProperty``1(``0,DotVVM.Framework.Binding.DotvvmProperty,System.Object)">
            <summary> Sets value or binding into the DotvvmProperty. Returns <paramref name="control"/> for fluent API usage. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObjectHelper.SetProperty``2(``0,System.Func{``0,DotVVM.Framework.Binding.VirtualPropertyGroupDictionary{``1}},System.String,DotVVM.Framework.Binding.Expressions.IBinding)">
            <summary> Sets a binding into member of the specified property group. Returns <paramref name="control"/> for fluent API usage. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObjectHelper.SetProperty``2(``0,System.Func{``0,DotVVM.Framework.Binding.VirtualPropertyGroupDictionary{``1}},System.String,``1)">
            <summary> Sets a value into member of the specified property group. Returns <paramref name="control"/> for fluent API usage. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObjectHelper.SetProperty``2(``0,System.Func{``0,DotVVM.Framework.Binding.VirtualPropertyGroupDictionary{``1}},System.String,DotVVM.Framework.Binding.ValueOrBinding{``1})">
            <summary> Sets a value or a binding into member of the specified property group. Returns <paramref name="control"/> for fluent API usage. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObjectHelper.SetAttribute``1(``0,System.String,System.Object)">
            <summary> Sets a value (or a binding) into the specified html attribute. If the value is null, the attribute is removed. Returns <paramref name="control"/> for fluent API usage. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObjectHelper.SetAttribute``2(``0,System.String,DotVVM.Framework.Binding.ValueOrBinding{``1})">
            <summary> Sets a value or a binding into the specified html attribute. If the value is null, the attribute is removed. Returns <paramref name="control"/> for fluent API usage. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObjectHelper.SetAttribute``2(``0,System.String,System.Nullable{DotVVM.Framework.Binding.ValueOrBinding{``1}})">
            <summary> Sets a value or a binding into the specified html attribute. If the value is null, the attribute is removed. Returns <paramref name="control"/> for fluent API usage. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObjectHelper.AddAttribute``1(``0,System.String,System.Object)">
            <summary> Appends a value into the specified html attribute. If the attribute already exists, the old and new values are merged. Returns <paramref name="control"/> for fluent API usage. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObjectHelper.AddAttribute``2(``0,System.String,System.Nullable{DotVVM.Framework.Binding.ValueOrBinding{``1}})">
            <summary> Appends a value into the specified html attribute. If the attribute already exists, the old and new values are merged. Returns <paramref name="control"/> for fluent API usage. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObjectHelper.AddAttribute``2(``0,System.String,DotVVM.Framework.Binding.ValueOrBinding{``1})">
            <summary> Appends a value into the specified html attribute. If the attribute already exists, the old and new values are merged. Returns <paramref name="control"/> for fluent API usage. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObjectHelper.AddAttributes``2(``0,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,``1}})">
            <summary> Appends a list of css attributes to the control. If the attributes already exist, the old and new values are merged. Returns <paramref name="control"/> for fluent API usage. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObjectHelper.AddAttributes``2(``0,DotVVM.Framework.Binding.VirtualPropertyGroupDictionary{``1})">
            <summary> Appends a list of css attributes to the control. If the attributes already exist, the old and new values are merged. Returns <paramref name="control"/> for fluent API usage. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObjectHelper.AddCssClass``1(``0,DotVVM.Framework.Binding.ValueOrBinding{System.String})">
            <summary> Appends a css class to this control. Note that it is currently not supported if multiple bindings would have to be joined together. Returns <paramref name="control"/> for fluent API usage. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObjectHelper.AddCssClass``1(``0,System.String)">
            <summary> Appends a css class to this control. Note that it is currently not supported if multiple bindings would have to be joined together. Returns <paramref name="control"/> for fluent API usage. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObjectHelper.AddCssClasses``1(``0,System.String[])">
            <summary> Appends a list of css classes to this control. Returns <paramref name="control"/> for fluent API usage. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObjectHelper.AddCssStyle``1(``0,System.String,System.String)">
            <summary> Adds a css inline style - the `style` attribute. Returns <paramref name="control"/> for fluent API usage. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObjectHelper.SetCapability``2(``0,``1,System.String)">
            <summary> Sets all properties from the capability into this control. If the control does not support the capability, exception is thrown. Returns <paramref name="control"/> for fluent API usage. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObjectHelper.AppendChildren``1(``0,DotVVM.Framework.Controls.DotvvmControl[])">
            <summary> Adds all <paramref name="children"/> into control.Children (nulls are skipped). Returns <paramref name="control"/> for fluent API usage. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObjectHelper.AppendChildren``1(``0,System.Collections.Generic.IEnumerable{DotVVM.Framework.Controls.DotvvmControl})">
            <summary> Adds all <paramref name="children"/> into control.Children (nulls are skipped). Returns <paramref name="control"/> for fluent API usage. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObjectHelper.GetValueBinding``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the value binding set to the DotvvmProperty referenced in the lambda expression. Returns null if the property is not a binding, throws if the binding some kind of command.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObjectHelper.GetCommandBinding``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the command binding set to the DotvvmProperty referenced in the lambda expression. Returns null if the property is not a binding, throws if the binding is not command, controlCommand or staticCommand.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObjectHelper.GetValue``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary> Returns the value of the DotvvmProperty referenced in the lambda expression. If the property contains a binding, it is evaluted. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObjectHelper.GetValueOrBinding``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary> Gets the value of the DotvvmProperty referenced in the lambda expression. Bindings are always returned, not evaluated. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObjectHelper.GetValue``1(DotVVM.Framework.Controls.DotvvmBindableObject,System.String)">
            <summary> Returns the value of dotvvm with the specified name. If the property contains a binding, it is evaluted. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObjectHelper.GetValueOrBinding``1(DotVVM.Framework.Controls.DotvvmBindableObject,System.String)">
            <summary> Returns the value of dotvvm with the specified name. If the property contains a binding, it is evaluted. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObjectHelper.GetValueBinding``1(DotVVM.Framework.Controls.DotvvmBindableObject,System.String)">
            <summary>
            Gets the value binding set to dotvvm property of the specified <paramref name="propName" />. Returns null if the property is not a binding, throws if the binding some kind of command.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObjectHelper.GetCommandBinding``1(DotVVM.Framework.Controls.DotvvmBindableObject,System.String)">
            <summary>
            Gets the command binding set to the dotvvm property of the specified <paramref name="propName" />. Returns null if the property is not a binding, throws if the binding is not command, controlCommand or staticCommand.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObjectHelper.GetCapability``1(DotVVM.Framework.Controls.DotvvmBindableObject)">
            <summary> Gets the specified control capability - reads all the properties in the capability at once. Throws if this control does not support the capability. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObjectHelper.GetCapability``1(DotVVM.Framework.Controls.DotvvmBindableObject,System.String)">
            <summary> Gets the specified control capability - reads all the properties in the capability at once. Throws if this control does not support the capability. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmBindableObjectHelper.DebugString(DotVVM.Framework.Controls.DotvvmBindableObject,DotVVM.Framework.Configuration.DotvvmConfiguration,System.Boolean,System.Boolean)">
            <summary> Returns somewhat readable string representing this dotvvm control. </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.DotvvmControl">
            <summary>
            Represents a base class for all DotVVM controls.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.DotvvmControl.Children">
            <summary>
            Gets the child controls.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.DotvvmControl.ID">
            <summary>
            Gets or sets the control client ID within its naming container.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.DotvvmControl.ClientID">
            <summary>
            Gets the calculated client ID of the control that will be rendered in the 'id' attribute. Returns null if the ID property is not set.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.DotvvmControl.ClientIDMode">
            <summary>
            Gets or sets the client ID generation algorithm.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.DotvvmControl.IncludeInPage">
            <summary>
            Gets or sets whether the control is included in the DOM of the page.
            </summary>
            <remarks>
            Essentially wraps Knockout's 'if' binding.
            </remarks>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotVVM.Framework.Controls.DotvvmControl"/> class.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControl.GetThisAndAllDescendants(System.Func{DotVVM.Framework.Controls.DotvvmControl,System.Boolean})">
            <summary>
            Gets this control and all of its descendants.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControl.GetAllDescendants(System.Func{DotVVM.Framework.Controls.DotvvmControl,System.Boolean})">
            <summary>
            Gets all descendant controls of this control.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControl.HasOnlyWhiteSpaceContent">
            <summary>
            Determines whether the control has only white space content.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControl.Render(DotVVM.Framework.Controls.IHtmlWriter,DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Renders the control into the specified writer.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControl.AddDotvvmUniqueIdAttribute">
            <summary>
            Adds 'data-dotvvm-id' attribute with generated unique id to the control. You can find control by this id using FindControlByUniqueId method.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControl.RenderBeforeControl(DotVVM.Framework.Controls.DotvvmControl.RenderState@,DotVVM.Framework.Controls.IHtmlWriter,DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <returns>true means that rendering of the rest of this control should be skipped</returns>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControl.RenderControl(DotVVM.Framework.Controls.IHtmlWriter,DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Renders the control into the specified writer.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControl.AddAttributesToRender(DotVVM.Framework.Controls.IHtmlWriter,DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Adds all attributes that should be added to the control begin tag.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControl.RenderBeginTag(DotVVM.Framework.Controls.IHtmlWriter,DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Renders the control begin tag.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControl.RenderContents(DotVVM.Framework.Controls.IHtmlWriter,DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Renders the contents inside the control begin and end tags.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControl.RenderEndTag(DotVVM.Framework.Controls.IHtmlWriter,DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Renders the control end tag.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControl.RenderChildren(DotVVM.Framework.Controls.IHtmlWriter,DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Renders the children.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControl.FindControlInContainer(System.String,System.Boolean)">
            <summary>
            Finds a control by its ID coded in markup. Does not recurse into naming containers. Returns null if the <paramref name="throwIfNotFound" /> is false and the control is not found.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControl.FindControlInContainer``1(System.String,System.Boolean)">
            <summary>
            Finds a control by its ID coded in markup. Does not recurse into naming containers.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControl.FindControlByClientId(System.String,System.Boolean)">
            <summary>
            Finds a control by its ClientId - the id rendered to output html.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControl.FindControlByClientId``1(System.String,System.Boolean)">
            <summary>
            Finds a control by its ClientId - the id rendered to output html.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControl.FindControlByUniqueId(System.String)">
            <summary>
            Finds a control by its unique ID. Returns null if the control is not found.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControl.GetNamingContainer">
            <summary>
            Gets the naming container of the current control.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControl.IsNamingContainer(DotVVM.Framework.Controls.DotvvmBindableObject)">
            <summary>
            Determines whether the specified control is a naming container.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControl.OnPreInit(DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Occurs after the viewmodel tree is complete.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControl.OnPreRenderComplete(DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Called right before the rendering shall occur.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControl.OnInit(DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Occurs before the viewmodel is applied to the page.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControl.OnLoad(DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Occurs after the viewmodel is applied to the page IHtmlWriter writer and before the commands are executed.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControl.OnPreRender(DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Occurs after the page commands are executed.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControl.GetDotvvmUniqueId(DotVVM.Framework.Binding.ValueOrBinding{System.String},DotVVM.Framework.Binding.ValueOrBinding{System.String})">
            <summary>
            Gets the internal unique ID of the control. Returns either string or IValueBinding.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControl.CreateClientId(DotVVM.Framework.Binding.ValueOrBinding{System.String},DotVVM.Framework.Binding.ValueOrBinding{System.String})">
            <summary>
            Calculates the corresponding attribute for the Id property.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControl.TryGetTextContent(System.String@)">
            <summary>
            Verifies that the control contains only a plain text content and tries to extract it.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.DotvvmControlCollection">
            <summary>
            Contains child controls of a <see cref="T:DotVVM.Framework.Controls.DotvvmControl"/>.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControlCollection.#ctor(DotVVM.Framework.Controls.DotvvmControl)">
            <summary>
            Initializes a new instance of the <see cref="T:DotVVM.Framework.Controls.DotvvmControlCollection"/> class.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControlCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControlCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControlCollection.Add(DotVVM.Framework.Controls.DotvvmControl)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControlCollection.AddUnchecked(DotVVM.Framework.Controls.DotvvmControl)">
            <summary>
            Adds an item to the child collection, but does not create unique ids, does not invoke missing events, ... Intended for internal use only.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControlCollection.Add(System.Collections.Generic.IEnumerable{DotVVM.Framework.Controls.DotvvmControl})">
            <summary>
            Adds items to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="items">An enumeration of objects to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControlCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControlCollection.Contains(DotVVM.Framework.Controls.DotvvmControl)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControlCollection.CopyTo(DotVVM.Framework.Controls.DotvvmControl[],System.Int32)">
            <summary>
            Copies the controls to the specified array.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControlCollection.Remove(DotVVM.Framework.Controls.DotvvmControl)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="P:DotVVM.Framework.Controls.DotvvmControlCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.DotvvmControlCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControlCollection.IndexOf(DotVVM.Framework.Controls.DotvvmControl)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
            <returns>
            The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControlCollection.Insert(System.Int32,DotVVM.Framework.Controls.DotvvmControl)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControlCollection.Insert(System.Int32,System.Collections.Generic.IEnumerable{DotVVM.Framework.Controls.DotvvmControl})">
            <summary>
            Inserts items to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="items" /> should be inserted.</param>
            <param name="items">An enumeration of objects to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControlCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="P:DotVVM.Framework.Controls.DotvvmControlCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControlCollection.SetParent(DotVVM.Framework.Controls.DotvvmControl)">
            <summary>
            Sets the parent to the specified control.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControlCollection.InvokeMissedPageLifeCycleEvents(DotVVM.Framework.Controls.LifeCycleEventType,System.Boolean)">
            <summary>
            Invokes missed page life cycle events on the control.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControlCollection.InvokePageLifeCycleEventRecursive(DotVVM.Framework.Controls.DotvvmControl,DotVVM.Framework.Controls.LifeCycleEventType)">
            <summary>
            Invokes the specified method on all controls in the page control tree.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControlCollection.HasOnlyWhiteSpaceContent">
            <summary>
            Determines whether the control has only white space content.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmControlProperties.TryAdd(DotVVM.Framework.Binding.DotvvmProperty,System.Object)">
            <summary> Tries to set value into the dictionary without overwriting anything. </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.DotvvmMarkupControl">
            <summary>
            A base class for all controls with Dothtml markup.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmMarkupControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotVVM.Framework.Controls.DotvvmMarkupControl"/> class.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.DotvvmMarkupControl.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotVVM.Framework.Controls.DotvvmMarkupControl"/> class.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.EmptyData">
            <summary>
            Content of this control is displayed if and only if DataSource is empty or null
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.EmptyData.WrapperTagName">
            <summary>
            Gets or sets the name of the tag that wraps the Repeater.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.EmptyData.RenderWrapperTag">
            <summary>
            Gets or sets whether the control should render a wrapper element.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.EnvironmentView">
            <summary>
            Renders different content when the application is running in a specified environment and when it's not.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.EnvironmentView.Environments">
            <summary>
            Gets or sets a comma-separated list of hosting environments (e.g. Development, Production).
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.EnvironmentView.IsEnvironmentTemplate">
            <summary>
            Gets or sets the content rendered when the application is running in one of the specified environments.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.EnvironmentView.IsNotEnvironmentTemplate">
            <summary>
            Gets or sets the content rendered when the application is not running in any of the specified environments.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.FileUpload">
            <summary>
            Renders a FileUpload control allowing users to upload one or multiple files asynchronously.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.FileUpload.UploadedFiles">
            <summary>
            Gets or sets a collection of uploaded files.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.FileUpload.AllowMultipleFiles">
            <summary>
            Gets or sets whether the user can select multiple files at once. It is enabled by default.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.FileUpload.AllowedFileTypes">
            <summary>
            Gets or sets the types of files that the server accepts. It must be a comma-separated list of unique content type
            specifiers (e.g. ".jpg,image/png,audio/*"). All file types are allowed by default.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.FileUpload.MaxFileSize">
            <summary>
            Gets or sets the maximum size of files in megabytes (MB). The size is not limited by default.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.FileUpload.UploadButtonText">
            <summary>
            Gets or sets the text on the upload button. The default value is "Upload".
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.FileUpload.NumberOfFilesIndicatorText">
            <summary>
            Gets or sets the text on the indicator showing number of files. The default value is "{0} files". The number of files
            will be substituted for the "{0}" placeholder.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.FileUpload.UploadErrorMessageText">
            <summary>
            Gets or sets the text that appears when there is an error during the upload.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.FileUpload.SuccessMessageText">
            <summary>
            Gets or sets the text that appears when all files are uploaded successfully.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.FileUpload.UploadCompleted">
            <summary>
            Gets or sets a command that is triggered when the upload is complete.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.GridView">
            <summary>
            A multi-purpose grid control with advanced binding, templating options and sorting support.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.GridView.FilterPlacement">
            <summary>
            Gets or sets the place where the filters will be created.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.GridView.EmptyDataTemplate">
            <summary>
            Gets or sets the template which will be displayed when the DataSource is empty.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.GridView.Columns">
            <summary>
            Gets or sets a collection of columns that will be placed inside the grid.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.GridView.RowDecorators">
            <summary>
            Gets or sets a list of decorators that will be applied on each row which is not in the edit mode.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.GridView.HeaderRowDecorators">
            <summary>
            Gets or sets a list of decorators that will be applied on the header row.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.GridView.EditRowDecorators">
            <summary>
            Gets or sets a list of decorators that will be applied on each row in edit mode.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.GridView.SortChanged">
            <summary>
            Gets or sets the command that will be triggered when the user changed the sort order.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.GridView.ShowHeaderWhenNoData">
            <summary>
            Gets or sets whether the header row should be displayed when the grid is empty.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.GridView.InlineEditing">
            <summary>
            Gets or sets whether the inline editing is allowed in the Grid. If so, you have to use a GridViewDataSet as the DataSource.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.GridViewCheckBoxColumn">
            <summary>
            A GridView column which renders a bool value and can edit it in the CheckBox control.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.GridViewCheckBoxColumn.ValueBinding">
            <summary>
            Gets or sets a binding which retrieves the value to display from the current data item.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.GridViewColumn.CellDecorators">
            <summary>
            Gets or sets a list of decorators that will be applied on each cell which is not in the edit mode.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.GridViewColumn.EditCellDecorators">
            <summary>
            Gets or sets a list of decorators that will be applied on each cell which is in the edit mode.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.GridViewColumn.HeaderCellDecorators">
            <summary>
            Gets or sets a list of decorators that will be applied on each header cell.
            </summary>
        </member>
        <member name="F:DotVVM.Framework.Controls.GridViewFilterPlacement.HeaderRow">
            <summary>
            Places the filter inside the header cell.
            </summary>
        </member>
        <member name="F:DotVVM.Framework.Controls.GridViewFilterPlacement.ExtraRow">
            <summary>
            Places the filter in the extra row below the headers.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.GridViewTextColumn">
            <summary>
            A GridView column which renders a text value (with formatting support) and can edit it in the TextBox control.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.GridViewTextColumn.FormatString">
            <summary>
            Gets or sets the format string that will be applied to numeric or date-time values.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.GridViewTextColumn.ChangedBinding">
            <summary>
            Gets or sets the command that will be triggered when the control text is changed.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.GridViewTextColumn.ValueBinding">
            <summary>
            Gets or sets a binding which retrieves the value to display from the current data item.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.HierarchyRepeater">
            <summary>
            Repeats a template for each item in the hierarchical DataSource collection.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.HierarchyRepeater.ItemChildrenBinding">
            <summary>
            Gets or sets the binding which retrieves children of a data item.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.HierarchyRepeater.ItemTemplate">
            <summary>
            Gets or sets the template for each HierarchyRepeater item.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.HierarchyRepeater.EmptyDataTemplate">
            <summary>
            Gets or sets the template which will be displayed when the data source is empty.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.HierarchyRepeater.RenderWrapperTag">
            <summary>
            Gets or sets whether the control should render a wrapper element.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.HierarchyRepeater.WrapperTagName">
            <summary>
            Gets or sets the name of the tag that wraps the <see cref="T:DotVVM.Framework.Controls.HierarchyRepeater.HierarchyRepeaterLevel"/>.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.HierarchyRepeater.HierarchyRepeaterLevel">
            <summary>
            An internal control for a level of the <see cref="T:DotVVM.Framework.Controls.HierarchyRepeater"/> that renders
            the appropriate foreach binding.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.HierarchyRepeater.HierarchyRepeaterItem">
            <summary>
            An internal control for an item of the <see cref="T:DotVVM.Framework.Controls.HierarchyRepeater"/>. Always renders a simple wit
            binding.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.HtmlGenericControl">
            <summary>
            A control that represents plain HTML tag.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.HtmlGenericControl.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:DotVVM.Framework.Controls.HtmlGenericControl"/> class.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.HtmlGenericControl.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:DotVVM.Framework.Controls.HtmlGenericControl"/> class.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.HtmlGenericControl.#ctor(System.String,DotVVM.Framework.Controls.HtmlCapability,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:DotVVM.Framework.Controls.HtmlGenericControl"/> class.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.HtmlGenericControl.#ctor(System.String,DotVVM.Framework.Controls.TextOrContentCapability,DotVVM.Framework.Controls.HtmlCapability)">
            <summary>
            Initializes a new instance of the <see cref="T:DotVVM.Framework.Controls.HtmlGenericControl"/> class.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.HtmlGenericControl.Attributes">
            <summary>
            Gets the attributes.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.HtmlGenericControl.InnerText">
            <summary>
            Gets or sets the inner text of the HTML element.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.HtmlGenericControl.TagName">
            <summary>
            Gets the tag name.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.HtmlGenericControl.Visible">
            <summary>
            Gets or sets whether the control is visible.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.HtmlGenericControl.RendersHtmlTag">
            <summary>
            Gets a value whether this control renders a HTML tag.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.HtmlGenericControl.AddAttributesToRender(DotVVM.Framework.Controls.IHtmlWriter,DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Adds all attributes that should be added to the control begin tag.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.HtmlGenericControl.AddVisibleAttributeOrBinding(DotVVM.Framework.Controls.HtmlGenericControl.RenderState@,DotVVM.Framework.Controls.IHtmlWriter)">
            <summary>
            Adds the corresponding attribute or binding for the Visible property.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.HtmlGenericControl.EnsureNoAttributesSet(DotVVM.Framework.Controls.HtmlGenericControl.RenderState@)">
            <summary>
            Verifies that the control hasn't any HTML attributes, css classes or Visible or DataContext bindings set.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.HtmlGenericControl.RenderBeginTag(DotVVM.Framework.Controls.IHtmlWriter,DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Renders the control begin tag if <see cref="P:DotVVM.Framework.Controls.HtmlGenericControl.RendersHtmlTag" /> == true.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.HtmlGenericControl.RenderEndTag(DotVVM.Framework.Controls.IHtmlWriter,DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Renders the control end tag if <see cref="P:DotVVM.Framework.Controls.HtmlGenericControl.RendersHtmlTag" /> == true. Also renders required resource i before the end tag, if it is a `head` or `body` element
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.HtmlGenericControl.TryUseLiteralAsInnerText(DotVVM.Framework.Controls.HtmlGenericControl.RenderState@)">
            Tries to get Literal element from Children and set its value binding into r.InnerText
            This leads to less knockout comments being produced
        </member>
        <member name="M:DotVVM.Framework.Controls.HtmlGenericControl.CheckInnerTextUsage(DotVVM.Framework.Controls.HtmlGenericControl.RenderState@)">
            <summary>
            Checks the inner text property usage.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.HtmlGenericControl.AttributeList">
            <summary> Linked list of attribute values, used when at least one attribute value is a binding, so the values can't be concatenated. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.HtmlGenericControl.AttributeList.#ctor(System.Object,DotVVM.Framework.Controls.HtmlGenericControl.AttributeList)">
            <summary> Linked list of attribute values, used when at least one attribute value is a binding, so the values can't be concatenated. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.HtmlGenericControl.AttributeList.GetKnockoutBindingExpression(DotVVM.Framework.Controls.DotvvmBindableObject,System.String)">
            <summary> Returns concatenation expression from all the list values. If the list contains no bindings, returns null. </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.WrapperCapability.WrapperTagName">
            <summary>
            Gets or sets the name of the wrapper element.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.HtmlLiteral">
            <summary>
            Renders a text into the page.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.HtmlLiteral.Html">
            <summary>
            Gets or sets the HTML that will be rendered in the control.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.HtmlWriter">
            <summary>
            An utility class that is used to render HTML code.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.HtmlWriter.#ctor(System.IO.TextWriter,DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Initializes a new instance of the <see cref="T:DotVVM.Framework.Controls.HtmlWriter"/> class.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.HtmlWriter.AddAttribute(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Adds the specified attribute to the next HTML element that is being rendered. 
            </summary>
            <param name="name">The name of the HTML attribute.</param>
            <param name="value">The value of the HTML attribute.</param>
            <param name="append">
                If set to false, the value of the attribute will be overwritten. 
                If set to true, the value will be appended to the current attribute value and the <paramref name="appendSeparator"/> will be added when needed.
            </param>
            <param name="appendSeparator">The separator that will be used when <paramref name="append"/> is true and when the attribute already has a value.</param>
        </member>
        <member name="M:DotVVM.Framework.Controls.HtmlWriter.AddStyleAttribute(System.String,System.String)">
            <summary>
            Adds the style attribute.
            </summary>
            <param name="name">The name of the CSS property.</param>
            <param name="value">The value of the CSS property.</param>
        </member>
        <member name="M:DotVVM.Framework.Controls.HtmlWriter.AddKnockoutDataBind(System.String,System.String)">
            <summary>
            Adds the data-bind attribute to the next HTML element that is being rendered.
            </summary>
            <param name="name">The name of the binding handler.</param>
            <param name="expression">The binding expression.</param>
        </member>
        <member name="M:DotVVM.Framework.Controls.HtmlWriter.AddKnockoutDataBind(System.String,DotVVM.Framework.Controls.KnockoutBindingGroup)">
            <summary>
            Adds the data-bind attribute to the next HTML element that is being rendered.
            </summary>
            <param name="name">The name of the binding handler.</param>
            <param name="bindingGroup">A group of name-value pairs.</param>
        </member>
        <member name="M:DotVVM.Framework.Controls.HtmlWriter.RenderBeginTag(System.String)">
            <summary>
            Renders the begin tag with attributes that were added in <see cref="M:DotVVM.Framework.Controls.HtmlWriter.AddAttribute(System.String,System.String,System.Boolean,System.String)"/> method.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.HtmlWriter.RenderSelfClosingTag(System.String)">
            <summary>
            Renders the self closing tag with attributes that were added in <see cref="M:DotVVM.Framework.Controls.HtmlWriter.AddAttribute(System.String,System.String,System.Boolean,System.String)"/> method.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.HtmlWriter.RenderBeginTagCore(System.String)">
            <summary>
            Renders the begin tag without end char.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.HtmlWriter.AssertIsValidHtmlName(System.String)">
            Throws an exception if the specified string can't be a valid html name.
            The point is not to validate according to specification, but to make XSS attacks
            impossible - it disables html control characters, but won't throw on digit at the start of the name.
        </member>
        <member name="M:DotVVM.Framework.Controls.HtmlWriter.RenderEndTag">
            <summary>
            Renders the end tag.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.HtmlWriter.WriteText(System.String)">
            <summary>
            Writes the text.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.HtmlWriter.WriteUnencodedText(System.String)">
            <summary>
            Writes the unencoded text.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.IControlWithHtmlAttributes">
            <summary>
            Interface for controls which will accept any attribute and stores it in the Attributes collection.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.IDotvvmObjectLike">
            <summary> Object which is basically DotvvmBindableObject. This interface is useful for defining interfaces for controls, otherwise please prefer using DotvvmBindableObject directly. </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.IDotvvmObjectLike.Self">
            <summary> Returns itself. This is a kinda hack which allows interfaces to inherit from almost DotvvmBindableObject </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.IObjectWithCapability`1">
            <summary> Marker interface for DotvvmBindableObject which have the specified capability. If no capability of type TCapability is defined, it will be registered automatically. </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.IEventValidationHandler">
            <summary>
            Allows the <see cref="T:DotVVM.Framework.Controls.DotvvmControl"/> to perform additional checks in the event validation phase (e.g. make sure that a button which is disabled, cannot invoke the click event).
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.IEventValidationHandler.ValidateCommand(DotVVM.Framework.Binding.DotvvmProperty)">
            <summary>
            Determines whether it is legal to invoke a command on the specified property.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.IHtmlAttributeTransformer.RenderHtmlAttribute(DotVVM.Framework.Controls.IHtmlWriter,DotVVM.Framework.Hosting.IDotvvmRequestContext,System.String,System.Object)">
            <summary>
            Renders the attribute name and value into a specified writer.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.IHtmlWriter.AddAttribute(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Adds the specified attribute to the next HTML element that is being rendered. 
            </summary>
            <param name="name">The name of the HTML attribute.</param>
            <param name="value">The value of the HTML attribute.</param>
            <param name="append">
                If set to false, the value of the attribute will be overwritten. 
                If set to true, the value will be appended to the current attribute value and the <paramref name="appendSeparator"/> will be added when needed.
            </param>
            <param name="appendSeparator">The separator that will be used when <paramref name="append"/> is true and when the attribute already has a value.</param>
        </member>
        <member name="M:DotVVM.Framework.Controls.IHtmlWriter.AddStyleAttribute(System.String,System.String)">
            <summary>
            Adds the style attribute.
            </summary>
            <param name="name">The name of the CSS property.</param>
            <param name="value">The value of the CSS property.</param>
        </member>
        <member name="M:DotVVM.Framework.Controls.IHtmlWriter.AddKnockoutDataBind(System.String,System.String)">
            <summary>
            Adds the data-bind attribute to the next HTML element that is being rendered.
            </summary>
            <param name="name">The name of the binding handler.</param>
            <param name="expression">The binding expression.</param>
        </member>
        <member name="M:DotVVM.Framework.Controls.IHtmlWriter.AddKnockoutDataBind(System.String,DotVVM.Framework.Controls.KnockoutBindingGroup)">
            <summary>
            Adds the data-bind attribute to the next HTML element that is being rendered.
            </summary>
            <param name="name">The name of the binding handler.</param>
            <param name="bindingGroup">A group of name-value pairs.</param>
        </member>
        <member name="M:DotVVM.Framework.Controls.IHtmlWriter.WriteKnockoutDataBindComment(System.String,System.String)">
            <summary> Writes knockout virtual element (the &gt;!-- ko name: --> comment). It must be ended using <see cref="M:DotVVM.Framework.Controls.IHtmlWriter.WriteKnockoutDataBindEndComment" /> method. </summary>
            <param name="name">The name of the binding handler.</param>
            <param name="expression">The binding expression.</param>
        </member>
        <member name="M:DotVVM.Framework.Controls.IHtmlWriter.WriteKnockoutDataBindEndComment">
            <summary> Writes `&gt;!-- /ko comment`, ending a knockout virtual element created by <see cref="M:DotVVM.Framework.Controls.IHtmlWriter.WriteKnockoutDataBindComment(System.String,System.String)" /></summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.IHtmlWriter.RenderBeginTag(System.String)">
            <summary>
            Renders the begin tag with attributes that were added in <see cref="M:DotVVM.Framework.Controls.HtmlWriter.AddAttribute(System.String,System.String,System.Boolean,System.String)"/> method.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.IHtmlWriter.RenderSelfClosingTag(System.String)">
            <summary>
            Renders the self closing tag with attributes that were added in <see cref="M:DotVVM.Framework.Controls.HtmlWriter.AddAttribute(System.String,System.String,System.Boolean,System.String)"/> method.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.IHtmlWriter.RenderEndTag">
            <summary>
            Renders the end tag.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if some attributes were written in the HtmlWriter.</exception>
        </member>
        <member name="M:DotVVM.Framework.Controls.IHtmlWriter.WriteText(System.String)">
            <summary>
            Writes the text.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if some attributes were already written in the HtmlWriter.</exception>
        </member>
        <member name="M:DotVVM.Framework.Controls.IHtmlWriter.WriteUnencodedText(System.String)">
            <summary>
            Writes the unencoded text.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if some attributes were already written in the HtmlWriter.</exception>
        </member>
        <member name="M:DotVVM.Framework.Controls.IHtmlWriter.WriteUnencodedWhitespace(System.String)">
            <summary>
            Writes the unencoded text which is treated as whitespace. Does not throw an exception if there are attributes written in the writer.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.IHtmlWriter.WriteHtmlAttribute(System.String,System.String)">
            <summary>
            Writes the specified HTML attribute and value (e.g. href="myUrl"). 
            This method is typically used from <see cref="T:DotVVM.Framework.Controls.IHtmlAttributeTransformer"/> implementations.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.IHtmlWriter.SetErrorContext(DotVVM.Framework.Controls.DotvvmBindableObject)">
            <summary>
            Passes information about the currently rendered control to the HtmlWriter. Used only to provide more accurate error/warning/debug information, does not alter the main behavior.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.BodyResourceLinks">
            <summary>
            Renders the resource links with RenderPosition = Body and the serialized viewmodel. This control must be on every page, usually just before the end of body element.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.Infrastructure.DotvvmView">
            <summary>
            Represents a top-level control in the control tree.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.Infrastructure.DotvvmView.Directives">
            <summary>
            Gets or sets the collection of directives.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.Infrastructure.DotvvmView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotVVM.Framework.Controls.Infrastructure.DotvvmView"/> class.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.Infrastructure.MarkupControlContainer">
            <summary> Allows using markup controls from code controls or from server-side styles. Use like this <code>new MarkupControlContainer("cc:MyControl", c => c.SetValue(MyControl.NameProperty, "X"))</code> </summary>
            <seealso cref="T:DotVVM.Framework.Controls.Infrastructure.MarkupControlContainer`1"/>
        </member>
        <member name="P:DotVVM.Framework.Controls.Infrastructure.MarkupControlContainer.CreatedControl">
            <summary> After OnInit is invoked, this property contains the initialized markup control. </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.Infrastructure.MarkupControlContainer.SetProperties">
            <summary> Action which is called on newly created markup control to assign it its dotvvm properties. </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.Infrastructure.MarkupControlContainer`1">
            <summary> Allows using markup controls from code controls or from server-side styles. Use like this <code>new <see cref="T:DotVVM.Framework.Controls.Infrastructure.MarkupControlContainer`1"/>("cc:MyControl", c => c.Name = "X")</code> </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.Infrastructure.MarkupControlContainer`1.CreatedControl">
            <summary> After OnInit is invoked, this property contains the initialized markup control. </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.HeadResourceLinks">
            <summary>
            Renders the resource links with RenderPosition = Head. This control must be on every page, usually just before the end of head element.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.PrecompiledControlPlaceholder">
            <summary>
            Represents a control which was precompiled. This class does nothing, only serves as a marker for diagnostics.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.InlineScript">
            <summary>
            Renders a script that is executed when the DotVVM framework is loaded.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.InlineScript.Dependencies">
            <summary>
            Gets or sets the comma-separated list of resources that should be loaded before this script is executed.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.Internal">
            <summary>
            Contains properties that are intended for internal use.
            </summary>
        </member>
        <member name="F:DotVVM.Framework.Controls.Internal.DataContextTypeProperty">
            <summary>
            Gets compile-time DataContextStack
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.InternalPropertyExtensions.GetDataContextType(DotVVM.Framework.Controls.DotvvmBindableObject)">
            Gets an expected data context type (usually determined by the compiler)
        </member>
        <member name="M:DotVVM.Framework.Controls.InternalPropertyExtensions.SetDataContextType``1(``0,DotVVM.Framework.Compilation.ControlTree.DataContextStack)">
            Sets an expected data context type
        </member>
        <member name="T:DotVVM.Framework.Controls.ITemplate">
            <summary>
            Represents a markup template.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.ITemplate.BuildContent(DotVVM.Framework.Hosting.IDotvvmRequestContext,DotVVM.Framework.Controls.DotvvmControl)">
            <summary>
            Builds the content of the template into the specified container.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.ItemsControl">
            <summary>
            A common base for all controls that operate on collection.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.ItemsControl.DataSource">
            <summary>
            Gets or sets the source collection or a GridViewDataSet that contains data in the control.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.ItemsControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotVVM.Framework.Controls.ItemsControl"/> class.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.ItemsControl.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotVVM.Framework.Controls.ItemsControl"/> class.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.ItemsControl.GetDataSourceBinding">
            <summary>
            Gets the data source binding.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.JsComponent">
            <summary> Control which initializes a client-side component. </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.JsComponent.Global">
            <summary> If set to true, only globally registered JsComponents will be considered for rendering client-side. </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.JsComponent.Name">
            <summary> Name by which the client-side component was registered. The name is case sensitive. </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.JsComponent.WrapperTagName">
            <summary> The JsComponent must have a wrapper HTML tag, this property configures which tag is used. By default, `div` is used. </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.JsComponent.Props">
            <summary>
            The properties passed into the JsComponent. The properties may contain any object from the viewModel, command or a staticCommand binding.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.JsComponent.Templates">
            <summary>
            Templates to pass into the JsComponent. The templates will be rendered as knockout templates and the client-side component will get their ids. In React, the KnockoutTemplateReactComponent can be used to add it to the virtual DOM.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.KnockoutHelper.AddKnockoutDataBind(DotVVM.Framework.Controls.IHtmlWriter,System.String,DotVVM.Framework.Controls.DotvvmBindableObject,DotVVM.Framework.Binding.DotvvmProperty,System.Action,System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds the data-bind attribute to the next HTML element that is being rendered. The binding expression is taken from the specified property. If in server rendering mode, the binding is also not rendered.
            </summary>
            <param name="nullBindingAction">Action that is executed when there is not a value binding in the specified property, or in server rendering</param>
            <param name="renderEvenInServerRenderingMode">When set to true, the binding is rendered even in server rendering mode. By default, the data-bind attribute is only added in client-rendering mode.</param>
        </member>
        <member name="M:DotVVM.Framework.Controls.KnockoutHelper.AddKnockoutDataBind(DotVVM.Framework.Controls.IHtmlWriter,System.String,DotVVM.Framework.Controls.DotvvmBindableObject,DotVVM.Framework.Binding.Expressions.IValueBinding,System.String)">
            <summary>
            Adds the data-bind attribute to the next HTML element that is being rendered.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.KnockoutHelper.AddKnockoutDataBind(DotVVM.Framework.Controls.IHtmlWriter,System.String,DotVVM.Framework.Binding.Expressions.IValueBinding,DotVVM.Framework.Controls.DotvvmBindableObject)">
            <summary>
            Adds the data-bind attribute to the next HTML element that is being rendered. The binding expression is taken from the specified value binding.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.KnockoutHelper.AddKnockoutDataBind(DotVVM.Framework.Controls.IHtmlWriter,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,DotVVM.Framework.Binding.Expressions.IValueBinding}},DotVVM.Framework.Controls.DotvvmBindableObject,DotVVM.Framework.Binding.DotvvmProperty)">
            <summary>
            Adds the data-bind attribute to the next HTML element that is being rendered. The binding will be of form { Key: Value }, for each entry of the <paramref name="expressions" /> collection.
            </summary>
            <param name="property">This parameter is here for historical reasons, it's not useful for anything</param>
        </member>
        <member name="M:DotVVM.Framework.Controls.KnockoutHelper.WriteKnockoutDataBindComment(DotVVM.Framework.Controls.IHtmlWriter,System.String,DotVVM.Framework.Controls.DotvvmBindableObject,DotVVM.Framework.Binding.DotvvmProperty)">
            <summary> Writes knockout virtual element (the &gt;!-- ko name: --> comment). It must be ended using <see cref="M:DotVVM.Framework.Controls.IHtmlWriter.WriteKnockoutDataBindEndComment" /> method. The binding expression is taken from a binding in the specified <paramref name="property" />. </summary>
            <param name="name">The name of the binding handler.</param>
        </member>
        <member name="M:DotVVM.Framework.Controls.KnockoutHelper.GenerateClientPostbackLambda(System.String,DotVVM.Framework.Binding.Expressions.ICommandBinding,DotVVM.Framework.Controls.DotvvmBindableObject,DotVVM.Framework.Controls.PostbackScriptOptions)">
            <summary> Generates a function expression that invokes the command with specified commandArguments. Creates code like `(...commandArguments) => dotvvm.postBack(...)` </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.KnockoutHelper.GenerateClientPostBackScript(System.String,DotVVM.Framework.Binding.Expressions.ICommandBinding,DotVVM.Framework.Controls.DotvvmBindableObject,System.Boolean,System.Nullable{System.Boolean},System.Boolean,System.String)">
            <summary> Generates Javascript code which executes the specified command binding <paramref name="expression" />. </summary>
            <remarks> If you want a Javascript expression which returns a promise, use the <see cref="M:DotVVM.Framework.Controls.KnockoutHelper.GenerateClientPostBackExpression(System.String,DotVVM.Framework.Binding.Expressions.ICommandBinding,DotVVM.Framework.Controls.DotvvmBindableObject,DotVVM.Framework.Controls.PostbackScriptOptions)" /> method. </remarks>
            <param name="propertyName">Name of the property which contains this command binding. It is used for looking up postback handlers.</param>
            <param name="useWindowSetTimeout">If true, the command invocation will be wrapped in window.setTimeout with timeout 0. This is necessary for some event handlers, when the handler is invoked before the change is actually applied.</param>
            <param name="returnValue">Return value of the event handler. If set to false, the script will also include event.stopPropagation()</param>
            <param name="isOnChange">If set to true, the command will be suppressed during updating of view model. This is necessary for certain onChange events, if we don't want to trigger the command when the view model changes.</param>
            <param name="elementAccessor">Javascript variable where the sender element can be found. Set to $element when in knockout binding.</param>
        </member>
        <member name="M:DotVVM.Framework.Controls.KnockoutHelper.GenerateClientPostBackScript(System.String,DotVVM.Framework.Binding.Expressions.ICommandBinding,DotVVM.Framework.Controls.DotvvmBindableObject,DotVVM.Framework.Controls.PostbackScriptOptions)">
            <summary> Generates Javascript code which executes the specified command binding <paramref name="expression" />. </summary>
            <remarks> If you want a Javascript expression which returns a promise, use the <see cref="M:DotVVM.Framework.Controls.KnockoutHelper.GenerateClientPostBackExpression(System.String,DotVVM.Framework.Binding.Expressions.ICommandBinding,DotVVM.Framework.Controls.DotvvmBindableObject,DotVVM.Framework.Controls.PostbackScriptOptions)" /> method. </remarks>
            <param name="propertyName">Name of the property which contains this command binding. It is used for looking up postback handlers.</param>
        </member>
        <member name="M:DotVVM.Framework.Controls.KnockoutHelper.GenerateClientPostBackExpression(System.String,DotVVM.Framework.Binding.Expressions.ICommandBinding,DotVVM.Framework.Controls.DotvvmBindableObject,DotVVM.Framework.Controls.PostbackScriptOptions)">
            <summary> Generates Javascript expression which executes the specified command binding <paramref name="expression" /> and returns Promise&lt;DotvvmAfterPostBackEventArgs>. </summary>
            <remarks> If you want a JS statement that you can place into an event handler, use the <see cref="M:DotVVM.Framework.Controls.KnockoutHelper.GenerateClientPostBackScript(System.String,DotVVM.Framework.Binding.Expressions.ICommandBinding,DotVVM.Framework.Controls.DotvvmBindableObject,DotVVM.Framework.Controls.PostbackScriptOptions)" /> method. </remarks>
            <param name="propertyName">Name of the property which contains this command binding. It is used for looking up postback handlers.</param>
        </member>
        <member name="M:DotVVM.Framework.Controls.KnockoutHelper.GetPostBackHandlersScript(DotVVM.Framework.Controls.DotvvmBindableObject,System.String,System.String[])">
            <summary>
            Generates a list of postback update handlers.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.KnockoutHelper.GetValueBindingContextLambda(DotVVM.Framework.Binding.Expressions.IValueBinding,DotVVM.Framework.Controls.DotvvmBindableObject,System.Boolean)">
            <summary> Returns a lambda function taking the knockout context as its single argument, returning the result of the IValueBinding. </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.KnockoutHelper.GetValidationTargetExpression(DotVVM.Framework.Controls.DotvvmBindableObject)">
            <summary>
            Gets the validation target expression.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.KnockoutHelper.WriteTextOrBinding(DotVVM.Framework.Controls.IHtmlWriter,DotVVM.Framework.Controls.DotvvmBindableObject,DotVVM.Framework.Binding.DotvvmProperty,System.String)">
            <summary>
            Writes text iff the property contains hard-coded value OR
            writes knockout text binding iff the property contains binding
            </summary>
            <param name="writer">HTML output writer</param>
            <param name="obj">Dotvvm control which contains the <see cref="T:DotVVM.Framework.Binding.DotvvmProperty"/> with value to be written</param>
            <param name="property">Value of this property will be written</param>
            <param name="wrapperTag">Name of wrapper tag, null => knockout binding comment</param>
        </member>
        <member name="M:DotVVM.Framework.Controls.KnockoutHelper.GetKnockoutBindingExpression(DotVVM.Framework.Controls.DotvvmBindableObject,DotVVM.Framework.Binding.DotvvmProperty)">
            <summary>
            Returns Javascript expression that represents the property value (even if the property contains hard-coded value)
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.KnockoutHelper.MakeStringLiteral(System.String,System.Boolean)">
            <summary>
            Encodes the string so it can be used in Javascript code.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.Label">
            <summary> Render an HTML `&lt; label for=X &gt;` element. The for=X should be a control ID that will be looked up and adjusted to match the control even when it's in Repeater </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.LinkButton">
            <summary>
            Renders the hyperlink which behaves like a button.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.LinkButton.AddAttributesToRender(DotVVM.Framework.Controls.IHtmlWriter,DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Adds all attributes that should be added to the control begin tag.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.LinkButton.RenderContents(DotVVM.Framework.Controls.IHtmlWriter,DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Renders the contents inside the control begin and end tags.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.ListBox">
            <summary>
            Renders the HTML list box.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.ListBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotVVM.Framework.Controls.ListBox"/> class.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.ListBox.AddAttributesToRender(DotVVM.Framework.Controls.IHtmlWriter,DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Adds all attributes that should be added to the control begin tag.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.ListBox.Size">
            <summary>
            Gets or sets number of rows visible in this ListBox.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.Literal">
            <summary>
            Renders a text into the page.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.Literal.Text">
            <summary>
            Gets or sets the text displayed in the control.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.Literal.FormatString">
            <summary>
            Gets or sets the format string that will be applied to numeric or date-time values.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.Literal.RenderSpanElement">
            <summary>
            Gets or sets whether the literal should render the wrapper span HTML element.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.Literal.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotVVM.Framework.Controls.Literal"/> class.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.Literal.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:DotVVM.Framework.Controls.Literal"/> class.
            </summary>
        </member>
        <member name="F:DotVVM.Framework.Controls.MappingMode.Exclude">
            <summary> It's not possible to use this property from dothtml markup. </summary>
        </member>
        <member name="F:DotVVM.Framework.Controls.MappingMode.Attribute">
            <summary> Property is used as an attribute. For example `&lt;div Visible={value: ...}` </summary>
        </member>
        <member name="F:DotVVM.Framework.Controls.MappingMode.InnerElement">
            <summary> Property is used as a child element. For example `&lt;dot:GridView ...&gt; &lt;Columns&gt; ... property content &lt;Columns&gt;` </summary>
        </member>
        <member name="F:DotVVM.Framework.Controls.MappingMode.Both">
            <summary> It is allowed to use this property either as an attribute or as a child element. </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.MarkupOptionsAttribute">
            <summary>
            Declares instructions for control builder.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.MarkupOptionsAttribute.AllowBinding">
            <summary>
            Gets or sets whether client-side data-bindings can be used on this property (`value` and `controlProperty`).
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.MarkupOptionsAttribute.AllowHardCodedValue">
            <summary>
            Gets or sets whether the server-side value in markup can be used on this property. Allows both value hard-coded in markup and `resource` binding, which is always evaluated server-side.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.MarkupOptionsAttribute.Name">
            <summary>
            Gets or sets the name in markup. Null means that the name of the property should be used.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.MarkupOptionsAttribute.AllowValueMerging">
            <summary>
            Determines if multiple property assignments can be merged into one value. For example `&lt;div class='x' class='y' ...` is equivalent to `&lt;div class='x y'` because of the merging.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.MarkupOptionsAttribute.AttributeValueMerger">
            <summary>
            Type with non parametric constructor which implements IAttributeValueMerger interface
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.MarkupOptionsAttribute.MappingMode">
            <summary>
            Gets or sets the mapping mode - whether the property is used as an attribute or inner element (or both are allowed).
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.MarkupOptionsAttribute.AllowAttributeWithoutValue">
            <summary>
            Determines whether attributes without value are allowed.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.MarkupOptionsAttribute.Required">
            <summary> Whether the property must always be specified on this control. It is also allowed to set the property using server-side styles. </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.MultiSelectHtmlControlBase">
            <summary>
            Renders a multi-select HTML element control.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.MultiSelectHtmlControlBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotVVM.Framework.Controls.SelectHtmlControlBase"/> class.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.MultiSelectHtmlControlBase.AddAttributesToRender(DotVVM.Framework.Controls.IHtmlWriter,DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Adds all attributes that should be added to the control begin tag.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.MultiSelector">
            <summary>
            Base class for control that allows to select some of its items.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.MultiSelector.SelectedValues">
            <summary>
            Gets or sets the values of selected items.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.NamedCommand">
            <summary>
            Declares a command that can be exposed to JavaScript code under a specified name.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.NamedCommand.Name">
            <summary>
            Gets or sets the name of the command to be used in JavaScript code.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.NamedCommand.Command">
            <summary>
            Gets or sets a command that will be invoked.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.PlaceHolder">
            <summary>
            Renders a control that does nothing, just wraps the <see cref="T:DotVVM.Framework.Controls.DotvvmControl" />.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.PostBackHandler">
            <summary>
            A base class for implementations of a postback handler mechanism which can e.g. add an alert before the postback is done.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.PostBackHandler.EventName">
            <summary>
            Gets or sets the name of the event which the handler applies to. If this property is not set, it applies to all events.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.PostBackHandler.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:DotVVM.Framework.Controls.PostBackHandler"/> is enabled.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.PostBackHandler.ClientHandlerName">
            <summary>
            Gets the key of the handler registered in the dotvvm.extensions.postBackHandlers javascript object.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.PostBackHandler.GetHandlerOptions">
            <summary>
            Gets an array of objects or bindings that will be passed to the postback handler as parameters.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.PostbackScriptOptions">
            <summary> Options for the <see cref="M:DotVVM.Framework.Controls.KnockoutHelper.GenerateClientPostBackExpression(System.String,DotVVM.Framework.Binding.Expressions.ICommandBinding,DotVVM.Framework.Controls.DotvvmBindableObject,DotVVM.Framework.Controls.PostbackScriptOptions)" /> method. </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.PostbackScriptOptions.UseWindowSetTimeout">
            <summary>If true, the command invocation will be wrapped in window.setTimeout with timeout 0. This is necessary for some event handlers, when the handler is invoked before the change is actually applied.</summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.PostbackScriptOptions.ReturnValue">
            <summary>Return value of the event handler. If set to false, the script will also include event.stopPropagation()</summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.PostbackScriptOptions.ElementAccessor">
            <summary>Javascript variable where the sender element can be found. Set to $element when in knockout binding.</summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.PostbackScriptOptions.KoContext">
            <summary>Javascript variable current knockout binding context can be found. By default, `ko.contextFor({elementAccessor})` is used</summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.PostbackScriptOptions.CommandArgs">
            <summary>Javascript expression returning an array of command arguments.</summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.PostbackScriptOptions.AllowPostbackHandlers">
            <summary>When set to false, postback handlers will not be invoked for this command.</summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.PostbackScriptOptions.AbortSignal">
            <summary>Javascript expression returning <see href="https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal">AbortSignal</see> which can be used to cancel the postback (it's a JS variant of CancellationToken). </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.PostbackScriptOptions.#ctor(System.Boolean,System.Nullable{System.Boolean},System.Boolean,System.String,System.Nullable{DotVVM.Framework.Compilation.Javascript.CodeParameterAssignment},System.Nullable{DotVVM.Framework.Compilation.Javascript.CodeParameterAssignment},System.Boolean,System.Nullable{DotVVM.Framework.Compilation.Javascript.CodeParameterAssignment})">
            <param name="useWindowSetTimeout">If true, the command invocation will be wrapped in window.setTimeout with timeout 0. This is necessary for some event handlers, when the handler is invoked before the change is actually applied.</param>
            <param name="returnValue">Return value of the event handler. If set to false, the script will also include event.stopPropagation()</param>
            <param name="isOnChange">If set to true, the command will be suppressed during updating of view model. This is necessary for certain onChange events, if we don't want to trigger the command when the view model changes.</param>
            <param name="elementAccessor">Javascript variable where the sender element can be found. Set to $element when in knockout binding.</param>
            <param name="koContext">Javascript variable current knockout binding context can be found. By default, `ko.contextFor({elementAccessor})` is used</param>
            <param name="commandArgs">Javascript expression returning an array of command arguments.</param>
            <param name="allowPostbackHandlers">When set to false, postback handlers will not be invoked for this command.</param>
            <param name="abortSignal">Javascript expression returning <see href="https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal">AbortSignal</see> which can be used to cancel the postback (it's a JS variant of CancellationToken). </param>
        </member>
        <member name="M:DotVVM.Framework.Controls.PropertyImmutableHashtable.TryBuildTable(DotVVM.Framework.Binding.DotvvmProperty[],System.Int32,System.Int32)">
            <summary> Builds the core of the property hash table. Returns null if the table cannot be built due to collisions. </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.RadioButton">
            <summary>
            Renders a HTML radio button.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.RadioButton.Checked">
            <summary>
            Gets or sets whether the control is checked.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.RadioButton.CheckedItem">
            <summary>
            Gets or sets the <see cref="P:DotVVM.Framework.Controls.CheckableControlBase.CheckedValue"/> of the first <see cref="T:DotVVM.Framework.Controls.RadioButton" /> that is checked and bound to this collection.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.RadioButton.GroupName">
            <summary>
            Gets or sets an unique name of the radio button group.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.Repeater">
            <summary>
            Repeats a template for each item in the DataSource collection.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.Repeater.EmptyDataTemplate">
            <summary>
            Gets or sets the template which will be displayed when the DataSource is empty.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.Repeater.ItemTemplate">
            <summary>
            Gets or sets the template for each Repeater item.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.Repeater.RenderWrapperTag">
            <summary>
            Gets or sets whether the control should render a wrapper element.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.Repeater.SeparatorTemplate">
            <summary>
            Gets or sets the template containing the elements that separate items.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.Repeater.WrapperTagName">
            <summary>
            Gets or sets the name of the tag that wraps the Repeater.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.Repeater.RenderAsNamedTemplate">
            <summary>
            Gets or sets if the repeater should use inline template (the default, traditional way of doing things) or if it should use Knockout's named template (with the template in &lt;script> tag).
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.Repeater.OnLoad(DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Occurs after the viewmodel is applied to the page and before the commands are executed.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.Repeater.OnPreRender(DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Occurs after the page commands are executed.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.Repeater.RenderContents(DotVVM.Framework.Controls.IHtmlWriter,DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Renders the contents inside the control begin and end tags.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.Repeater.SetChildren(DotVVM.Framework.Hosting.IDotvvmRequestContext,System.Boolean,System.Boolean)">
            <summary>
            Performs the data-binding and builds the controls inside the <see cref="T:DotVVM.Framework.Controls.Repeater"/>.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.RequiredResource">
            <summary>
            Declares a resource that will be rendered in the <see cref="T:DotVVM.Framework.Controls.BodyResourceLinks" /> control later.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.RequiredResource.Name">
            <summary>
            Gets or sets the name of the resource.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.RoleView">
            <summary>
            Renders different content to the users which are in a specified role and users which are not.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.RoleView.Roles">
            <summary>
            Gets or sets a comma-separated list of roles. The user must be a member of one or more of these roles.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.RoleView.IsMemberTemplate">
            <summary>
            Gets or sets the content displayed to the users which are in one or more roles specified by the Roles property.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.RoleView.IsNotMemberTemplate">
            <summary>
            Gets or sets the content displayed to the users which are not in any of the roles specified by the Roles property.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.RoleView.HideForAnonymousUsers">
            <summary>
            Gets or sets whether the control will be hidden completely to anonymous users. If set to <c>false</c>,
            the <see cref="P:DotVVM.Framework.Controls.RoleView.IsNotMemberTemplate" /> will be rendered to anonymous users.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.RouteLink">
            <summary>
            Hyperlink which builds the URL from route name and parameter values.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.RouteLink.RouteName">
            <summary>
            Gets or sets the name of the route in the route table.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.RouteLink.UrlSuffix">
            <summary>
            Gets or sets the suffix that will be appended to the generated URL (e.g. query string or URL fragment).
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.RouteLink.Text">
            <summary>
            Gets or sets the text of the hyperlink.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.SelectHtmlControlBase">
            <summary>
            Renders <c>select</c> HTML element control.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.SelectHtmlControlBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotVVM.Framework.Controls.SelectHtmlControlBase"/> class.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.SelectHtmlControlBase.AddAttributesToRender(DotVVM.Framework.Controls.IHtmlWriter,DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Adds all attributes that should be added to the control begin tag.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.Selector">
            <summary>
            Base class for control that allows to select one of its items.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.Selector.SelectedValue">
            <summary>
            Gets or sets the value of the selected item.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.SelectorBase">
            <summary>
            Base class for control that allows to select one or more of its items.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.SelectorBase.Enabled">
            <summary>
            Gets or sets a value indicating whether the control is enabled and can be modified.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.SelectorBase.ItemTextBinding">
            <summary>
            The expression of DataSource item that will be displayed in the control.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.SelectorBase.ItemValueBinding">
            <summary>
            The expression of DataSource item that will be passed to the SelectedValue property when the item is selected.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.SelectorBase.SelectionChanged">
            <summary>
            Gets or sets the command that will be triggered when the selection is changed.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.SelectorBase.ItemTitleBinding">
            <summary>
            The expression of DataSource item that will be placed into html title attribute.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.SpaContentPlaceHolder">
            <summary>
            Container which can host a single page application.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.SpaContentPlaceHolder.DefaultRouteName">
            <summary>
            Gets or sets the default name of the route that should be loaded when there is no hash part in the URL.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.SpaContentPlaceHolder.PrefixRouteName">
            <summary>
            Gets or sets the name of the route defining the base URL of the SPA (the part of the URL before the hash).
            If this property is not set, the URL of the first page using the SpaContentPlaceHolder will stay before the hash mark.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.SpaContentPlaceHolder.UseHistoryApi">
            <summary>
            Gets or sets whether navigation in the SPA pages should use History API.
            If this property is not set, settings from <see cref="T:DotVVM.Framework.Configuration.DotvvmConfiguration">DotvvmConfiguration</see> is used.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.Styles">
            <summary>  </summary>
        </member>
        <member name="F:DotVVM.Framework.Controls.Styles.WrappersProperty">
            <summary> List of controls that will placed as wrappers to this component (the last will be top-most) </summary> 
        </member>
        <member name="F:DotVVM.Framework.Controls.Styles.AppendProperty">
            <summary> List of controls that will be placed after this control (if possible) </summary> 
        </member>
        <member name="F:DotVVM.Framework.Controls.Styles.PrependProperty">
            <summary> List of controls that will be placed before this control in reverse order (if possible) </summary> 
        </member>
        <member name="F:DotVVM.Framework.Controls.Styles.ReplaceWithProperty">
            <summary> A control which will be used instead of the specified control. Properties will be translated to the properties of the new control when possible or added as attached properties when not directly translatable. </summary> 
        </member>
        <member name="F:DotVVM.Framework.Controls.Styles.ExcludeProperty">
            <summary> No Server Side Styles will be applied to this control. When set by a style, this will be the last style to be applied to this control (although when the style contains multiple applicators, all of them will be applied) </summary> 
        </member>
        <member name="F:DotVVM.Framework.Controls.Styles.TagProperty">
            <summary> A tag which can be used to selectively style certain controls. </summary> 
        </member>
        <member name="F:DotVVM.Framework.Controls.Styles.RequiredResourcesProperty">
            <summary> Append to this property to add a required resource somewhere to the page. </summary> 
        </member>
        <member name="F:DotVVM.Framework.Controls.Styles.RemoveProperty">
            <summary> If true, the control will be removed from the control tree. Note that all appended, prepended and wrapper controls will be preserved. </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.SuppressPostBackHandler">
            <summary>
            Adds a general mechanism to suppress PostBack.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.SuppressPostBackHandler.Suppress">
            <summary>
            Gets or sets the condition to suppress a PostBack.
            </summary>
        </member>
        <member name="F:DotVVM.Framework.Controls.TableUtils.ColumnVisibleProperty">
            <summary>
            Hides entire column in the table. Should be applied to the header.
            Does not check for correct usage, may give JS errors, check out the console if it does not work.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.TemplateHost">
            <summary>
            Renders a template supplied by a resource binding or from a runtime.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.TemplateHost.Template">
            <summary>
            Gets or sets the template that will be rendered inside this control.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.TextBox">
            <summary>
            Renders a HTML text input control.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.TextBox.Enabled">
            <summary>
            Gets or sets a value indicating whether the control is enabled and can be modified.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.TextBox.FormatString">
            <summary>
            Gets or sets a format of presentation of value to client.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.TextBox.Changed">
            <summary>
            Gets or sets the command that will be triggered when the onchange event is fired.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.TextBox.TextInput">
            <summary>
            Gets or sets the command that will be triggered when the user is typing in the field.
            Be careful when using this event - triggering frequent postbacks can make bad user experience. Consider using static commands or a throttling postback handler.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.TextBox.SelectAllOnFocus">
            <summary>
            Gets or sets whether all text inside the TextBox becomes selected when the element gets focused.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.TextBox.Text">
            <summary>
            Gets or sets the text in the control.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.TextBox.Type">
            <summary>
            Gets or sets the mode of the text field.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.TextBox.UpdateTextOnInput">
            <summary>
            Gets or sets whether the viewmodel property will be updated immediately after change. 
            By default, the viewmodel is updated after the control loses its focus.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.TextBox.AddAttributesToRender(DotVVM.Framework.Controls.IHtmlWriter,DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Adds all attributes that should be added to the control begin tag.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.TextBox.RenderContents(DotVVM.Framework.Controls.IHtmlWriter,DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Renders the contents inside the control begin and end tags.
            </summary>
        </member>
        <member name="F:DotVVM.Framework.Controls.UITests.NameProperty">
            <summary>
            Gets or sets a name rendered as data-uitest-name attribute which is used by Selenium to identify the control in the page.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.UpdateProgress">
            <summary>
            Container for content that will be displayed for the time the page is doing a postback.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.UpdateProgress.Delay">
            <summary>
            Gets or sets the delay (in ms) after which the content inside UpdateProgress control is shown
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.UpdateProgress.IncludedQueues">
            <summary>
            Gets or sets the comma-separated names of PostBack.ConcurrencyQueue names for which this control should be enabled.
            If not set, all queues are included automatically.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.UpdateProgress.ExcludedQueues">
            <summary>
            Gets or sets the comma-separated names of PostBack.ConcurrencyQueue names that should be ignored by this control.
            If you don't want to exclude any queue, use an empty string.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.ValidationSummary">
            <summary>
            Displays all validation messages from the current Validation.Target.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.ValidationSummary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotVVM.Framework.Controls.ValidationSummary"/> class.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.ValidationSummary.IncludeErrorsFromChildren">
            <summary>
            Gets or sets whether the errors from child objects in the viewmodel will be displayed too.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.ValidationSummary.HideWhenValid">
            <summary>
            Gets or sets whether this control is hidden if there are no validation messages
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Controls.ValidationSummary.IncludeErrorsFromTarget">
            <summary>
            Gets or sets whether the errors from the <see cref="F:DotVVM.Framework.Controls.Validation.TargetProperty"/> object will be displayed too.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.ValidationSummary.AddAttributesToRender(DotVVM.Framework.Controls.IHtmlWriter,DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Adds all attributes that should be added to the control begin tag.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Controls.Validator">
            <summary>
            Displays the asterisk or validation message for a specified field.
            </summary>
        </member>
        <member name="F:DotVVM.Framework.Controls.Validator.HideWhenValidProperty">
            <summary>
            Gets or sets whether the control should be hidden even for valid values.
            </summary>
        </member>
        <member name="F:DotVVM.Framework.Controls.Validator.InvalidCssClassProperty">
            <summary>
            Gets or sets the name of CSS class which is applied to the control when it is not valid.
            </summary>
        </member>
        <member name="F:DotVVM.Framework.Controls.Validator.SetToolTipTextProperty">
            <summary>
            Gets or sets whether the title attribute should be set to the error message.
            </summary>
        </member>
        <member name="F:DotVVM.Framework.Controls.Validator.ShowErrorMessageTextProperty">
            <summary>
            Gets or sets whether the error message text should be displayed.
            </summary>
        </member>
        <member name="F:DotVVM.Framework.Controls.Validator.ValueProperty">
            <summary>
            Gets or sets a binding that points to the validated value.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Controls.Validator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotVVM.Framework.Controls.Validator"/> class.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Diagnostics.JsonSizeAnalyzer">
            <summary> Computes the inclusive and exclusive size of each JSON property. </summary>
        </member>
        <member name="M:DotVVM.Framework.Diagnostics.JsonSizeAnalyzer.Analyze(Newtonsoft.Json.Linq.JObject)">
            <summary> Computes the inclusive and exclusive size of each JSON property. </summary>
        </member>
        <member name="T:DotVVM.Framework.Diagnostics.PerformanceWarningTracer">
            <summary> DotVVM request tracer which produces log warning when a request is very slow or when view model is too large. </summary>
        </member>
        <member name="M:DotVVM.Framework.Hosting.AggregateMarkupFileLoader.GetMarkup(DotVVM.Framework.Configuration.DotvvmConfiguration,System.String)">
            <summary>
            Gets the markup file for the specified virtual path.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Hosting.AggregateMarkupFileLoader.GetMarkupFileVirtualPath(DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Gets the markup file virtual path from the current request URL.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Hosting.DefaultMarkupFileLoader.GetMarkup(DotVVM.Framework.Configuration.DotvvmConfiguration,System.String)">
            <summary>
            Gets the markup file for the specified virtual path.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Hosting.DefaultMarkupFileLoader.GetMarkupFileVirtualPath(DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Gets the markup file virtual path from the current request URL.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Hosting.DotvvmInterruptRequestExecutionException">
            <summary>
            An exception which is used to interrupt the request processing pipeline because the response has already been generated.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Hosting.DotvvmPresenter.#ctor(DotVVM.Framework.Configuration.DotvvmConfiguration,DotVVM.Framework.Runtime.IDotvvmViewBuilder,DotVVM.Framework.ViewModel.Serialization.IViewModelLoader,DotVVM.Framework.ViewModel.Serialization.IViewModelSerializer,DotVVM.Framework.Runtime.IOutputRenderer,DotVVM.Framework.Security.ICsrfProtector,DotVVM.Framework.Runtime.IViewModelParameterBinder,DotVVM.Framework.Runtime.IStaticCommandServiceLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:DotVVM.Framework.Hosting.DotvvmPresenter" /> class.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Hosting.DotvvmPresenter.ProcessRequest(DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Processes the request.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Hosting.DotvvmPresenter.ProcessRequestCore(DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:DotVVM.Framework.Hosting.DotvvmRequestContext.Route">
            <summary>
            Gets the route that was used for this request.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Hosting.DotvvmRequestContext.IsPostBack">
            <summary>
            Determines whether this HTTP request is a postback or a classic GET request.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Hosting.DotvvmRequestContext.ViewModel">
            <summary>
            Gets the view model object for the current HTTP request.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Hosting.DotvvmRequestContext.View">
            <summary>
            Gets the top-level control representing the whole view for the current request.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Hosting.DotvvmRequestContext.Parameters">
            <summary>
            Gets the values of parameters specified in the <see cref="P:Route" /> property.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Hosting.DotvvmRequestContext.Presenter">
            <summary>
            Gets the <see cref="T:DotVVM.Framework.Hosting.IDotvvmPresenter"/> that is responsible for handling this HTTP request.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Hosting.DotvvmRequestContext.Configuration">
            <summary>
            Gets the global configuration of DotVVM.
            </summary>
        </member>
        <member name="F:DotVVM.Framework.Hosting.DotvvmRequestContext._resourceManager">
            <summary>
            Gets the resource manager that is responsible for rendering script and stylesheet resources.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Hosting.DotvvmRequestContext.ModelState">
            <summary>
            Gets the <see cref="P:DotVVM.Framework.Hosting.DotvvmRequestContext.ModelState"/> object that manages validation errors for the viewmodel.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Hosting.DotvvmRequestContext.Query">
            <summary>
            Gets the query string parameters specified in the URL of the current HTTP request.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Hosting.DotvvmRequestContext.IsCommandExceptionHandled">
            <summary>
            Gets or sets the value indicating whether the exception that occurred in the command execution was handled. 
            This property is typically set from the exception filter's OnCommandException method.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Hosting.DotvvmRequestContext.IsPageExceptionHandled">
            <summary>
            Gets or sets the value indicating whether the exception that occurred during the page execution was handled and that the OnPageExceptionHandled will not be called on the next action filters. 
            This property is typically set from the action filter's OnPageExceptionHandled method.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Hosting.DotvvmRequestContext.CommandException">
            <summary>
            Gets or sets the exception that occurred when the command was executed.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Hosting.DotvvmRequestContext.ResultIdFragment">
            <summary>
            Gets or sets new url fragment (the part after #) to be set on client
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Hosting.DotvvmRequestContext.IsSpaRequest">
            <summary>
            Gets a value indicating whether the HTTP request wants to render only content of a specific SpaContentPlaceHolder.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Hosting.DotvvmRequestContext.IsInPartialRenderingMode">
            <summary>
            Gets a value indicating whether this HTTP request is made from single page application and only the SpaContentPlaceHolder content will be rendered.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Hosting.DotvvmRequestContext.GetCurrent(DotVVM.Framework.Hosting.IHttpContext)">
            <summary>
            Gets the current DotVVM context.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Hosting.DotvvmRequestContext.TryGetCurrent(DotVVM.Framework.Hosting.IHttpContext)">
            <summary>
            Gets the current DotVVM context or null.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Hosting.EmbeddedMarkupFileLoader.GetMarkup(DotVVM.Framework.Configuration.DotvvmConfiguration,System.String)">
            <summary>
            Gets the markup file for the specified virtual path.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Hosting.EmbeddedMarkupFileLoader.GetMarkupFileVirtualPath(DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Gets the markup file virtual path from the current request URL.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Hosting.ErrorPages.DotvvmErrorPageRenderer.RenderErrorResponse(DotVVM.Framework.Hosting.IHttpContext,System.Exception)">
            <summary>
            Renders the error response.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Hosting.ErrorPages.ErrorFormatter.AddInfoCollectionLoader``1(System.Func{``0,System.Collections.Generic.IEnumerable{DotVVM.Framework.Hosting.ErrorPages.ExceptionAdditionalInfo}})">
            <summary>
            Adds a function to InfoCollectionLoader that returns a collection of ExceptionAdditionalInfo
            </summary>
            <typeparam name="T">type of the exception</typeparam>
            <param name="func">function that returns a collection of ExceptionAdditionalInfo</param>
        </member>
        <member name="M:DotVVM.Framework.Hosting.IDotvvmPresenter.ProcessRequest(DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Processes the request.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Hosting.IDotvvmRequestContext.HttpContext">
            <summary>
            Gets the underlying object for this HTTP request.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Hosting.IDotvvmRequestContext.CsrfToken">
            <summary>
            Csrf protection token.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Hosting.IDotvvmRequestContext.ViewModel">
            <summary>
            Gets the view model for the current request.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Hosting.IDotvvmRequestContext.View">
            <summary>
            Gets the top-level control representing the whole view for the current request.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Hosting.IDotvvmRequestContext.Configuration">
            <summary>
            Gets the global configuration of DotVVM.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Hosting.IDotvvmRequestContext.Presenter">
            <summary>
            Gets the <see cref="T:DotVVM.Framework.Hosting.IDotvvmPresenter"/> that is responsible for handling this HTTP request.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Hosting.IDotvvmRequestContext.Route">
            <summary>
            Gets the route that was used for this request.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Hosting.IDotvvmRequestContext.IsPostBack">
            <summary>
            Determines whether this HTTP request is a postback or a classic GET request.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Hosting.IDotvvmRequestContext.Parameters">
            <summary>
            Gets the values of parameters specified in the <see cref="P:Route" /> property.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Hosting.IDotvvmRequestContext.ResourceManager">
            <summary>
            Gets the resource manager that is responsible for rendering script and stylesheet resources.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Hosting.IDotvvmRequestContext.ModelState">
            <summary>
            Gets the <see cref="P:DotVVM.Framework.Hosting.IDotvvmRequestContext.ModelState"/> object that manages validation errors for the viewmodel.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Hosting.IDotvvmRequestContext.Query">
            <summary>
            Gets the query string parameters specified in the URL of the current HTTP request.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Hosting.IDotvvmRequestContext.IsCommandExceptionHandled">
            <summary>
            Gets or sets the value indicating whether the exception that occurred in the command execution was handled. 
            This property is typically set from the exception filter.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Hosting.IDotvvmRequestContext.IsPageExceptionHandled">
            <summary>
            Gets or sets the value indicating whether the exception that occurred in the command execution was handled. 
            This property is typically set from the action filter's OnPageExceptionHandled method.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Hosting.IDotvvmRequestContext.CommandException">
            <summary>
            Gets or sets the exception that occurred when the command was executed.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Hosting.IDotvvmRequestContext.IsSpaRequest">
            <summary>
            Gets a value indicating whether the HTTP request wants to render only content of a specific SpaContentPlaceHolder.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Hosting.IDotvvmRequestContext.IsInPartialRenderingMode">
            <summary>
            Gets a value indicating whether this HTTP request is made from single page application and only the SpaContentPlaceHolder content will be rendered.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Hosting.IDotvvmRequestContext.ResultIdFragment">
            <summary>
            Gets or sets new url fragment (the part after #) to be set on client. Use this to refer to element Ids on the page
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Hosting.IEnvironmentNameProvider.GetEnvironmentName(DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Returns the name of the hosting environment (e.g. Development, Production).
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Hosting.IMarkupFileLoader.GetMarkupFileVirtualPath(DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Gets the markup file from the current request URL.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Hosting.IMarkupFileLoader.GetMarkup(DotVVM.Framework.Configuration.DotvvmConfiguration,System.String)">
            <summary>
            Gets the markup file for the specified virtual path. Returns null when the file cannot be loaded
            </summary>
        </member>
        <member name="F:DotVVM.Framework.Hosting.InterruptReason.RequestRejected">
            <summary> The request was rejected, most likely for security reasons. </summary>
        </member>
        <member name="T:DotVVM.Framework.Hosting.LocalizablePresenter">
            <summary>
            A DotVVM Presenter that reads culture by <see cref="F:DotVVM.Framework.Hosting.LocalizablePresenter.getCulture" />,
            sets the thread culture and invokes the default dotvvm presenter (obtained from IServiceProvider)
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Hosting.LocalizablePresenter.BasedOnParameter(System.String,System.Boolean)">
            <summary>Creates a <see cref="T:DotVVM.Framework.Hosting.LocalizablePresenter" /> factory that read the culture from route parameter.</summary>
            <param name="name">Name of the route parameter</param>
            <param name="redirectWhenNotFound">If the culture is invalid, it will perform redirect to a url with default culture specified.</param>
        </member>
        <member name="M:DotVVM.Framework.Hosting.LocalizablePresenter.BasedOnQuery(System.String,System.Boolean)">
            <summary>
            Creates a <see cref="T:DotVVM.Framework.Hosting.LocalizablePresenter" /> factory that read the culture from request query string parameter.
            </summary>
            <param name="name">Name of the query string parameter</param>
            <param name="redirectWhenNotFound">If the culture is invalid, it will perform redirect to a url with default culture specified.</param>
        </member>
        <member name="M:DotVVM.Framework.Hosting.LocalizablePresenter.WithRedirectOnFailure(System.Action{DotVVM.Framework.Hosting.IDotvvmRequestContext},System.Func{DotVVM.Framework.Hosting.IDotvvmRequestContext,System.Globalization.CultureInfo})">
            <summary>
            Wraps cultureGetter with error handling. It calls the doRedirect on errors,
            and expects it to throw and exception (probably <see cref="T:DotVVM.Framework.Hosting.DotvvmInterruptRequestExecutionException"/>)
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Hosting.Middlewares.DotvvmFileUploadMiddleware.StoreFile(DotVVM.Framework.Hosting.IHttpContext,Microsoft.AspNet.WebUtilities.MultipartSection,DotVVM.Core.Storage.IUploadedFileStorage)">
            <summary>
            Stores the file and returns an object that will be sent to the client.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Hosting.Middlewares.DotvvmMiddlewareBase.GetVirtualDirectory(DotVVM.Framework.Hosting.IHttpContext)">
            <summary>
            Determines the current virtual directory.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Hosting.Middlewares.DotvvmMiddlewareBase.GetCleanRequestUrl(DotVVM.Framework.Hosting.IHttpContext)">
            <summary>
            Get clean request url without slashes.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:DotVVM.Framework.Hosting.Middlewares.DotvvmRoutingMiddleware.TryParseGooglebotHashbangEscapedFragment(System.String,System.String@)">
            <summary>
            Attempts to recognize request made by Googlebot in its effort to crawl links for AJAX SPAs.
            </summary>
            <param name="queryString">
            The query string of the request to try to match the Googlebot hashbang escaped fragment on.
            </param>
            <param name="url">
            The plain URL string that the hashbang escaped fragment represents.
            </param>
            <returns>
            <code>true</code>, if the URL contains valid Googlebot hashbang escaped fragment; otherwise <code>false</code>.
            </returns>
            <see href="https://developers.google.com/webmasters/ajax-crawling/docs/getting-started"/>
        </member>
        <member name="M:DotVVM.Framework.Hosting.Middlewares.IMiddleware.Handle(DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Handle given request.
            </summary>
            <param name="request"></param>
            <returns>Whether the request is handled or if the next middleware should be invoked.</returns>
        </member>
        <member name="T:DotVVM.Framework.Hosting.ModelState">
            <summary>
            Keeps track of all validation errors.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Hosting.ModelState.ValidationTargetPath">
            <summary>
            Gets the validation target path relative to the command target.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Hosting.ModelState.ValidationTarget">
            <summary>
            Gets the object that was validated.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Hosting.ModelState.Errors">
            <summary>
            Gets a collection of validation errors.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Hosting.ModelState.IsValid">
            <summary>
            Gets a value indicating whether the <see cref="P:DotVVM.Framework.Hosting.ModelState.ValidationTarget"/> is valid or not.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Hosting.ModelState.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotVVM.Framework.Hosting.ModelState"/> class.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Hosting.RequestTracingConstants">
            <summary>
            Constants containing names of events for tracing a request.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Hosting.StartupTracingConstants">
            <summary>
            Constants containing names of events for tracing app startup.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.ResourceManagement.BundlingResourceProcessor">
            <summary>
            Replaces specified resources by the registered bundles
            </summary>
        </member>
        <member name="T:DotVVM.Framework.ResourceManagement.CachingResourceRepository">
            <summary>
            Base <see cref="T:DotVVM.Framework.ResourceManagement.IDotvvmResourceRepository"/>. Ensures that FindResource is called only once for one name and remembers the result for next calls.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.ResourceManagement.DotvvmResourceRepository">
            <summary>
            Repository of named resources
            </summary>
        </member>
        <member name="P:DotVVM.Framework.ResourceManagement.DotvvmResourceRepository.Resources">
            <summary>
            Dictionary of resources
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ResourceManagement.DotvvmResourceRepository.FindResource(System.String)">
            <summary>
            Finds the resource with the specified name. Returns null if it's not found.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ResourceManagement.DotvvmResourceRepository.Register(System.String,DotVVM.Framework.ResourceManagement.IResource,System.Boolean)">
            <summary>
            Registers a new resource in the repository.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ResourceManagement.DotvvmResourceRepository.RegisterNamedParent(System.String,DotVVM.Framework.ResourceManagement.IDotvvmResourceRepository)">
            <summary>
            Registers a child resource repository.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ResourceManagement.DotvvmResourceRepository.Nest">
            <summary>
            Creates nested repository. All new registrations in the nested repo will not apply to this.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ResourceManagement.DotvvmResourceRepository.FindNamedResource(System.String)">
            <summary> Finds the resource with the specified name. Throws an exception if the resource is not found. </summary>
        </member>
        <member name="T:DotVVM.Framework.ResourceManagement.EmbeddedResourceLocation">
            <summary>
            Represents resource located in assembly embedded resources.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.ResourceManagement.EmbeddedResourceLocation.DebugFilePath">
            <summary>
            File where the resource is located for debug purposes
            </summary>
        </member>
        <member name="T:DotVVM.Framework.ResourceManagement.FileResourceLocation">
            <summary>
            Represents a resource located in a file in filesystem.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.ResourceManagement.IDebugFileLocalLocation">
            <summary>
            Can get physical location of the file for debugging purposes. In that directory can be located associated source maps and based on file will be the resource refreshed.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.ResourceManagement.IDeferrableResource.Defer">
            <summary> If `defer` attribute should be used. </summary>
        </member>
        <member name="T:DotVVM.Framework.ResourceManagement.ILinkResource">
            <summary>
            Represents a resource that is loaded from a location (possibly multiple as failover).
            </summary>
        </member>
        <member name="T:DotVVM.Framework.ResourceManagement.ILocalResourceLocation">
            <summary>
            Represents resource located on the server, so it can be loaded to stream easily.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.ResourceManagement.ILocalResourceUrlManager">
            <summary>
            Gets url where the resource can be found and finds the resource location based on this url
            </summary>
        </member>
        <member name="T:DotVVM.Framework.ResourceManagement.InlineScriptResource">
            <summary>
            Piece of javascript code that is used in the page.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.ResourceManagement.InlineScriptResource.Code">
            <summary>
            Gets or sets the javascript code that will be embedded in the page.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.ResourceManagement.InlineScriptResource.Defer">
            <summary> If the script should be executed after the page loads (using the `defer` attribute). </summary>
        </member>
        <member name="M:DotVVM.Framework.ResourceManagement.InlineScriptResource.Render(DotVVM.Framework.Controls.IHtmlWriter,DotVVM.Framework.Hosting.IDotvvmRequestContext,System.String)">
            <summary>
            Renders the resource in the specified <see cref="T:DotVVM.Framework.Controls.IHtmlWriter" />.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.ResourceManagement.InlineStylesheetResource">
            <summary>
            CSS in header. It's perfect for small css. For example critical CSS.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.ResourceManagement.InlineStylesheetResource.Code">
            <summary>
            Gets the CSS code that will be embedded in the page.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ResourceManagement.InlineStylesheetResource.Render(DotVVM.Framework.Controls.IHtmlWriter,DotVVM.Framework.Hosting.IDotvvmRequestContext,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:DotVVM.Framework.ResourceManagement.IPreloadResource">
            <summary>
            Represents a resource that will be preloaded using a link element with attribute rel="preload" rendered into header.  
            For more information about this technique see <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Preloading_content">MDN web docs</see>.
            If the resource is added after the HEAD element is rendered, the resource is not going to be preloaded.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.ResourceManagement.IResource">
            <summary>
            Represents a resources that can claimed from html page.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.ResourceManagement.IResourceHashService">
            <summary>
            Computes cryptographically secure hashes for given <see cref="T:DotVVM.Framework.ResourceManagement.ILocalResourceLocation"/>
            </summary>
        </member>
        <member name="T:DotVVM.Framework.ResourceManagement.IResourceLocation">
            <summary>
            Represents a location where resource can be found.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.ResourceManagement.IResourceProcessor">
            <summary>
            Post-processes requested resource by a page.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.ResourceManagement.LinkResourceBase">
            <summary>
            Base for resources linked from a location. Automatically renders failover script and contains helper methods for rendering urls and integrity hashes.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.ResourceManagement.LinkResourceBase.Location">
            <summary>Location property is required!</summary>
        </member>
        <member name="P:DotVVM.Framework.ResourceManagement.ResourceLocationFallback.JavascriptCondition">
            <summary>
            Javascript expression which return true (truthy value) when the script IS NOT correctly loaded
            </summary>
        </member>
        <member name="T:DotVVM.Framework.ResourceManagement.NamedResource">
            <summary>
            Resource with its name.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.ResourceManagement.NullResource">
            <summary>
            A resource that is not rendered. Use this class if you load the scripts or styles yourself using the script or style element in the page.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ResourceManagement.RegistrationUtils.SetEmbeddedResourceDebugFile(DotVVM.Framework.ResourceManagement.DotvvmResourceRepository,System.String,System.String)">
            <summary>
            Registers debug file path for the specified embedded resource.
            In debug mode resource is loaded from this path, it is refreshed on every request, and debug maps are looked up in the same directory.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.ResourceManagement.ResourceBase.Dependencies">
            <summary>
            Gets or sets the collection of dependent resources.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.ResourceManagement.ResourceBase.RenderPosition">
            <summary>
            Gets or sets where the resource has to be 
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ResourceManagement.ResourceBase.Render(DotVVM.Framework.Controls.IHtmlWriter,DotVVM.Framework.Hosting.IDotvvmRequestContext,System.String)">
            <summary>
            Renders the resource in the specified <see cref="T:DotVVM.Framework.Controls.IHtmlWriter"/>.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.ResourceManagement.ResourceManager">
            <summary>
            Holds all required resources and render them to the page in correct order.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ResourceManagement.ResourceManager.#ctor(DotVVM.Framework.ResourceManagement.DotvvmResourceRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:DotVVM.Framework.ResourceManagement.ResourceManager"/> class.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ResourceManagement.ResourceManager.AddRequiredResource(System.String)">
            <summary>
            Adds the required resource with specified name.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ResourceManagement.ResourceManager.AddTemplateResource(System.String,System.String)">
            <summary>
            Adds the template resource at the end of the HTML document.
            </summary>
            <param name="template">The rendered DOM elements.</param>
            <param name="resourceId">The ID of the template resource.</param>
            <returns>Resource ID</returns>
        </member>
        <member name="M:DotVVM.Framework.ResourceManagement.ResourceManager.AddTemplateResource(System.String)">
            <summary>
            Adds the template resource at the end of the HTML document.
            </summary>
            <param name="template">The rendered DOM elements.</param>
            <returns>Resource ID</returns>
        </member>
        <member name="M:DotVVM.Framework.ResourceManagement.ResourceManager.AddRequiredResource(DotVVM.Framework.ResourceManagement.IResource)">
            <summary>
            Adds the resource with unique name.
            </summary>
            <param name="resource"></param>
        </member>
        <member name="M:DotVVM.Framework.ResourceManagement.ResourceManager.AddRequiredResource(System.String,DotVVM.Framework.ResourceManagement.IResource)">
            <summary>
            Adds the resource and checks name conflicts.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ResourceManagement.ResourceManager.IsAlreadyRendered(DotVVM.Framework.ResourceManagement.ResourceRenderPosition)">
            Checks whether the resource position is already rendered.
        </member>
        <member name="M:DotVVM.Framework.ResourceManagement.ResourceManager.AddRequiredScriptFile(System.String,System.String,System.String[])">
            <summary>
            Adds the required script file.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ResourceManagement.ResourceManager.AddRequiredStylesheetFile(System.String,System.String,System.String[])">
            <summary>
            Adds the required stylesheet file.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ResourceManagement.ResourceManager.AddStartupScript(System.String,System.String,System.String[])">
            <summary>
            Adds the specified piece of javascript that will be executed when the page is loaded.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ResourceManagement.ResourceManager.AddStartupScript(System.String,System.String,System.Boolean,System.String[])">
            <summary>
            Adds the specified piece of javascript that will be executed when the page is loaded.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ResourceManagement.ResourceManager.AddStartupScript(System.String,System.String[])">
            <summary>
            Adds the specified piece of javascript that will be executed when the page is loaded.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ResourceManagement.ResourceManager.AddStartupScript(System.String,System.Boolean,System.String[])">
            <summary>
            Adds the specified piece of javascript that will be executed when the page is loaded.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ResourceManagement.ResourceManager.AddInlineScript(System.String,System.String[])">
            <summary> Adds a script tag with inline content. The script is identified by the hash of it's content, so it will be in the page only once. </summary>
        </member>
        <member name="M:DotVVM.Framework.ResourceManagement.ResourceManager.AddCurrentCultureGlobalizationResource">
            <summary>
            Adds the globalization file for current thread culture.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ResourceManagement.ResourceManager.GetResourcesInOrder">
            <summary>
            Gets the resources in correct order.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ResourceManagement.ResourceManager.GetNamedResourcesInOrder">
            <summary>
            Gets the resources with name in correct order.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ResourceManagement.ResourceManager.FindResource(System.String)">
            <summary>
            Finds a resource in required resources or in the resources registered in the configuration file. Throws an exception if the resource is not found.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ResourceManagement.ResourceRepositoryExtensions.RegisterStylesheet(DotVVM.Framework.ResourceManagement.DotvvmResourceRepository,System.String,DotVVM.Framework.ResourceManagement.IResourceLocation,System.String[],System.String)">
            <summary> Registers a <see cref="T:DotVVM.Framework.ResourceManagement.StylesheetResource" /> (a CSS resource) with the specified name, location and dependencies.
            <paramref name="integrityHash"/> does not have to be used when location is local. </summary>
        </member>
        <member name="M:DotVVM.Framework.ResourceManagement.ResourceRepositoryExtensions.RegisterStylesheetFile(DotVVM.Framework.ResourceManagement.DotvvmResourceRepository,System.String,System.String,System.String[])">
            <summary> Registers a <see cref="T:DotVVM.Framework.ResourceManagement.StylesheetResource" /> from the specified file.
            The file can be anywhere in the filesystem, it does not have to be in the wwwroot folder.
            DotVVM will handle its serving, caching, ... automatically </summary>
        </member>
        <member name="M:DotVVM.Framework.ResourceManagement.ResourceRepositoryExtensions.RegisterStylesheetUrl(DotVVM.Framework.ResourceManagement.DotvvmResourceRepository,System.String,System.String,System.String,System.String[])">
            <summary> Registers a <see cref="T:DotVVM.Framework.ResourceManagement.StylesheetResource" /> with the specified URL.
            If the URL is local, consider using the <see cref="M:DotVVM.Framework.ResourceManagement.ResourceRepositoryExtensions.RegisterStylesheetFile(DotVVM.Framework.ResourceManagement.DotvvmResourceRepository,System.String,System.String,System.String[])" /> method. </summary>
            <param name="integrityHash"> is a hash of the served file, it's highly recommended to set it when the resource is from a 3rd party domain. See https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity for more information. </param>
        </member>
        <member name="M:DotVVM.Framework.ResourceManagement.ResourceRepositoryExtensions.RegisterScript(DotVVM.Framework.ResourceManagement.DotvvmResourceRepository,System.String,DotVVM.Framework.ResourceManagement.IResourceLocation,System.Boolean,System.Boolean,System.String[],System.String)">
            <summary> Registers a <see cref="T:DotVVM.Framework.ResourceManagement.ScriptResource" /> (a Javascript resource) with the specified name, location and dependencies.
            <paramref name="integrityHash"/> does not have to be used when location is local. </summary>
        </member>
        <member name="M:DotVVM.Framework.ResourceManagement.ResourceRepositoryExtensions.RegisterScriptFile(DotVVM.Framework.ResourceManagement.DotvvmResourceRepository,System.String,System.String,System.Boolean,System.Boolean,System.String[])">
            <summary> Registers a <see cref="T:DotVVM.Framework.ResourceManagement.ScriptResource" /> from the specified file.
            The file can be anywhere in the filesystem, it does not have to be in the wwwroot folder.
            DotVVM will handle its serving, caching, ... automatically </summary>
        </member>
        <member name="M:DotVVM.Framework.ResourceManagement.ResourceRepositoryExtensions.RegisterScriptModuleFile(DotVVM.Framework.ResourceManagement.DotvvmResourceRepository,System.String,System.String,System.Boolean,System.String[])">
            <summary> Registers a <see cref="T:DotVVM.Framework.ResourceManagement.ScriptModuleResource" /> from the specified file.
            The file can be anywhere in the filesystem, it does not have to be in the wwwroot folder.
            DotVVM will handle its serving, caching, ... automatically </summary>
        </member>
        <member name="M:DotVVM.Framework.ResourceManagement.ResourceRepositoryExtensions.RegisterScriptUrl(DotVVM.Framework.ResourceManagement.DotvvmResourceRepository,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String[])">
            <summary> Registers a <see cref="T:DotVVM.Framework.ResourceManagement.ScriptResource" /> with the specified URL.
            If the URL is local, consider using the <see cref="M:DotVVM.Framework.ResourceManagement.ResourceRepositoryExtensions.RegisterScriptFile(DotVVM.Framework.ResourceManagement.DotvvmResourceRepository,System.String,System.String,System.Boolean,System.Boolean,System.String[])" /> method. </summary>
            <param name="integrityHash"> is a hash of the served file, it's highly recommended to set it when the resource is from a 3rd party domain. See https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity for more information. </param>
        </member>
        <member name="M:DotVVM.Framework.ResourceManagement.ResourceRepositoryExtensions.RegisterScriptModuleUrl(DotVVM.Framework.ResourceManagement.DotvvmResourceRepository,System.String,System.String,System.String,System.Boolean,System.String[])">
            <summary> Registers a <see cref="T:DotVVM.Framework.ResourceManagement.ScriptModuleResource" /> with the specified URL.
            If the URL is local, consider using the <see cref="M:DotVVM.Framework.ResourceManagement.ResourceRepositoryExtensions.RegisterScriptFile(DotVVM.Framework.ResourceManagement.DotvvmResourceRepository,System.String,System.String,System.Boolean,System.Boolean,System.String[])" /> method. </summary>
            <param name="integrityHash"> is a hash of the served file, it's highly recommended to set it when the resource is from a 3rd party domain. See https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity for more information. </param>
        </member>
        <member name="T:DotVVM.Framework.ResourceManagement.ScriptModuleResource">
            <summary>
            Reference to a javascript file.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.ResourceManagement.ScriptModuleResource.Defer">
            <summary> If `defer` attribute should be used. </summary>
        </member>
        <member name="T:DotVVM.Framework.ResourceManagement.ScriptResource">
            <summary>
            Reference to a javascript file.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ResourceManagement.ScriptResource.#ctor">
            <summary>Location property is required!</summary>
        </member>
        <member name="T:DotVVM.Framework.ResourceManagement.SpaModeResourceProcessor">
            <summary>
            Replaces specified resources by the registered bundles
            </summary>
        </member>
        <member name="T:DotVVM.Framework.ResourceManagement.StylesheetResource">
            <summary>
            Reference to a CSS file.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ResourceManagement.StylesheetResource.#ctor">
            <remarks>Location property is required!</remarks>
        </member>
        <member name="T:DotVVM.Framework.ResourceManagement.UrlResourceLocation">
            <summary>
            Represents a resource located at remote server identified by a url.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.ResourceManagement.ViewModuleImportResource">
            <summary>
            Reference to a list of modules that will be registered using dotvvm.registerViewModules for runtime use.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.ResourceManagement.ViewModuleInitResource">
            <summary>
            Reference to a list of modules that will be initialized using dotvvm.initModule for runtime use.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Resources.Controls">
            <summary>
               A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Resources.Controls.ResourceManager">
            <summary>
               Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Resources.Controls.Culture">
            <summary>
               Overrides the current thread's CurrentUICulture property for all
               resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Resources.Controls.FileUpload_NumberOfFilesText">
            <summary>
               Looks up a localized string similar to {0} files.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Resources.Controls.FileUpload_SuccessMessageText">
            <summary>
               Looks up a localized string similar to The files were uploaded successfully..
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Resources.Controls.FileUpload_UploadButtonText">
            <summary>
               Looks up a localized string similar to Upload.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Resources.Controls.FileUpload_UploadErrorMessageText">
            <summary>
               Looks up a localized string similar to Error occurred..
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Resources.DothtmlTokenizerErrors">
            <summary>
               A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Resources.DothtmlTokenizerErrors.ResourceManager">
            <summary>
               Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Resources.DothtmlTokenizerErrors.Culture">
            <summary>
               Overrides the current thread's CurrentUICulture property for all
               resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Resources.DothtmlTokenizerErrors.AttributeValueNotClosed">
             <summary>
                Looks up a localized string similar to The attribute value was not closed. Example: 
            &lt;a href=&quot;#&quot;&gt;Link&lt;/a&gt; or &lt;a href=&apos;#&apos;&gt;Link&lt;/a&gt;.
             </summary>
        </member>
        <member name="P:DotVVM.Framework.Resources.DothtmlTokenizerErrors.BindingInvalidFormat">
             <summary>
                Looks up a localized string similar to The format of data-binding is not valid. Example:
            {{value: FirstName}} or &lt;a href=&quot;{value: FirstName}&quot;&gt;Link&lt;/a&gt;.
             </summary>
        </member>
        <member name="P:DotVVM.Framework.Resources.DothtmlTokenizerErrors.BindingNotClosed">
             <summary>
                Looks up a localized string similar to The binding must be closed by double braces. Example:
            &lt;a href=&quot;{value: FirstName}&quot;&gt;Link&lt;/a&gt;.
             </summary>
        </member>
        <member name="P:DotVVM.Framework.Resources.DothtmlTokenizerErrors.CDataNotClosed">
             <summary>
                Looks up a localized string similar to The CDATA section is not closed. Example:
            &lt;![CDATA[ content ]]&gt;.
             </summary>
        </member>
        <member name="P:DotVVM.Framework.Resources.DothtmlTokenizerErrors.CommentNotClosed">
             <summary>
                Looks up a localized string similar to The HTML comment is not closed. Example:
            &lt;!-- comment --&gt;.
             </summary>
        </member>
        <member name="P:DotVVM.Framework.Resources.DothtmlTokenizerErrors.DirectiveNameExpected">
             <summary>
                Looks up a localized string similar to Directive name expected. Example: 
            @viewmodel DotVVM.Samples.SampleViewModel, DotVVM.Samples.
             </summary>
        </member>
        <member name="P:DotVVM.Framework.Resources.DothtmlTokenizerErrors.DirectiveValueExpected">
             <summary>
                Looks up a localized string similar to Value of the directive expected. Example: 
            @viewmodel DotVVM.Samples.SampleViewModel, DotVVM.Samples.
             </summary>
        </member>
        <member name="P:DotVVM.Framework.Resources.DothtmlTokenizerErrors.DoctypeNotClosed">
             <summary>
                Looks up a localized string similar to The DOCTYPE section is not closed. Example:
            &lt;!DOCTYPE html&gt;.
             </summary>
        </member>
        <member name="P:DotVVM.Framework.Resources.DothtmlTokenizerErrors.DoubleBraceBindingNotClosed">
             <summary>
                Looks up a localized string similar to The binding must be closed by double braces. Example:
            {{value: FirstName}}.
             </summary>
        </member>
        <member name="P:DotVVM.Framework.Resources.DothtmlTokenizerErrors.InvalidCharactersInTag">
            <summary>
               Looks up a localized string similar to The tag contains invalid characters. The tag must end with &apos;&gt;&apos; or &apos;/&gt;&apos;..
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Resources.DothtmlTokenizerErrors.MissingAttributeValue">
             <summary>
                Looks up a localized string similar to The attribute value expected. Example:
            &lt;a href=&quot;#&quot;&gt;Link&lt;/a&gt;.
             </summary>
        </member>
        <member name="P:DotVVM.Framework.Resources.DothtmlTokenizerErrors.MissingTagName">
             <summary>
                Looks up a localized string similar to The tag name cannot end with the &apos;:&apos;. Example:
            &lt;dot:Button /&gt;.
             </summary>
        </member>
        <member name="P:DotVVM.Framework.Resources.DothtmlTokenizerErrors.MissingTagPrefix">
             <summary>
                Looks up a localized string similar to The tag name cannot start with the &apos;:&apos;. Example:
            &lt;dot:Button /&gt;.
             </summary>
        </member>
        <member name="P:DotVVM.Framework.Resources.DothtmlTokenizerErrors.TagNameExpected">
             <summary>
                Looks up a localized string similar to The tag name expected after &apos;&lt;&apos; character. Example:
            &lt;a href=&quot;#&quot;&gt;Link&lt;/a&gt;.
             </summary>
        </member>
        <member name="P:DotVVM.Framework.Resources.DothtmlTokenizerErrors.TagNotClosed">
             <summary>
                Looks up a localized string similar to The tag is not closed. Example:
            &lt;a href=&quot;#&quot;&gt;Link&lt;/a&gt;.
             </summary>
        </member>
        <member name="P:DotVVM.Framework.Resources.DothtmlTokenizerErrors.XmlProcessingInstructionNotClosed">
             <summary>
                Looks up a localized string similar to The XML processing instruction is not closed. Example:
            &lt;?xml version=&quot;1.0&quot; ?&gt;.
             </summary>
        </member>
        <member name="T:DotVVM.Framework.Routing.DefaultRouteStrategy">
            <summary>
            A default route discover strategy which browses the Views folder and automatically creates routes for all *.dothtml files.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Routing.DefaultRouteStrategy.DiscoverMarkupFiles">
            <summary>
            Discovers all markup files for which the route should be created.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Routing.DefaultRouteStrategy.BuildRoutes(DotVVM.Framework.Routing.RouteStrategyMarkupFileInfo)">
            <summary>
            Builds a set of routes for the specified markup file.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Routing.DefaultRouteStrategy.BuildRoute(DotVVM.Framework.Routing.RouteStrategyMarkupFileInfo)">
            <summary>
            Builds a route for the specified markup file.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Routing.DotvvmRoute.ParameterNames">
            <summary>
            Gets the names of the route parameters in the order in which they appear in the URL.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Routing.DotvvmRoute.#ctor(System.String,System.String,System.Object,System.Func{System.IServiceProvider,DotVVM.Framework.Hosting.IDotvvmPresenter},DotVVM.Framework.Configuration.DotvvmConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:DotVVM.Framework.Routing.DotvvmRoute"/> class.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Routing.DotvvmRoute.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Func{System.IServiceProvider,DotVVM.Framework.Hosting.IDotvvmPresenter},DotVVM.Framework.Configuration.DotvvmConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:DotVVM.Framework.Routing.DotvvmRoute"/> class.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Routing.DotvvmRoute.#ctor(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Func{System.IServiceProvider,DotVVM.Framework.Hosting.IDotvvmPresenter},DotVVM.Framework.Configuration.DotvvmConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:DotVVM.Framework.Routing.DotvvmRoute"/> class.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Routing.DotvvmRoute.ParseRouteUrl(DotVVM.Framework.Configuration.DotvvmConfiguration)">
            <summary>
            Parses the route URL and extracts the components.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Routing.DotvvmRoute.IsMatch(System.String,System.Collections.Generic.IDictionary{System.String,System.Object}@)">
            <summary>
            Determines whether the route matches to the specified URL and extracts the parameter values.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Routing.DotvvmRoute.BuildUrlCore(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Builds the URL core from the parameters.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Routing.DotvvmRoute.GetPresenter(System.IServiceProvider)">
            <summary>
            Processes the request.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Routing.DotvvmRouteTable">
            <summary>
            Represents the table of routes.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Routing.DotvvmRouteTable.#ctor(DotVVM.Framework.Configuration.DotvvmConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:DotVVM.Framework.Routing.DotvvmRouteTable"/> class.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Routing.DotvvmRouteTable.GetGroup(System.String)">
            <summary>
            Returns RouteTable of specific group name.
            </summary>
            <param name="groupName">Name of the group</param>
            <returns></returns>
        </member>
        <member name="M:DotVVM.Framework.Routing.DotvvmRouteTable.AddGroup(System.String,System.String,System.String,System.Action{DotVVM.Framework.Routing.DotvvmRouteTable},System.Func{System.IServiceProvider,DotVVM.Framework.Hosting.IDotvvmPresenter})">
            <summary>
            Adds a group of routes
            </summary>
            <param name="groupName">Name of the group</param>
            <param name="urlPrefix">Url prefix of added routes</param>
            <param name="virtualPathPrefix">Virtual path prefix of added routes</param>
            <param name="content">Contains routes to be added</param>
            <param name="presenterFactory">Default presenter factory common to all routes in the group</param>
        </member>
        <member name="M:DotVVM.Framework.Routing.DotvvmRouteTable.GetDefaultPresenter(System.IServiceProvider)">
            <summary>
            Creates the default presenter factory.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Routing.DotvvmRouteTable.Add(System.String,System.String,System.String,System.Object,System.Func{System.IServiceProvider,DotVVM.Framework.Hosting.IDotvvmPresenter})">
            <summary>
            Adds the specified route name.
            </summary>
            <param name="routeName">Name of the route.</param>
            <param name="url">The URL.</param>
            <param name="virtualPath">The virtual path of the Dothtml file.</param>
            <param name="defaultValues">The default values.</param>
            <param name="presenterFactory">Delegate creating the presenter handling this route</param>
        </member>
        <member name="M:DotVVM.Framework.Routing.DotvvmRouteTable.Add(System.String,System.String,System.Func{System.IServiceProvider,DotVVM.Framework.Hosting.IDotvvmPresenter},System.Object)">
            <summary>
            Adds the specified route name.
            </summary>
            <param name="routeName">Name of the route.</param>
            <param name="url">The URL.</param>
            <param name="defaultValues">The default values.</param>
            <param name="presenterFactory">The presenter factory.</param>
        </member>
        <member name="M:DotVVM.Framework.Routing.DotvvmRouteTable.AddUrlRedirection(System.String,System.String,System.String,System.Object,System.Boolean)">
            <summary>
            Adds the specified URL redirection entry.
            </summary>
            <param name="routeName">Name of the redirection.</param>
            <param name="urlPattern">URL pattern to redirect from.</param>
            <param name="targetUrl">URL which will be used as a target for redirection.</param>
        </member>
        <member name="M:DotVVM.Framework.Routing.DotvvmRouteTable.AddUrlRedirection(System.String,System.String,System.Func{DotVVM.Framework.Hosting.IDotvvmRequestContext,System.String},System.Object,System.Boolean)">
            <summary>
            Adds the specified URL redirection entry.
            </summary>
            <param name="routeName">Name of the redirection.</param>
            <param name="urlPattern">URL pattern to redirect from.</param>
            <param name="targetUrlProvider">URL provider to obtain context-based redirection targets.</param>
        </member>
        <member name="M:DotVVM.Framework.Routing.DotvvmRouteTable.AddRouteRedirection(System.String,System.String,System.String,System.Object,System.Boolean,System.Func{DotVVM.Framework.Hosting.IDotvvmRequestContext,System.Collections.Generic.Dictionary{System.String,System.Object}},System.Func{DotVVM.Framework.Hosting.IDotvvmRequestContext,System.String})">
            <summary>
            Adds the specified route redirection entry.
            </summary>
            <param name="routeName">Name of the redirection.</param>
            <param name="urlPattern">URL pattern to redirect from.</param>
            <param name="targetRouteName">Route name which will be used as a target for redirection.</param>
            <param name="urlSuffixProvider">Provider to obtain context-based URL suffix.</param>
        </member>
        <member name="M:DotVVM.Framework.Routing.DotvvmRouteTable.AddRouteRedirection(System.String,System.String,System.Func{DotVVM.Framework.Hosting.IDotvvmRequestContext,System.String},System.Object,System.Boolean,System.Func{DotVVM.Framework.Hosting.IDotvvmRequestContext,System.Collections.Generic.Dictionary{System.String,System.Object}},System.Func{DotVVM.Framework.Hosting.IDotvvmRequestContext,System.String})">
            <summary>
            Adds the specified route redirection entry.
            </summary>
            <param name="routeName">Name of the redirection.</param>
            <param name="urlPattern">URL pattern to redirect from.</param>
            <param name="targetRouteNameProvider">Route name provider to obtain context-based redirection targets.</param>
            <param name="urlSuffixProvider">Provider to obtain context-based URL suffix.</param>
        </member>
        <member name="M:DotVVM.Framework.Routing.DotvvmRouteTable.Add(System.String,System.String,System.Type,System.Object)">
            <summary>
            Adds the specified route name.
            </summary>
            <param name="routeName">Name of the route.</param>
            <param name="url">The URL.</param>
            <param name="presenterType">The presenter factory.</param>
            <param name="defaultValues">The default values.</param>
        </member>
        <member name="M:DotVVM.Framework.Routing.DotvvmRouteTable.Add(System.String,DotVVM.Framework.Routing.RouteBase)">
            <summary>
            Adds the specified name.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Routing.DotvvmRouteTable.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Routing.DotvvmRouteTable.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Routing.IRouteParameterConstraint.GetPartRegex(System.String)">
            <summary> Gets a regular expression that matches the route parameter value. </summary>
            <param name="parameter">Argument passed to the constraint (like for example `min(1)`). Null, if there is no parameter specified.</param>
        </member>
        <member name="P:DotVVM.Framework.Routing.RouteBase.Url">
            <summary>
            Gets the URL pattern for the route.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Routing.RouteBase.UrlWithoutTypes">
            <summary>
            Gets the URL pattern for the route, but it must not contain type parameter types (i.e. should turn a/{id:int}/{name:regex(...)} into a/{id}/{name}
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Routing.RouteBase.RouteName">
            <summary>
            Gets key of route.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Routing.RouteBase.DefaultValues">
            <summary>
            Gets the default values of the optional parameters.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Routing.RouteBase.VirtualPath">
            <summary>
            Gets or sets the virtual path to the view.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Routing.RouteBase.#ctor(System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:DotVVM.Framework.Routing.RouteBase"/> class.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Routing.RouteBase.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:DotVVM.Framework.Routing.RouteBase"/> class.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Routing.RouteBase.ParameterNames">
            <summary>
            Gets the names of the route parameters in the order in which they appear in the URL.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Routing.RouteBase.IsMatch(System.String,System.Collections.Generic.IDictionary{System.String,System.Object}@)">
            <summary>
            Determines whether the route matches to the specified URL and extracts the parameter values.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Routing.RouteBase.BuildUrl(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Builds the URL with the specified parameters.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Routing.RouteBase.BuildUrl(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
            <summary>
            Builds the URL.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Routing.RouteBase.BuildUrl(System.Object)">
            <summary>
            Builds the URL.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Routing.RouteBase.BuildUrl(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Builds the URL with the specified parameters.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Routing.RouteBase.BuildUrlCore(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Builds the URL core from the parameters.
            </summary>
            <remarks>The default values are already included in the <paramref name="values"/> collection.</remarks>
        </member>
        <member name="M:DotVVM.Framework.Routing.RouteBase.AddOrUpdateParameterCollection(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
            <summary>
            Adds or updates the parameter collection with the specified values from the anonymous object.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Routing.RouteBase.AddOrUpdateParameterCollection(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Adds or updates the parameter collection with the specified values from the other parameter collection.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Routing.RouteBase.GetPresenter(System.IServiceProvider)">
            <summary>
            Returns a presenter that processes the request.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Routing.RouteBase.Freeze2">
            <summary> This method should freeze the contents of a derived class from <see cref="T:DotVVM.Framework.Routing.RouteBase" />. Make sure that the implementation is sealed, so that the derived class cannot suppress the freezing process. If you want to allow inheritance from you class, create an abstract Freeze3 method for that. </summary>
        </member>
        <member name="M:DotVVM.Framework.Routing.RouteHelper.AutoDiscoverRoutes(DotVVM.Framework.Routing.DotvvmRouteTable,DotVVM.Framework.Routing.IRoutingStrategy)">
            <summary>
            Registers all routes discovered by specified <see cref="T:DotVVM.Framework.Routing.IRoutingStrategy"/> in the RouteTable.
            </summary>
            <param name="strategy">A strategy that provides list of routes.</param>
            <param name="table">A table of DotVVM routes by specified name.</param>
        </member>
        <member name="M:DotVVM.Framework.Routing.RouteHelper.AssertConfigurationIsValid(DotVVM.Framework.Configuration.DotvvmConfiguration)">
            <summary>
            Verify whether all provided virtual paths exist and required properties are set. 
            </summary>
            <exception cref="T:DotVVM.Framework.Configuration.DotvvmConfigurationException">Throws exception when configuration has invalid registrations.</exception> 
        </member>
        <member name="M:DotVVM.Framework.Routing.UrlHelper.BuildUrlSuffix(System.String,System.Object)">
            <summary>
            Returns url suffix from a string value and query string parameters
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Routing.UrlHelper.IsLocalUrl(System.String)">
            <summary>
            Checks whether the URL is local.
            </summary>
            <remarks>The implementation is copied from https://github.com/aspnet/AspNetCore/blob/release/2.2/src/Mvc/Mvc.Core/src/Routing/UrlHelperBase.cs#L45 in order to provide the same behavior for local redirects.</remarks>
        </member>
        <member name="T:DotVVM.Framework.Runtime.AttributeViewModelParameterBinder">
            <summary>
            Looks for all properties decorated with the <see cref="T:DotVVM.Framework.ViewModel.ParameterBindingAttribute"/> and uses these parameters to bind the values.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Runtime.AttributeViewModelParameterBinder.BindParameters(DotVVM.Framework.Hosting.IDotvvmRequestContext,System.Object)">
            <summary>
            Performs the parameter binding.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Runtime.AttributeViewModelParameterBinder.BuildParameterBindingMethod(System.Type)">
            <summary>
            Builds a lambda expression which performs the parameter binding for a specified viewmodel type.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Runtime.AttributeViewModelParameterBinder.FindPropertiesWithParameterBinding(System.Type)">
            <summary>
            Looks up for all properties to be bound.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Runtime.AttributeViewModelParameterBinder.GenerateParameterBindStatement(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.KeyValuePair{System.Reflection.PropertyInfo,DotVVM.Framework.ViewModel.ParameterBindingAttribute})">
            <summary>
            Generates an expression which calls the <see cref="M:DotVVM.Framework.Runtime.AttributeViewModelParameterBinder.SetProperty``1(DotVVM.Framework.Hosting.IDotvvmRequestContext,DotVVM.Framework.ViewModel.ParameterBindingAttribute,``0)"/> method to perform the parameter binding.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Runtime.AttributeViewModelParameterBinder.SetProperty``1(DotVVM.Framework.Hosting.IDotvvmRequestContext,DotVVM.Framework.ViewModel.ParameterBindingAttribute,``0)">
            <summary>
            Called from the generated lambda expressions to perform the parameter binding.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Runtime.AttributeViewModelParameterBinder.ClearCaches(System.Type[])">
            <summary> Clear cache when hot reload happens </summary>
        </member>
        <member name="F:DotVVM.Framework.Runtime.Caching.DotvvmCacheItemPriority.Low">
            <summary>Cache items with this priority level are the most likely to be deleted from the cache as the server frees system memory.</summary>
        </member>
        <member name="F:DotVVM.Framework.Runtime.Caching.DotvvmCacheItemPriority.Normal">
            <summary>The default value for a cached item's priority is <see cref="F:DotVVM.Framework.Runtime.Caching.DotvvmCacheItemPriority.Normal" />.</summary>
        </member>
        <member name="F:DotVVM.Framework.Runtime.Caching.DotvvmCacheItemPriority.High">
            <summary>Cache items with this priority level are the least likely to be deleted from the cache as the server frees system memory.</summary>
        </member>
        <member name="F:DotVVM.Framework.Runtime.Caching.DotvvmCacheItemPriority.NeverRemove">
            <summary>The cache items with this priority level will not be automatically deleted from the cache as the server frees system memory. However, items with this priority level are removed along with other items according to the item's absolute or sliding expiration time. </summary>
        </member>
        <member name="T:DotVVM.Framework.Runtime.Caching.SimpleLruDictionary`2">
            <summary>
            Simple implementation of LRU - a cache that remembers only the least recently used items. This dictionary has size between generationSize and 2*generationSize.
            It also automatically removes entries older than 2*generationTickTime
            Actually, the entries are not removed, the reference is just weakened, so GC can collect it. If the object is actually from another place, it will stay in the cache.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Runtime.Commands.CommandResolver">
            <summary>
            Finds the command to execute in the viewmodel using the path and command expression.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Runtime.Commands.CommandResolver.GetFunction(DotVVM.Framework.Controls.DotvvmControl,DotVVM.Framework.Controls.DotvvmControl,DotVVM.Framework.Hosting.IDotvvmRequestContext,System.String[],System.String,System.Func{System.Type,System.Object}[])">
            <summary>
            Resolves the command called on the DotvvmControl.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Runtime.Commands.CommandResolver.GetFunction(DotVVM.Framework.Controls.DotvvmControl,DotVVM.Framework.Hosting.IDotvvmRequestContext,System.String[],System.String,System.Func{System.Type,System.Object}[])">
            <summary>
            Resolves the command called on the ViewModel.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Runtime.Commands.EventValidator">
            <summary>
            Performs the event validation.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Runtime.Commands.EventValidator.ValidateCommand(System.String[],System.String,DotVVM.Framework.Controls.DotvvmControl,System.String)">
            <summary>
            Validates the command.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Runtime.Commands.EventValidator.FindCommandBinding(System.String[],System.String,DotVVM.Framework.Controls.DotvvmBindableObject,DotVVM.Framework.Controls.DotvvmBindableObject,System.String,System.Boolean)">
            <summary>
            Finds the binding of the specified type on the specified viewmodel path.
            </summary>
            <param name="path">DataContext path of the binding</param>
            <param name="commandId">Id of the binding</param>
            <param name="viewRootControl">ViewRootControl of the binding</param>
            <param name="targetControl">Target control of the binding, null if not finding control command binding</param>
            <param name="validationTargetPath">Validation path of the binding</param>
            <param name="findControl">Determinate whether finding control command binding or not</param>
            <returns></returns>
        </member>
        <member name="M:DotVVM.Framework.Runtime.Commands.EventValidator.FindCommandBinding(System.String[],System.String,DotVVM.Framework.Controls.DotvvmBindableObject,System.String)">
            <summary>
            Finds the binding of the specified type on the specified viewmodel path.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Runtime.Commands.EventValidator.ValidateControlCommand(System.String[],System.String,DotVVM.Framework.Controls.DotvvmControl,DotVVM.Framework.Controls.DotvvmControl,System.String)">
            <summary>
            Validates the control command.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Runtime.Commands.EventValidator.FindControlCommandBinding(System.String[],System.String,DotVVM.Framework.Controls.DotvvmControl,DotVVM.Framework.Controls.DotvvmBindableObject,System.String)">
            <summary>
            Finds the binding of the specified type on the specified viewmodel path.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Runtime.Commands.EventValidator.EventValidationException(System.String,System.Collections.Generic.Dictionary{System.String,DotVVM.Framework.Runtime.Commands.CandidateBindings})">
            <summary>
            Throws the event validation exception.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Runtime.Commands.ViewModelPathComparer.AreEqual(System.String[],System.String[])">
            <summary>
            Compares two viewModel paths.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Runtime.ControlTreeWalker.#ctor(DotVVM.Framework.Controls.DotvvmBindableObject)">
            <summary>
            Initializes a new instance of the <see cref="T:DotVVM.Framework.Runtime.ControlTreeWalker"/> class.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Runtime.ControlTreeWalker.ProcessControlTree(System.Action{DotVVM.Framework.Controls.DotvvmBindableObject})">
            <summary>
            Processes the control tree.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Runtime.ControlTreeWalker.RefreshCurrentPathArray">
            <summary>
            Refreshes the current path array.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Runtime.ControlTreeWalker.ProcessControlTreeCore(DotVVM.Framework.Controls.DotvvmBindableObject,System.Action{DotVVM.Framework.Controls.DotvvmBindableObject})">
            <summary>
            Processes the control tree.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Runtime.DefaultDotvvmViewBuilder.BuildView(DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Builds the <see cref="T:DotVVM.Framework.Controls.Infrastructure.DotvvmView"/> for the specified HTTP request, resolves the master page hierarchy and performs the composition.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Runtime.DefaultDotvvmViewBuilder.VerifySpaRequest(DotVVM.Framework.Hosting.IDotvvmRequestContext,DotVVM.Framework.Controls.Infrastructure.DotvvmView)">
            <summary>
            If the request is SPA request, we need to verify that the page contains the same SpaContentPlaceHolder.
            Also we need to check that the placeholder is the same.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Runtime.DefaultDotvvmViewBuilder.FillsDefaultDirectives(DotVVM.Framework.Controls.Infrastructure.DotvvmView)">
            <summary>
            Fills default directives if specific directives are not set
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Runtime.DefaultDotvvmViewBuilder.PerformMasterPageComposition(DotVVM.Framework.Controls.Infrastructure.DotvvmView,DotVVM.Framework.Controls.Infrastructure.DotvvmView)">
            <summary>
            Performs the master page nesting.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Runtime.DefaultDotvvmViewBuilder.GetMasterPageContentPlaceHolders(DotVVM.Framework.Controls.DotvvmControl)">
            <summary>
            Gets the content place holders.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Runtime.DefaultDotvvmViewBuilder.GetChildPageContents(DotVVM.Framework.Controls.Infrastructure.DotvvmView,System.Collections.Generic.List{DotVVM.Framework.Controls.ContentPlaceHolder})">
            <summary>
            Checks that the content page does not contain invalid content.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Runtime.Filters.ActionFilterAttribute">
            <summary>
            Allows to add custom logic into different phases of a request processing, e.g.: before and after a command is executed on a ViewModel.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Runtime.Filters.ActionFilterAttribute.OnViewModelCreatedAsync(DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Called after the viewmodel object is created.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Runtime.Filters.ActionFilterAttribute.OnCommandExecutingAsync(DotVVM.Framework.Hosting.IDotvvmRequestContext,DotVVM.Framework.Runtime.Filters.ActionInfo)">
            <summary>
            Called before the command is executed.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Runtime.Filters.ActionFilterAttribute.OnCommandExecutedAsync(DotVVM.Framework.Hosting.IDotvvmRequestContext,DotVVM.Framework.Runtime.Filters.ActionInfo,System.Exception)">
            <summary>
            Called after the command is executed.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Runtime.Filters.ActionFilterAttribute.OnViewModelSerializingAsync(DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Called before the viewmodel is serialized.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Runtime.Filters.ActionFilterAttribute.OnViewModelDeserializedAsync(DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Called after the viewmodel is deserialized on postback.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Runtime.Filters.ActionFilterAttribute.OnPageExceptionAsync(DotVVM.Framework.Hosting.IDotvvmRequestContext,System.Exception)">
            <summary>
            Called when an exception occurs during the processing of the page events.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Runtime.Filters.ActionFilterAttribute.OnPresenterExecutingAsync(DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <inheritdoc cref="M:DotVVM.Framework.Runtime.Filters.IPresenterActionFilter.OnPresenterExecutingAsync(DotVVM.Framework.Hosting.IDotvvmRequestContext)"/>
        </member>
        <member name="M:DotVVM.Framework.Runtime.Filters.ActionFilterAttribute.OnPresenterExecutedAsync(DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <inheritdoc cref="M:DotVVM.Framework.Runtime.Filters.IPresenterActionFilter.OnPresenterExecutedAsync(DotVVM.Framework.Hosting.IDotvvmRequestContext)"/>
        </member>
        <member name="M:DotVVM.Framework.Runtime.Filters.ActionFilterAttribute.OnPresenterExceptionAsync(DotVVM.Framework.Hosting.IDotvvmRequestContext,System.Exception)">
            <inheritdoc cref="M:DotVVM.Framework.Runtime.Filters.IPresenterActionFilter.OnPresenterExceptionAsync(DotVVM.Framework.Hosting.IDotvvmRequestContext,System.Exception)"/>
        </member>
        <member name="M:DotVVM.Framework.Runtime.Filters.ActionFilterAttribute.OnPageInitializedAsync(DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <inheritdoc cref="M:DotVVM.Framework.Runtime.Filters.IPageActionFilter.OnPageInitializedAsync(DotVVM.Framework.Hosting.IDotvvmRequestContext)"/>
        </member>
        <member name="M:DotVVM.Framework.Runtime.Filters.ActionFilterAttribute.OnPageRenderedAsync(DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <inheritdoc cref="M:DotVVM.Framework.Runtime.Filters.IPageActionFilter.OnPageRenderedAsync(DotVVM.Framework.Hosting.IDotvvmRequestContext)"/>
        </member>
        <member name="M:DotVVM.Framework.Runtime.Filters.ActionFilterHelper.ClearCaches(System.Type[])">
            <summary> Clear cache when hot reload happens </summary>
        </member>
        <member name="T:DotVVM.Framework.Runtime.Filters.ExceptionFilterAttribute">
            <summary>
            Allows to modify the response when an exception occurs.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Runtime.Filters.ExceptionFilterAttribute.OnCommandExceptionAsync(DotVVM.Framework.Hosting.IDotvvmRequestContext,DotVVM.Framework.Runtime.Filters.ActionInfo,System.Exception)">
            <summary>
            Called when the exception occurs during the command invocation.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Runtime.Filters.ICommandActionFilter.OnCommandExecutingAsync(DotVVM.Framework.Hosting.IDotvvmRequestContext,DotVVM.Framework.Runtime.Filters.ActionInfo)">
            <summary>
            Called before the command is executed.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Runtime.Filters.ICommandActionFilter.OnCommandExecutedAsync(DotVVM.Framework.Hosting.IDotvvmRequestContext,DotVVM.Framework.Runtime.Filters.ActionInfo,System.Exception)">
            <summary>
            Called after the command is executed.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Runtime.Filters.IPageActionFilter.OnPageExceptionAsync(DotVVM.Framework.Hosting.IDotvvmRequestContext,System.Exception)">
            <summary>
            Called when an exception occurs during the processing of the page.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Runtime.Filters.IPageActionFilter.OnPageInitializedAsync(DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Called after page is initialized, just after the ViewModel instance is created
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Runtime.Filters.IPageActionFilter.OnPageRenderedAsync(DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Called after page is rendered and ready to be sent to client.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Runtime.Filters.IPresenterActionFilter.OnPresenterExecutingAsync(DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Called before presenter starts processing HTTP request.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Runtime.Filters.IPresenterActionFilter.OnPresenterExecutedAsync(DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Called after presenter completes processing HTTP request.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Runtime.Filters.IPresenterActionFilter.OnPresenterExceptionAsync(DotVVM.Framework.Hosting.IDotvvmRequestContext,System.Exception)">
            <summary>
            Called when an exception occurs during the processing of the request.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Runtime.Filters.IViewModelActionFilter.OnViewModelCreatedAsync(DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Called after the viewmodel object is created.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Runtime.Filters.IViewModelActionFilter.OnViewModelDeserializedAsync(DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Called after the viewmodel is deserialized on postback.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Runtime.Filters.IViewModelActionFilter.OnViewModelSerializingAsync(DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Called before the viewmodel is serialized.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Runtime.Filters.ModelValidationFilterAttribute">
            <summary>
            Runs the model validation and returns the errors if the viewModel is not valid.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Runtime.Filters.ModelValidationFilterAttribute.OnCommandExecutingAsync(DotVVM.Framework.Hosting.IDotvvmRequestContext,DotVVM.Framework.Runtime.Filters.ActionInfo)">
            <inheritdoc />
        </member>
        <member name="T:DotVVM.Framework.Runtime.Filters.NotAuthorizedAttribute">
            <summary>
            Specifies that the class does not require authorization.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Runtime.IDotvvmException">
            <summary> Common interface for exceptions that are related to some DotVVM objects - controls, bindings or properties </summary>
        </member>
        <member name="P:DotVVM.Framework.Runtime.IDotvvmException.TheException">
            <summary> Returns itself. This is a workaround for the interface inheriting from <see cref="T:System.Exception" /> </summary>
        </member>
        <member name="T:DotVVM.Framework.Runtime.RuntimeWarningCollector">
             <summary>
             A request-scoped service used to collect warnings for debugging. By default these warnings are displayed in browser console and pushed to ASP.NET Core logging (thus probably displayed in the web server console).
            
             Although this is request scoped, it is thread-safe.
             </summary>
        </member>
        <member name="P:DotVVM.Framework.Security.CorruptedCsrfTokenException.RetryRequest">
            If the client is supposed to retry the request after renewing the CSRF token by the <see cref="T:DotVVM.Framework.Hosting.Middlewares.DotvvmCsrfTokenMiddleware" />
        </member>
        <member name="M:DotVVM.Framework.Security.ICsrfProtector.GenerateToken(DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Generates new CSRF protection token, which is supposed to be passed intact on postback.
            </summary>
            <param name="context">Context for current request.</param>
            <returns>Base64-encoded string, which is supposed to be passed intact on postback.</returns>
        </member>
        <member name="M:DotVVM.Framework.Security.ICsrfProtector.VerifyToken(DotVVM.Framework.Hosting.IDotvvmRequestContext,System.String)">
            <summary>
            Validates supplied CSRF token. Throws <see cref="T:System.Security.SecurityException"/> when token is missing or invalid.
            </summary>
            <param name="context">Context for current request.</param>
            <param name="token">Security token being generated by <see cref="M:DotVVM.Framework.Security.ICsrfProtector.GenerateToken(DotVVM.Framework.Hosting.IDotvvmRequestContext)"/> method.</param>
            <exception cref="T:System.Security.SecurityException">Thrown when token string is missing or invalid.</exception>
        </member>
        <member name="P:DotVVM.Framework.Storage.FileSystemReturnedFileStorage.TempDirectory">
            <summary>
            Temp directory where are files stored.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.Storage.FileSystemReturnedFileStorage.AutoDeleteInterval">
            <summary>
            Interval in which will be old files deleted.
            </summary>
        </member>
        <member name="F:DotVVM.Framework.Storage.FileSystemReturnedFileStorage._autoDeleteTimer">
            <summary>
            Timer for deleting old files.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Storage.FileSystemReturnedFileStorage.#ctor(System.String)">
            <summary>
            Initializes new instance of <see cref="T:DotVVM.Framework.Storage.FileSystemReturnedFileStorage"/> class with default interval for deleting old files.
            </summary>
            <param name="directory">Temp directory for storing files.</param>
        </member>
        <member name="M:DotVVM.Framework.Storage.FileSystemReturnedFileStorage.#ctor(System.String,System.TimeSpan)">
            <summary>
            Initializes new instance of <see cref="T:DotVVM.Framework.Storage.FileSystemReturnedFileStorage"/> class.
            </summary>
            <param name="directory">Temp directory for storing files.</param>
            <param name="autoDeleteInterval">Interval for deleting old files.</param>
        </member>
        <member name="M:DotVVM.Framework.Storage.FileSystemUploadedFileStorage.#ctor(System.String,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:DotVVM.Framework.Storage.FileSystemUploadedFileStorage"/> class.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Storage.FileSystemUploadedFileStorage.StoreFileAsync(System.IO.Stream)">
            <summary>
            Stores uploaded file and returns its unique id.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Storage.FileSystemUploadedFileStorage.DeleteFileAsync(System.Guid)">
            <summary>
            Deletes the uploaded file.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Storage.FileSystemUploadedFileStorage.GetFileAsync(System.Guid)">
            <summary>
            Gets the file with the specified id.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Storage.FileSystemUploadedFileStorage.DeleteOldFiles(System.DateTime)">
            <summary>
            Deletes files older than the specified date.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Storage.FileSystemUploadedFileStorage.GetFileName(System.Guid)">
            <summary>
            Gets the name of the file.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Storage.FileSystemUploadedFileStorage.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Utils.ExpressionUtils.Replace(System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression[])">
            <summary> Substitutes arguments in the LambdaExpression with the specified expressions. </summary>
        </member>
        <member name="M:DotVVM.Framework.Utils.ExpressionUtils.OptimizeConstants(System.Linq.Expressions.Expression)">
            <summary>
            will execute operators, property and field accesses on constant expression, so it will be cleaner
            </summary>
        </member>
        <member name="T:DotVVM.Framework.Utils.Invariant">
            <summary>
            Provides convenient methods for quickly parsing values from strings rendered in the
            invariant culture.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Utils.Invariant.TryParse(System.String,System.Decimal@)">
            <summary>
            Tries to parse a decimal number out of a string using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            The method accepts null strings and leading and trailing whitespace.
            </summary>
            <param name="str">The input string.</param>
            <param name="value">The parsed value.</param>
        </member>
        <member name="M:DotVVM.Framework.Utils.Invariant.TryParse(System.String,System.Double@)">
            <summary>
            Tries to parse a double-precision floating point number out of a string using the
            <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />. The method accepts null strings and leading
            and trailing whitespace.
            </summary>
            <param name="str">The input string.</param>
            <param name="value">The parsed value.</param>
        </member>
        <member name="M:DotVVM.Framework.Utils.Invariant.TryParse(System.String,System.Single@)">
            <summary>
            Tries to parse a single-precision floating point number out of a string using the
            <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />. The method accepts null strings and leading
            and trailing whitespace.
            </summary>
            <param name="str">The input string.</param>
            <param name="value">The parsed value.</param>
        </member>
        <member name="M:DotVVM.Framework.Utils.Invariant.TryParse(System.String,System.Int32@)">
            <summary>
            Tries to parse a 32-bit signed integer out of a string using the same format as the
            <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />. The method accepts null strings and leading
            and trailing whitespace.
            </summary>
            <param name="str">The input string.</param>
            <param name="value">The parsed value.</param>
        </member>
        <member name="M:DotVVM.Framework.Utils.Invariant.TryParse(System.String,System.UInt32@)">
            <summary>
            Tries to parse a 32-bit unsigned integer out of a string using the same format as the
            <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />. The method accepts null strings and leading
            and trailing whitespace.
            </summary>
            <param name="str">The input string.</param>
            <param name="value">The parsed value.</param>
            <returns></returns>
        </member>
        <member name="M:DotVVM.Framework.Utils.Invariant.TryParse(System.String,System.Int64@)">
            <summary>
            Tries to parse a 64-bit signed integer out of a string using the same format as the
            <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />. The method accepts null strings and leading
            and trailing whitespace.
            </summary>
            <param name="str">The input string.</param>
            <param name="value">The parsed value.</param>
        </member>
        <member name="M:DotVVM.Framework.Utils.Invariant.TryParse(System.String,System.UInt64@)">
            <summary>
            Tries to parse a 64-bit unsigned integer out of a string using the same format as the
            <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />. The method accepts null strings and leading
            and trailing whitespace.
            </summary>
            <param name="str">The input string.</param>
            <param name="value">The parsed value.</param>
        </member>
        <member name="M:DotVVM.Framework.Utils.Invariant.TryParseExact(System.String,System.Double@)">
            <summary>
            Tries to parse a double-precision floating point number out of a string using the same
            format as the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />. The method accepts null
            strings but does not accept whitespace.
            </summary>
            <param name="str">The input string.</param>
            <param name="value">The parsed value.</param>
        </member>
        <member name="M:DotVVM.Framework.Utils.Invariant.TryParseExact(System.String,System.Single@)">
            <summary>
            Tries to parse a single-precision floating point number out of a string using the same
            format as the <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />. The method accepts null
            strings but does not accept whitespace.
            </summary>
            <param name="str">The input string.</param>
            <param name="value">The parsed value.</param>
        </member>
        <member name="M:DotVVM.Framework.Utils.Invariant.TryParseExact(System.String,System.Int32@)">
            <summary>
            Tries to parse a 32-bit signed integer out of a string using the same format as the
            <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />. The method accepts null strings but does
            not accept whitespace.
            </summary>
            <param name="str">The input string.</param>
            <param name="value">The parsed value.</param>
        </member>
        <member name="M:DotVVM.Framework.Utils.Invariant.TryParseExact(System.String,System.UInt32@)">
            <summary>
            Tries to parse a 32-bit unsigned integer out of a string using the same format as the
            <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />. The method accepts null strings but does
            not accept whitespace.
            </summary>
            <param name="str">The input string.</param>
            <param name="value">The parsed value.</param>
            <returns></returns>
        </member>
        <member name="M:DotVVM.Framework.Utils.Invariant.TryParseExact(System.String,System.Int64@)">
            <summary>
            Tries to parse a 64-bit signed integer out of a string using the same format as the
            <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />. The method accepts null strings but does
            not accept whitespace.
            </summary>
            <param name="str">The input string.</param>
            <param name="value">The parsed value.</param>
        </member>
        <member name="M:DotVVM.Framework.Utils.Invariant.TryParseExact(System.String,System.UInt64@)">
            <summary>
            Tries to parse a 64-bit unsigned integer out of a string using the same format as the
            <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />. The method accepts null strings but does
            not accept whitespace.
            </summary>
            <param name="str">The input string.</param>
            <param name="value">The parsed value.</param>
        </member>
        <member name="M:DotVVM.Framework.Utils.ReflectionUtils.GetMemberFromExpression(System.Linq.Expressions.Expression)">
            <summary>
            Gets the property name from lambda expression, e.g. 'a => a.FirstName'
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Utils.ReflectionUtils.GetAllMembers(System.Type,System.Reflection.BindingFlags)">
            <summary> Gets all members from the type, including inherited classes, implemented interfaces and interfaces inherited by the interface </summary>
        </member>
        <member name="M:DotVVM.Framework.Utils.ReflectionUtils.GetAllMethods(System.Type,System.Reflection.BindingFlags)">
            <summary> Gets all methods from the type, including inherited classes, implemented interfaces and interfaces inherited by the interface </summary>
        </member>
        <member name="M:DotVVM.Framework.Utils.ReflectionUtils.GetCodeBasePath(System.Reflection.Assembly)">
            <summary>
            Gets filesystem path of assembly CodeBase
            http://stackoverflow.com/questions/52797/how-do-i-get-the-path-of-the-assembly-the-code-is-in
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Utils.ReflectionUtils.IsAssignableToGenericType(System.Type,System.Type,System.Type@)">
            <summary>
            Checks whether given instantiated type is compatible with the open generic type
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Utils.ReflectionUtils.ConvertValue(System.Object,System.Type)">
            <summary>
            Converts a value to a specified type
            </summary>
            <exception cref="T:DotVVM.Framework.Utils.ReflectionUtils.TypeConvertException" />
        </member>
        <member name="M:DotVVM.Framework.Utils.ReflectionUtils.IsTupleLike(System.Type)">
            <summary> Return true for Tuple, ValueTuple, KeyValuePair </summary>
        </member>
        <member name="M:DotVVM.Framework.Utils.ReflectionUtils.ClearCaches(System.Type[])">
            <summary> Clear cache when hot reload happens </summary>
        </member>
        <member name="M:DotVVM.Framework.Utils.SecureGuidGenerator.GenerateGuid">
            <summary>
            Generates a random Guid with the <see cref="T:System.Security.Cryptography.RandomNumberGenerator"/>.
            The Guid is NOT a valid v4 Guid, that would only lower the security.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.Utils.StringSimilarity.DamerauLevenshteinDistance(System.String,System.String)">
            <summary> Edit distance with deletion (Visble), insertion (Visivble), substitution (Visine) and transposition (Visilbe) </summary>
        </member>
        <member name="M:DotVVM.Framework.ViewModel.ChildViewModelsCache.ClearCaches(System.Type[])">
            <summary> Clear cache when hot reload happens </summary>
        </member>
        <member name="T:DotVVM.Framework.ViewModel.FromQueryAttribute">
            <summary>
            Binds the viewmodel property from the query string.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.ViewModel.FromRouteAttribute">
            <summary>
            Binds the viewmodel property from the route parameter.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ViewModel.IDotvvmViewModel.Init">
            <summary> Initializes the view model. Called by DotVVM before incoming JSON viewmodel is deserialized. </summary>
        </member>
        <member name="M:DotVVM.Framework.ViewModel.IDotvvmViewModel.Load">
            <summary> Loads additional data into the view model. Called by DotVVM after viewmodel is deserialized and before command is invoked. </summary>
        </member>
        <member name="M:DotVVM.Framework.ViewModel.IDotvvmViewModel.PreRender">
            <summary> Called by DotVVM after the command is invoked and before output is rendered. Useful for re-loading data after the command is invoked (for example, after new page index is changed). </summary>
        </member>
        <member name="M:DotVVM.Framework.ViewModel.Serialization.DefaultViewModelLoader.InitializeViewModel(DotVVM.Framework.Hosting.IDotvvmRequestContext,DotVVM.Framework.Controls.Infrastructure.DotvvmView)">
            <summary>
            Initializes the view model for the specified view.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ViewModel.Serialization.DefaultViewModelLoader.CreateViewModelInstance(System.Type,DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Creates the new instance of a viewmodel of specified type. 
            If you are using IoC/DI container, this is the method you want to override.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ViewModel.Serialization.DefaultViewModelLoader.DisposeViewModel(System.Object)">
            <summary>
            Disposes the viewmodel instance (provided it is <see cref="T:System.IDisposable"/>. 
            If you are using IoC/DI container with manual component release mechanism, this it the method you want to override.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ViewModel.Serialization.DefaultViewModelLoader.ClearCaches(System.Type[])">
            <summary> Clear cache when hot reload happens </summary>
        </member>
        <member name="M:DotVVM.Framework.ViewModel.Serialization.DefaultViewModelSerializer.#ctor(DotVVM.Framework.Configuration.DotvvmConfiguration,DotVVM.Framework.Security.IViewModelProtector,DotVVM.Framework.ViewModel.Serialization.IViewModelSerializationMapper,DotVVM.Framework.ViewModel.Serialization.IViewModelServerCache,DotVVM.Framework.ViewModel.Serialization.IViewModelTypeMetadataSerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:DotVVM.Framework.ViewModel.Serialization.DefaultViewModelSerializer"/> class.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ViewModel.Serialization.DefaultViewModelSerializer.SerializeViewModel(DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Serializes the view model.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ViewModel.Serialization.DefaultViewModelSerializer.BuildViewModel(DotVVM.Framework.Hosting.IDotvvmRequestContext,System.Object)">
            <summary>
            Builds the view model for the client.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ViewModel.Serialization.DefaultViewModelSerializer.SerializeValidationRules(DotVVM.Framework.ViewModel.Serialization.ViewModelJsonConverter)">
            <summary>
            Serializes the validation rules.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ViewModel.Serialization.DefaultViewModelSerializer.GenerateRedirectActionResponse(System.String,System.Boolean,System.Boolean)">
            <summary>
            Serializes the redirect action.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ViewModel.Serialization.DefaultViewModelSerializer.GenerateMissingCachedViewModelResponse">
            <summary>
            Serializes the missing cached viewmodel action.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ViewModel.Serialization.DefaultViewModelSerializer.SerializeModelState(DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Serializes the validation errors in case the viewmodel was not valid.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ViewModel.Serialization.DefaultViewModelSerializer.PopulateViewModel(DotVVM.Framework.Hosting.IDotvvmRequestContext,System.String)">
            <summary>
            Populates the view model from the data received from the request.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotVVM.Framework.ViewModel.Serialization.DefaultViewModelSerializer.ResolveCommand(DotVVM.Framework.Hosting.IDotvvmRequestContext,DotVVM.Framework.Controls.Infrastructure.DotvvmView)">
            <summary>
            Resolves the command for the specified post data.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ViewModel.Serialization.DefaultViewModelSerializer.AddPostBackUpdatedControls(DotVVM.Framework.Hosting.IDotvvmRequestContext,System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}})">
            <summary>
            Adds the post back updated controls.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.ViewModel.Serialization.DotvvmDictionaryConverter">
            <summary>
            This converter serializes Dictionary&lt;&gt; as List&lt;KeyValuePair&lt;,&gt;&gt; in order to make dictionaries work with knockout. 
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ViewModel.Serialization.EncryptedValuesWriter.Nest(System.Int32)">
            <summary>
            Indicates that serializer should nest to a inner object.
            Adds a new property to current object, and pushes the state to the stack.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ViewModel.Serialization.EncryptedValuesWriter.End">
            <summary>
            Indicates that object has ended.
            Pops state from the stack.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ViewModel.Serialization.EncryptedValuesWriter.ClearEmptyNest">
            <summary>
            Ensure that the subtree is empty (did not contain any protected value) and clear it.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ViewModel.Serialization.EncryptedValuesWriter.WriteValue(System.Int32,System.Object)">
            <summary>
            Write a value to the object.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.ViewModel.Serialization.ViewModelJsonConverter">
            <summary>
            A JSON.NET converter that handles special features of DotVVM ViewModel serialization.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ViewModel.Serialization.ViewModelJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ViewModel.Serialization.ViewModelJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ViewModel.Serialization.ViewModelJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ViewModel.Serialization.ViewModelJsonConverter.Populate(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonSerializer,System.Object)">
            <summary>
            Populates the specified JObject.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ViewModel.Serialization.ViewModelPropertyMap.IsFullyTransferred">
            <summary>
            Gets whether the property is transferred both ways.
            </summary>
        </member>
        <member name="T:DotVVM.Framework.ViewModel.Serialization.ViewModelSerializationMap">
            <summary>
            Performs the JSON serialization for specified type.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.ViewModel.Serialization.ViewModelSerializationMap.Type">
            <summary>
            Gets or sets the object type for this serialization map.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.ViewModel.Serialization.ViewModelSerializationMap.OriginalProperties">
            <summary> Rough structure of Properties when the object was initialized. This is used for hot reload to judge if it can be flushed from the cache. </summary>
        </member>
        <member name="M:DotVVM.Framework.ViewModel.Serialization.ViewModelSerializationMap.#ctor(System.Type,System.Collections.Generic.IEnumerable{DotVVM.Framework.ViewModel.Serialization.ViewModelPropertyMap},System.Reflection.MethodBase,DotVVM.Framework.Configuration.DotvvmConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:DotVVM.Framework.ViewModel.Serialization.ViewModelSerializationMap"/> class.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.ViewModel.Serialization.ViewModelSerializationMap.ReaderFactory">
            <summary>
            Gets the JSON reader factory.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.ViewModel.Serialization.ViewModelSerializationMap.WriterFactory">
            <summary>
            Gets the JSON writer factory.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ViewModel.Serialization.ViewModelSerializationMap.CallConstructor(System.Linq.Expressions.Expression,System.Collections.Generic.Dictionary{System.Reflection.PropertyInfo,System.Linq.Expressions.ParameterExpression})">
            <summary>
            Creates the constructor for this object.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ViewModel.Serialization.ViewModelSerializationMap.CreateReaderFactory">
            <summary>
            Creates the reader factory.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ViewModel.Serialization.ViewModelSerializationMap.RequiredTypeField">
            Gets if this object require $type to be serialized.
        </member>
        <member name="M:DotVVM.Framework.ViewModel.Serialization.ViewModelSerializationMap.CreateWriterFactory">
            <summary>
            Creates the writer factory.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ViewModel.Serialization.ViewModelSerializationMap.CanContainEncryptedValues(System.Type)">
            <summary>
            Determines whether type can contain encrypted fields
            </summary>
        </member>
        <member name="T:DotVVM.Framework.ViewModel.Serialization.ViewModelSerializationMapper">
            <summary>
            Builds serialization maps that are used during the JSON serialization.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ViewModel.Serialization.ViewModelSerializationMapper.CreateMap(System.Type)">
            <summary>
            Creates the serialization map for specified type.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ViewModel.Serialization.ViewModelSerializationMapper.GetProperties(System.Type,System.Reflection.MethodBase)">
            <summary>
            Gets the properties of the specified type.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ViewModel.Serialization.ViewModelSerializationMapper.IsSetterSupported(System.Reflection.PropertyInfo)">
            <summary>
            Returns whether DotVVM serialization supports setter of given property. 
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ViewModel.Serialization.ViewModelSerializationMapper.ClearCache(System.Type)">
            <summary> Remove this type from cache, unless it has been significantly changed. Used only for hot-reload, nothing should rely on this working properly. </summary>
            <returns>true if the cached was cleared successfully, false if the cached could not be cleared for some reason. </returns>
        </member>
        <member name="M:DotVVM.Framework.ViewModel.Serialization.ViewModelTypeMetadataSerializer.ClearCaches(System.Type[])">
            <summary> Clear caches for the specified types </summary>
        </member>
        <member name="M:DotVVM.Framework.ViewModel.Validation.DotvvmRequestContextValidationExtensions.AddModelError(DotVVM.Framework.Hosting.IDotvvmRequestContext,System.String)">
            <summary>
            Adds a new validation error with the given message and attaches it to the root viewmodel.
            </summary>
            <param name="message">Validation error message</param>
        </member>
        <member name="M:DotVVM.Framework.ViewModel.Validation.DotvvmRequestContextValidationExtensions.AddRawModelError(DotVVM.Framework.Hosting.IDotvvmRequestContext,System.String,System.String)">
            <summary>
            Adds a new raw validation error. This method is intended only for advanced use-cases and it partially bypasses the validation framework. 
            Users of this method must provide an absolute validation path from the root viewmodel. Individual path segments need to be delimited using the '/' character. 
            Example 1) /Customer/Id. Example 2) /Items/0/Price.
            </summary>
            <param name="absolutePath">Absolute validation path from the root viewmodel</param>
            <param name="message">Validation error message</param>
        </member>
        <member name="M:DotVVM.Framework.ViewModel.Validation.DotvvmRequestContextValidationExtensions.AddModelError``2(DotVVM.Framework.Hosting.IDotvvmRequestContext,``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
            <summary>
            Adds a new validation error with the given message and attaches it to the property determined by the provided expression. 
            The target property must be reachable from the root viewmodel, otherwise the error won't be attached.
            </summary>
            <param name="vm">Viewmodel or one of its descendants (reachable objects)</param>
            <param name="expression">Expression that determines the target property from the provided object</param>
            <param name="message">Validation error message</param>
        </member>
        <member name="M:DotVVM.Framework.ViewModel.Validation.ValidationErrorFactory.AddModelError``1(``0,System.String)">
            <summary>
            Adds a new validation error with the given message and attaches it to the provided viewmodel. 
            The target viewmodel must be reachable from the root viewmodel, otherwise the error won't be attached.
            </summary>
            <param name="vm">Viewmodel</param>
            <param name="message">Validation error message</param>
        </member>
        <member name="M:DotVVM.Framework.ViewModel.Validation.ValidationErrorFactory.AddModelError``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
            <summary>
            Adds a new validation error with the given message and attaches it to the property determined by the provided expression. 
            The target property must be reachable from the root viewmodel, otherwise the error won't be attached.
            </summary>
            <param name="vm">Viewmodel or one of its descendant (reachable objects)</param>
            <param name="expr">Expression that determines the target property from the provided object</param>
            <param name="message">Validation error message</param>
        </member>
        <member name="P:DotVVM.Framework.ViewModel.Validation.ViewModelValidationError.ErrorMessage">
            <summary>
            Gets or sets the error message.
            </summary>
        </member>
        <member name="P:DotVVM.Framework.ViewModel.Validation.ViewModelValidationError.PropertyPath">
            <summary>
            Contains path that can be evaluated on the client side.
            E.g.: /Product/Suppliers/2/Name
            </summary>
        </member>
        <member name="P:DotVVM.Framework.ViewModel.Validation.ViewModelValidationError.TargetObject">
            <summary>
            Object affected by this validation error
            </summary>
        </member>
        <member name="P:DotVVM.Framework.ViewModel.Validation.ViewModelValidationError.IsResolved">
            <summary>
            Determines whether this error is fully processed
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ViewModel.Validation.ViewModelValidationRuleTranslator.TranslateValidationRules(System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationAttribute})">
            <summary>
            Gets the validation rules.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ViewModel.Validation.ViewModelValidator.ValidateViewModel(System.Object)">
            <summary>
            Validates the view model.
            </summary>
        </member>
        <member name="M:DotVVM.Framework.ViewModel.Validation.ViewModelValidator.ValidateViewModel(System.Object,System.Collections.Generic.HashSet{System.Object})">
            <summary>
            Validates the view model.
            </summary>
        </member>
        <member name="M:ValueOrBindingExtensions.UnwrapToObject(DotVVM.Framework.Binding.ValueOrBinding)">
            <summary> Returns the value or the binding from the ValueOrBinding container. Equivalent to calling <code>vob.BindingOrDefault ?? vob.BoxedValue</code> </summary>
        </member>
        <member name="M:ValueOrBindingExtensions.UnwrapToObject(System.Object)">
            <summary> If the obj is ValueOrBinding, returns the binding or the value from the container. Equivalent to <code>obj is ValueOrBinding vob ? vob.UnwrapToObject() : obj</code> </summary>
        </member>
        <member name="M:ValueOrBindingExtensions.Negate(DotVVM.Framework.Binding.ValueOrBinding{System.Boolean})">
            <summary> Returns ValueOrBinding with the value of `!a`. The resulting binding is cached, so it's safe to use this method at runtime. </summary>
        </member>
        <member name="M:ValueOrBindingExtensions.Negate(DotVVM.Framework.Binding.ValueOrBinding{System.Nullable{System.Boolean}})">
            <summary> Returns ValueOrBinding with the value of `!a`. The resulting binding is cached, so it's safe to use this method at runtime. </summary>
        </member>
        <member name="M:ValueOrBindingExtensions.Negate``1(``0)">
            <summary> Returns a binding with the value of `!bindingValue`. The resulting binding is cached, so it's safe to use this method at runtime. </summary>
        </member>
        <member name="M:ValueOrBindingExtensions.IsMoreThanZero(DotVVM.Framework.Binding.ValueOrBinding{System.Int32})">
            <summary> Returns ValueOrBinding with the value of `a > 0`. The resulting binding is cached, so it's safe to use this method at runtime. </summary>
        </member>
        <member name="M:ValueOrBindingExtensions.GetItems``1(DotVVM.Framework.Binding.ValueOrBinding{DotVVM.Framework.Controls.IBaseGridViewDataSet{``0}})">
            <summary> Returns ValueOrBinding with the value of `a.Items` where a is grid view dataset. The resulting binding is cached, so it's safe to use this method at runtime. </summary>
        </member>
        <member name="M:ValueOrBindingExtensions.AsString``1(DotVVM.Framework.Binding.ValueOrBinding{``0})">
            <summary> Returns ValueOrBinding with the value of `a?.ToString() ?? ""`. The resulting binding is cached, so it's safe to use this method at runtime. </summary>
        </member>
        <member name="M:ValueOrBindingExtensions.NotNull``1(DotVVM.Framework.Binding.ValueOrBinding{``0})">
            <summary> Returns ValueOrBinding with the value of `a is object`. The resulting binding is cached, so it's safe to use this method at runtime. </summary>
        </member>
        <member name="M:ValueOrBindingExtensions.IsNull``1(DotVVM.Framework.Binding.ValueOrBinding{``0})">
            <summary> Returns ValueOrBinding with the value of `a is null`. The resulting binding is cached, so it should be safe to use this method at runtime. </summary>
        </member>
        <member name="M:ValueOrBindingExtensions.NotNullOrEmpty(DotVVM.Framework.Binding.ValueOrBinding{System.String})">
            <summary> Returns ValueOrBinding with the value of `!string.IsNullOrEmpty(a)`. The resulting binding is cached, so it should be safe to use this method at runtime. </summary>
        </member>
        <member name="M:ValueOrBindingExtensions.IsNullOrEmpty(DotVVM.Framework.Binding.ValueOrBinding{System.String})">
            <summary> Returns ValueOrBinding with the value of `string.IsNullOrEmpty(a)`. The resulting binding is cached, so it's safe to use this method at runtime. </summary>
        </member>
        <member name="M:ValueOrBindingExtensions.NotNullOrWhitespace(DotVVM.Framework.Binding.ValueOrBinding{System.String})">
            <summary> Returns ValueOrBinding with the value of `!string.IsNullOrWhitespace(a)`. The resulting binding is cached, so it's safe to use this method at runtime. </summary>
        </member>
        <member name="M:ValueOrBindingExtensions.IsNullOrWhitespace(DotVVM.Framework.Binding.ValueOrBinding{System.String})">
            <summary> Returns ValueOrBinding with the value of `string.IsNullOrWhitespace(a)`. The resulting binding is cached, so it's safe to use this method at runtime. </summary>
        </member>
        <member name="M:ValueOrBindingExtensions.ValueEquals``1(DotVVM.Framework.Binding.ValueOrBinding{``0},``0)">
            <summary> Returns if the ValueOrBinding contains a value and the value is equal to <paramref name="value"/>. </summary>
        </member>
        <member name="M:ValueOrBindingExtensions.ValueEquals``1(DotVVM.Framework.Binding.ValueOrBinding{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary> Returns if the ValueOrBinding contains a value and the value is equal to <paramref name="value"/>. </summary>
        </member>
        <member name="M:ValueOrBindingExtensions.ValueIsNull``1(DotVVM.Framework.Binding.ValueOrBinding{``0})">
            <summary> Returns true if the ValueOrBinding contains value, but the value is null. </summary>
        </member>
        <member name="M:ValueOrBindingExtensions.ValueIsNullOrEmpty(DotVVM.Framework.Binding.ValueOrBinding{System.String})">
            <summary> Returns true if the ValueOrBinding contains value, but the value is null or an empty string. </summary>
        </member>
        <member name="M:ValueOrBindingExtensions.And(DotVVM.Framework.Binding.ValueOrBinding{System.Boolean},DotVVM.Framework.Binding.ValueOrBinding{System.Boolean})">
            <summary> Returns ValueOrBinding with the value of `a &amp;&amp; b`. If both a and b contain a binding, they are combined together. The result is cached, so it's safe to use this method at runtime. </summary>
        </member>
        <member name="M:ValueOrBindingExtensions.Or(DotVVM.Framework.Binding.ValueOrBinding{System.Boolean},DotVVM.Framework.Binding.ValueOrBinding{System.Boolean})">
            <summary> Returns ValueOrBinding with the value of `a || b`. If both a and b contain a binding, they are combined together. The result is cached, so it's safe to use this method at runtime. </summary>
        </member>
        <member name="M:ValueOrBindingExtensions.Select``2(DotVVM.Framework.Binding.Expressions.IValueBinding{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary> Maps the result of this binding with another expression. The expression is also translated to Javascript, so only translatable methods may be used.
            Note that this method is very fast, so use it carefully. Usage is server-side styles should be preferred over usage at runtime in custom controls. </summary>
        </member>
        <member name="M:ValueOrBindingExtensions.Select``2(DotVVM.Framework.Binding.Expressions.IStaticValueBinding{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary> Maps the result of this binding with another expression. The expression is also translated to Javascript, so only translatable methods may be used.
            Note that this method is very fast, so use it carefully. Usage is server-side styles should be preferred over usage at runtime in custom controls. </summary>
        </member>
        <member name="M:ValueOrBindingExtensions.Select``2(DotVVM.Framework.Binding.ValueOrBinding{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary> Maps the result of this binding with another expression. The expression is also translated to Javascript, so only translatable methods may be used.
            Note that this method is very fast, so use it carefully. Usage is server-side styles should be preferred over usage at runtime in custom controls. </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.SetProperty``2(DotVVM.Framework.Compilation.Styles.IStyleBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Nullable{DotVVM.Framework.Binding.ValueOrBinding{``1}},DotVVM.Framework.Compilation.Styles.StyleOverrideOptions)">
            <summary> Sets a specified property on the matching controls. The referenced property must be a wrapper around a DotvvmProperty. </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.SetProperty``2(DotVVM.Framework.Compilation.Styles.IStyleBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,DotVVM.Framework.Compilation.Styles.StyleOverrideOptions)">
            <summary> Sets a specified property on the matching controls. The referenced property must be a wrapper around a DotvvmProperty. </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.SetProperty``2(DotVVM.Framework.Compilation.Styles.IStyleBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,DotVVM.Framework.Binding.ValueOrBinding{``1}}},DotVVM.Framework.Binding.ValueOrBinding{``1},DotVVM.Framework.Compilation.Styles.StyleOverrideOptions)">
            <summary> Sets a specified property on the matching controls. The referenced property must be a wrapper around a DotvvmProperty. </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.SetProperty``2(DotVVM.Framework.Compilation.Styles.IStyleBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,DotVVM.Framework.Binding.ValueOrBinding{``1}}},``1,DotVVM.Framework.Compilation.Styles.StyleOverrideOptions)">
            <summary> Sets a specified property on the matching controls. The referenced property must be a wrapper around a DotvvmProperty. </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.SetControlProperty``2(``0,DotVVM.Framework.Binding.DotvvmProperty,``1,System.Action{DotVVM.Framework.Compilation.Styles.IStyleBuilder{``1}},DotVVM.Framework.Compilation.Styles.StyleOverrideOptions)">
            <summary> Sets a control to the specified property on the matching controls. </summary>
            <param name="styleBuilder">This style builder can be used to set properties on the added component.</param>
        </member>
        <member name="M:StyleBuilderExtensionMethods.SetControlProperty``2(DotVVM.Framework.Compilation.Styles.IStyleBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},``1,System.Action{DotVVM.Framework.Compilation.Styles.IStyleBuilder{``1}},DotVVM.Framework.Compilation.Styles.StyleOverrideOptions)">
            <summary> Sets a control to the specified property on the matching controls. </summary>
            <param name="styleBuilder">This style builder can be used to set properties on the added component.</param>
        </member>
        <member name="M:StyleBuilderExtensionMethods.AppendControlProperty``2(DotVVM.Framework.Compilation.Styles.IStyleBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},``1,System.Action{DotVVM.Framework.Compilation.Styles.IStyleBuilder{``1}})">
            <summary> Adds a control to the specified property on the matching controls. </summary>
            <param name="styleBuilder">This style builder can be used to set properties on the added component.</param>
        </member>
        <member name="M:StyleBuilderExtensionMethods.AppendControlProperty``2(``0,DotVVM.Framework.Binding.DotvvmProperty,``1,System.Action{DotVVM.Framework.Compilation.Styles.IStyleBuilder{``1}})">
            <summary> Adds a control to the specified property on the matching controls. </summary>
            <param name="styleBuilder">This style builder can be used to set properties on the added component.</param>
        </member>
        <member name="M:StyleBuilderExtensionMethods.SetHtmlControlProperty``1(``0,DotVVM.Framework.Binding.DotvvmProperty,System.String,System.Action{DotVVM.Framework.Compilation.Styles.IStyleBuilder{DotVVM.Framework.Controls.HtmlGenericControl}},DotVVM.Framework.Compilation.Styles.StyleOverrideOptions)">
            <summary> Inserts an HTML control into the specified control property. </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.SetLiteralControlProperty``1(``0,DotVVM.Framework.Binding.DotvvmProperty,DotVVM.Framework.Binding.ValueOrBinding{System.String},DotVVM.Framework.Compilation.Styles.StyleOverrideOptions)">
            <summary> Inserts a literal into the specified control property. </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.SetDotvvmProperty``1(``0,DotVVM.Framework.Binding.DotvvmProperty,System.Object,DotVVM.Framework.Compilation.Styles.StyleOverrideOptions)">
            <summary> Sets a specified property on the matching controls </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.SetDotvvmProperty``1(DotVVM.Framework.Compilation.Styles.IStyleBuilder{``0},DotVVM.Framework.Binding.DotvvmProperty,System.Func{DotVVM.Framework.Compilation.Styles.IStyleMatchContext{``0},System.Object},DotVVM.Framework.Compilation.Styles.StyleOverrideOptions)">
            <summary> Sets a specified property on the matching controls. The value can be computed from any property on the control using the IStyleMatchContext. </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.SetProperty``1(DotVVM.Framework.Compilation.Styles.IStyleBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Func{DotVVM.Framework.Compilation.Styles.IStyleMatchContext{``0},System.Object},DotVVM.Framework.Compilation.Styles.StyleOverrideOptions)">
            <summary> Sets a specified property on the matching controls. The value can be computed from any property on the control using the IStyleMatchContext. </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.SetPropertyBinding``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,DotVVM.Framework.Compilation.Styles.StyleOverrideOptions,DotVVM.Framework.Compilation.BindingParserOptions)">
            <summary> Sets the specified property to a binding.
            Value binding is used by default, alternative binding types can be set using the bindingOptions parameter.
            Note that the binding is parsed according to the data context of the control, you can check that using c.HasDataContext. </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.SetDotvvmPropertyBinding``1(``0,DotVVM.Framework.Binding.DotvvmProperty,System.String,DotVVM.Framework.Compilation.Styles.StyleOverrideOptions,DotVVM.Framework.Compilation.BindingParserOptions)">
            <summary> Sets the specified property to a binding.
            Value binding is used by default, alternative binding types can be set using the bindingOptions parameter.
            Note that the binding is parsed according to the data context of the control, you can check that using c.HasDataContext. </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.SetPropertyBinding``1(DotVVM.Framework.Compilation.Styles.IStyleBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,DotVVM.Framework.Compilation.Styles.StyleOverrideOptions,DotVVM.Framework.Compilation.BindingParserOptions)">
            <summary> Sets the specified property to a binding.
            Value binding is used by default, alternative binding types can be set using the bindingOptions parameter.
            Note that the binding is parsed according to the data context of the control, you can check that using c.HasDataContext. </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.AddClassBinding``1(``0,System.String,System.String,DotVVM.Framework.Compilation.Styles.StyleOverrideOptions,DotVVM.Framework.Compilation.BindingParserOptions)">
            <summary> Adds a Class-className binding to the control </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.AppendAttributeBinding``1(``0,System.String,System.String,DotVVM.Framework.Compilation.BindingParserOptions)">
            <summary> Appends HTML attribute of the control.
            Value binding is used by default, alternative binding types can be set using the bindingOptions parameter.
            Note that the binding is parsed according to the data context of the control, you can check that using c.HasDataContext. </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.SetAttributeBinding``1(``0,System.String,System.String,DotVVM.Framework.Compilation.Styles.StyleOverrideOptions,DotVVM.Framework.Compilation.BindingParserOptions)">
            <summary> Sets HTML attribute of the control.
            Value binding is used by default, alternative binding types can be set using the bindingOptions parameter.
            Note that the binding is parsed according to the data context of the control, you can check that using c.HasDataContext. </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.SetPropertyGroupMemberBinding``1(``0,System.String,System.String,System.String,DotVVM.Framework.Compilation.Styles.StyleOverrideOptions,DotVVM.Framework.Compilation.BindingParserOptions)">
            <summary> Sets property group member of the control. For example SetPropertyGroupMember("Param-", "Abcd", "_root.DefaultAbcd") would set the Abcd parameter on RouteLink.
            Value binding is used by default, alternative binding types can be set using the bindingOptions parameter.
            Note that the binding is parsed according to the data context of the control, you can check that using c.HasDataContext. </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.AddClass``1(``0,System.String)">
            <summary> Appends a css class (or multiple of them) to the control. </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.AddClass``1(DotVVM.Framework.Compilation.Styles.IStyleBuilder{``0},System.Func{DotVVM.Framework.Compilation.Styles.IStyleMatchContext{``0},DotVVM.Framework.Binding.ValueOrBinding{System.String}})">
            <summary> Appends a css class (or multiple of them) to the control. </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.AddClass``1(DotVVM.Framework.Compilation.Styles.IStyleBuilder{``0},System.String,System.Func{DotVVM.Framework.Compilation.Styles.IStyleMatchContext{``0},DotVVM.Framework.Binding.ValueOrBinding{System.Boolean}})">
            <summary> Appends a css class (or multiple of them) with the condition. </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.AddClassBinding``1(DotVVM.Framework.Compilation.Styles.IStyleBuilder{``0},System.String,System.String,DotVVM.Framework.Compilation.BindingParserOptions)">
            <summary> Appends a css class (or multiple of them) with the condition. </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.AppendAttribute``1(``0,System.String,DotVVM.Framework.Binding.ValueOrBinding{System.String})">
            <summary> Appends value to the specified attribute. </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.AppendAttribute``1(``0,System.String,System.String)">
            <summary> Appends value to the specified attribute. </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.AppendAttribute``1(DotVVM.Framework.Compilation.Styles.IStyleBuilder{``0},System.String,System.Func{DotVVM.Framework.Compilation.Styles.IStyleMatchContext{``0},DotVVM.Framework.Binding.ValueOrBinding{System.String}})">
            <summary> Appends value to the specified attribute. </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.AppendAttribute``1(DotVVM.Framework.Compilation.Styles.IStyleBuilder{``0},System.String,System.Func{DotVVM.Framework.Compilation.Styles.IStyleMatchContext{``0},System.String})">
            <summary> Appends value to the specified attribute. </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.SetAttribute``1(``0,System.String,System.Object,DotVVM.Framework.Compilation.Styles.StyleOverrideOptions)">
            <summary> Sets HTML attribute of the control. </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.SetAttribute``1(DotVVM.Framework.Compilation.Styles.IStyleBuilder{``0},System.String,System.Func{DotVVM.Framework.Compilation.Styles.IStyleMatchContext{``0},System.Object},DotVVM.Framework.Compilation.Styles.StyleOverrideOptions)">
            <summary> Sets HTML attribute of the control. </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.SetPropertyGroupMember``1(``0,System.String,System.String,System.Object,DotVVM.Framework.Compilation.Styles.StyleOverrideOptions)">
            <summary> Sets property group member of the control. For example SetPropertyGroupMember("Param-", "Abcd", 1) would set the Abcd parameter on RouteLink. </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.SetPropertyGroupMember``1(DotVVM.Framework.Compilation.Styles.IStyleBuilder{``0},System.String,System.String,System.Func{DotVVM.Framework.Compilation.Styles.IStyleMatchContext{``0},System.Object},DotVVM.Framework.Compilation.Styles.StyleOverrideOptions)">
            <summary> Sets property group member of the control. For example SetPropertyGroupMember("Param-", "Abcd", 1) would set the Abcd parameter on RouteLink. </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.SetContent``2(``0,``1,System.Action{DotVVM.Framework.Compilation.Styles.StyleBuilder{``1}},DotVVM.Framework.Compilation.Styles.StyleOverrideOptions)">
            <summary> Sets the controls children. </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.AppendContent``2(``0,``1,System.Action{DotVVM.Framework.Compilation.Styles.StyleBuilder{``1}})">
            <summary> Appends a child control. </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.PrependContent``2(``0,``1,System.Action{DotVVM.Framework.Compilation.Styles.StyleBuilder{``1}})">
            <summary> Prepends a child control. </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.SetContent``2(DotVVM.Framework.Compilation.Styles.IStyleBuilder{``0},System.Func{DotVVM.Framework.Compilation.Styles.IStyleMatchContext{``0},``1},System.Action{DotVVM.Framework.Compilation.Styles.StyleBuilder{``1}},DotVVM.Framework.Compilation.Styles.StyleOverrideOptions)">
            <summary> Sets the controls children. </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.AppendContent``2(DotVVM.Framework.Compilation.Styles.IStyleBuilder{``0},System.Func{DotVVM.Framework.Compilation.Styles.IStyleMatchContext{``0},``1},System.Action{DotVVM.Framework.Compilation.Styles.StyleBuilder{``1}})">
            <summary> Appends a child control. </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.PrependContent``2(DotVVM.Framework.Compilation.Styles.IStyleBuilder{``0},System.Func{DotVVM.Framework.Compilation.Styles.IStyleMatchContext{``0},``1},System.Action{DotVVM.Framework.Compilation.Styles.StyleBuilder{``1}})">
            <summary> Prepends a child control. </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.WithCondition``1(``0,System.Func{DotVVM.Framework.Compilation.Styles.IStyleMatchContext,System.Boolean})">
            <summary> Applies this style only to controls matching this condition. When multiple conditions are specified, all are combined using the AND operator. </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.AddCondition``1(``0,System.Func{DotVVM.Framework.Compilation.Styles.IStyleMatchContext,System.Boolean})">
            <summary> Applies this style only to controls matching this condition. When multiple conditions are specified, all are combined using the AND operator. </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.AddCondition``1(DotVVM.Framework.Compilation.Styles.IStyleBuilder{``0},System.Func{DotVVM.Framework.Compilation.Styles.IStyleMatchContext{``0},System.Boolean})">
            <summary> Applies this style only to controls matching this condition. When multiple conditions are specified, all are combined using the AND operator. </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.AddPostbackHandler``1(``0,DotVVM.Framework.Controls.PostBackHandler)">
            <summary> Adds a new postback handler to the PostBack.Handlers property </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.AddPostbackHandler``1(DotVVM.Framework.Compilation.Styles.IStyleBuilder{``0},System.Func{DotVVM.Framework.Compilation.Styles.IStyleMatchContext{``0},DotVVM.Framework.Controls.PostBackHandler})">
            <summary> Adds a new postback handler to the PostBack.Handlers property </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.AddRequiredResource``1(``0,System.String[])">
            <summary> Requests a resource to be included if this control is in the page. </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.ReplaceWith``2(``0,``1,System.Action{DotVVM.Framework.Compilation.Styles.IStyleBuilder{``1}},DotVVM.Framework.Compilation.Styles.StyleOverrideOptions)">
            <summary> Replaces the matching controls with a new control while copying all properties to the new one.</summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.ReplaceWith``1(DotVVM.Framework.Compilation.Styles.IStyleBuilder{``0},System.Func{DotVVM.Framework.Compilation.Styles.IStyleMatchContext{``0},DotVVM.Framework.Controls.DotvvmBindableObject},DotVVM.Framework.Compilation.Styles.StyleOverrideOptions)">
            <summary> Replaces the matching controls with a new control while copying all properties to the new one.</summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.WrapWith``2(``0,``1,System.Action{DotVVM.Framework.Compilation.Styles.IStyleBuilder{``1}},DotVVM.Framework.Compilation.Styles.StyleOverrideOptions)">
            <summary> Wraps the matching controls with a new control - places the new control instead of the original control which is moved inside the wrapper control </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.WrapWith``1(DotVVM.Framework.Compilation.Styles.IStyleBuilder{``0},System.Func{DotVVM.Framework.Compilation.Styles.IStyleMatchContext{``0},DotVVM.Framework.Controls.DotvvmBindableObject},DotVVM.Framework.Compilation.Styles.StyleOverrideOptions)">
            <summary> Wraps the matching controls with a new control - places the new control instead of the original control which is moved inside the wrapper control </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.Append``2(``0,``1,System.Action{DotVVM.Framework.Compilation.Styles.IStyleBuilder{``1}},DotVVM.Framework.Compilation.Styles.StyleOverrideOptions)">
            <summary> Adds a new control bellow the matched control. </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.Append``1(DotVVM.Framework.Compilation.Styles.IStyleBuilder{``0},System.Func{DotVVM.Framework.Compilation.Styles.IStyleMatchContext{``0},DotVVM.Framework.Controls.DotvvmBindableObject},DotVVM.Framework.Compilation.Styles.StyleOverrideOptions)">
            <summary> Adds a new control bellow the matched control. </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.Prepend``2(``0,``1,System.Action{DotVVM.Framework.Compilation.Styles.IStyleBuilder{``1}},DotVVM.Framework.Compilation.Styles.StyleOverrideOptions)">
            <summary> Adds a new control above the matched control. </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.Prepend``2(DotVVM.Framework.Compilation.Styles.IStyleBuilder{``0},System.Func{DotVVM.Framework.Compilation.Styles.IStyleMatchContext{``0},DotVVM.Framework.Controls.DotvvmBindableObject},DotVVM.Framework.Compilation.Styles.StyleOverrideOptions)">
            <summary> Adds a new control above the matched control. </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.Remove``1(DotVVM.Framework.Compilation.Styles.IStyleBuilder{``0},System.Boolean,DotVVM.Framework.Compilation.Styles.StyleOverrideOptions)">
            <summary> The control will be removed from the control tree if <paramref name="condition"/> is true. Note that all appended, prepended and wrapper controls will be preserved. </summary>
        </member>
        <member name="M:StyleBuilderExtensionMethods.Remove``1(DotVVM.Framework.Compilation.Styles.IStyleBuilder{``0},System.Func{DotVVM.Framework.Compilation.Styles.IStyleMatchContext{``0},System.Boolean},DotVVM.Framework.Compilation.Styles.StyleOverrideOptions)">
            <summary> The control will be removed from the control tree if <paramref name="condition"/> is true. Note that all appended, prepended and wrapper controls will be preserved. </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.Cast``1(DotVVM.Framework.Compilation.Styles.IStyleMatchContext)">
            <summary> Ensures that control is of type <typeparamref name="T"/>, otherwise throws an exception. </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.IsType``1(DotVVM.Framework.Compilation.Styles.IStyleMatchContext)">
            <summary> Checks if the control is of type <typeparamref name="T"/> (or of a derived type) </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.IsType(DotVVM.Framework.Compilation.Styles.IStyleMatchContext,System.Type)">
            <summary> Checks if the control is of type <paramref name="type"/> (or of a derived type) </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.IsType``1(DotVVM.Framework.Compilation.Styles.IStyleMatchContext,DotVVM.Framework.Compilation.Styles.IStyleMatchContext{``0}@)">
            <summary> Checks if the control is of type <typeparamref name="T"/> (or of a derived type). In case it is, the <see cref="T:DotVVM.Framework.Compilation.Styles.IStyleMatchContext`1" /> is available from the result parameter. </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.AsType``1(DotVVM.Framework.Compilation.Styles.IStyleMatchContext)">
            <summary> Convert the IStyleMatchContext to control type <typeparamref name="T"/>. If it's not possible, returns null. </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.GetAncestors(DotVVM.Framework.Compilation.Styles.IStyleMatchContext)">
            <summary> Returns a list of all ancestor controls - the parent, parent of the parent, ... up to the tree root. </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.AncestorsOfType``1(DotVVM.Framework.Compilation.Styles.IStyleMatchContext)">
            <summary> Returns a list of all ancestor controls - the parent, parent of the parent, ... up to the tree root. Filters only those of type <typeparamref name="T"/>. </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.HasAncestor``1(DotVVM.Framework.Compilation.Styles.IStyleMatchContext)">
            <summary>
            Determines whether the control has an ancestor of the given type.
            </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.HasAncestor(DotVVM.Framework.Compilation.Styles.IStyleMatchContext,System.Type)">
            <summary>
            Determines whether the control has an ancestor of the <paramref name="parentType"/> type.
            </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.HasAncestor``1(DotVVM.Framework.Compilation.Styles.IStyleMatchContext,System.Func{DotVVM.Framework.Compilation.Styles.IStyleMatchContext{``0},System.Boolean})">
            <summary>
            Determines whether the control has an ancestor of the given type matching the given filter.
            </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.HasAncestor(DotVVM.Framework.Compilation.Styles.IStyleMatchContext,System.Func{DotVVM.Framework.Compilation.Styles.IStyleMatchContext,System.Boolean})">
            <summary>
            Determines whether the control has an ancestor matching the given filter.
            </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.HasAncestorsOrdered(DotVVM.Framework.Compilation.Styles.IStyleMatchContext,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Determines whether the control's ancestors types correspond to those in <paramref name="parentTypes"/>.
            </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.HasAncestorsOrdered(DotVVM.Framework.Compilation.Styles.IStyleMatchContext,System.Type[])">
            <summary>
            Determines whether the control's ancestors types correspond to those given.
            </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.HasParent``1(DotVVM.Framework.Compilation.Styles.IStyleMatchContext)">
            <summary>
            Determines whether the control's parent's type is assignable to<typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.HasParent``1(DotVVM.Framework.Compilation.Styles.IStyleMatchContext,DotVVM.Framework.Compilation.Styles.IStyleMatchContext{``0}@)">
            <summary>
            Determines whether the control's parent's type is assignable to <typeparamref name="T"/> and returns it.
            </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.HasProperty(DotVVM.Framework.Compilation.Styles.IStyleMatchContext,DotVVM.Framework.Binding.DotvvmProperty)">
            <summary>
            Determines whether the control has the given <see cref="T:DotVVM.Framework.Binding.DotvvmProperty"/>.
            </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.HasProperty``1(DotVVM.Framework.Compilation.Styles.IStyleMatchContext{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Determines whether the control has the given <see cref="T:DotVVM.Framework.Binding.DotvvmProperty"/>.
            </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.HasBinding(DotVVM.Framework.Compilation.Styles.IStyleMatchContext,DotVVM.Framework.Binding.DotvvmProperty)">
            <summary>
            Determines whether the control has the given <see cref="T:DotVVM.Framework.Binding.DotvvmProperty"/>.
            </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.HasBinding``1(DotVVM.Framework.Compilation.Styles.IStyleMatchContext{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Determines whether the control has the given <see cref="T:DotVVM.Framework.Binding.DotvvmProperty"/>.
            </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.HasHtmlAttribute(DotVVM.Framework.Compilation.Styles.IStyleMatchContext,System.String)">
            <summary>
            Determines whether the control has an HTML attribute of the specified name.
            </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.GetHtmlAttribute(DotVVM.Framework.Compilation.Styles.IStyleMatchContext,System.String)">
            <summary>
            Determines whether the control has an HTML attribute of the specified name.
            </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.GetHtmlAttributeValue(DotVVM.Framework.Compilation.Styles.IStyleMatchContext,System.String)">
            <summary>
            Determines whether the control has an HTML attribute of the specified name.
            </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.HasClass(DotVVM.Framework.Compilation.Styles.IStyleMatchContext,System.String[])">
            <summary>
            Determines whether the control has all the specified css classes.
            To be considered, classes must be explicitly specified in the DotHTML markup, classes added by controls at runtime don't count
            </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.ControlType(DotVVM.Framework.Compilation.Styles.IStyleMatchContext)">
            <summary> Returns type of control this style is being applied to. </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.TagName(DotVVM.Framework.Compilation.Styles.IStyleMatchContext)">
            <summary> Returns tag name, if the current control is HtmlGenericControl. If the type is unknown, returns null. </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.PropertyValue``1(DotVVM.Framework.Compilation.Styles.IStyleMatchContext,DotVVM.Framework.Binding.DotvvmProperty)">
            <summary> Gets the property value or null if it's not defined. </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.PropertyValue``2(DotVVM.Framework.Compilation.Styles.IStyleMatchContext{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary> Gets the property value or null if it's not defined. </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.PropertyValue``2(DotVVM.Framework.Compilation.Styles.IStyleMatchContext{``0},System.Linq.Expressions.Expression{System.Func{``0,DotVVM.Framework.Binding.ValueOrBinding{``1}}})">
            <summary> Gets the property value or null if it's not defined. </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.Property``1(DotVVM.Framework.Compilation.Styles.IStyleMatchContext,DotVVM.Framework.Binding.DotvvmProperty)">
            <summary> Gets the property value or null if it's not defined. </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.Property``2(DotVVM.Framework.Compilation.Styles.IStyleMatchContext{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary> Gets the property value or null if it's not defined. </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.Property``2(DotVVM.Framework.Compilation.Styles.IStyleMatchContext{``0},System.Linq.Expressions.Expression{System.Func{``0,DotVVM.Framework.Binding.ValueOrBinding{``1}}})">
            <summary> Gets the property value or null if it's not defined. </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.Property``2(DotVVM.Framework.Compilation.Styles.IStyleMatchContext{``0},System.Linq.Expressions.Expression{System.Func{``0,DotVVM.Framework.Binding.Expressions.IValueBinding{``1}}})">
            <summary> Gets the property value or null if it's not defined. </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.Property``1(DotVVM.Framework.Compilation.Styles.IStyleMatchContext{``0},System.Linq.Expressions.Expression{System.Func{``0,DotVVM.Framework.Binding.Expressions.IValueBinding}})">
            <summary> Gets the property value or null if it's not defined. </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.DataContext(DotVVM.Framework.Compilation.Styles.IStyleMatchContext)">
            <summary>
            Gets the DataContext of the control.
            </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.HasDataContext``1(DotVVM.Framework.Compilation.Styles.IStyleMatchContext)">
            <summary>
            Determines whether the control has DataContext of the given type.
            </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.HasRootDataContext``1(DotVVM.Framework.Compilation.Styles.IStyleMatchContext)">
            <summary>
            Determines whether the control is in a page with a ViewModel of the given type.
            </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.HasViewInDirectory(DotVVM.Framework.Compilation.Styles.IStyleMatchContext,System.String)">
            <summary>
            Determines whether the control is in a page whose View is in the given directory.
            </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.AllowsContent(DotVVM.Framework.Compilation.Styles.IStyleMatchContext)">
            <summary>
            Determines whether the control allows to have child components
            </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.ChildrenDataContextStack(DotVVM.Framework.Compilation.Styles.IStyleMatchContext)">
            <summary>
            Returns the data types that children will have
            </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.ChildrenDataContext(DotVVM.Framework.Compilation.Styles.IStyleMatchContext)">
            <summary>
            Returns the data types that children will have
            </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.Children(DotVVM.Framework.Compilation.Styles.IStyleMatchContext,System.Boolean,System.Boolean)">
            <summary> Returns list of controls in the Children collection or controls in the DefaultContentProperty. </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.Children``1(DotVVM.Framework.Compilation.Styles.IStyleMatchContext,System.Boolean,System.Boolean)">
            <summary> Returns list of controls in the Children collection or controls in the DefaultContentProperty. Filters them to find only instances of <typeparamref name="T"/> </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.Child``1(DotVVM.Framework.Compilation.Styles.IStyleMatchContext)">
            <summary> Returns a single child of type T or null. If the control contains more than one matching child, an exception is thrown. <typeparamref name="T"/> </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.AllChildren(DotVVM.Framework.Compilation.Styles.IStyleMatchContext,System.Boolean)">
            <summary> Returns all child controls - those in Children and also those in any control property. </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.AllChildren``1(DotVVM.Framework.Compilation.Styles.IStyleMatchContext,System.Boolean)">
            <summary> Returns all child controls of type <typeparamref name="T"/> - those in Children and also those in any control property. </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.Descendants(DotVVM.Framework.Compilation.Styles.IStyleMatchContext,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Returns child controls, children child controls, ... </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.Descendants``1(DotVVM.Framework.Compilation.Styles.IStyleMatchContext,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Returns child controls, children child controls, ... Filter only those of type <typeparamref name="T"/> </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.AllDescendants(DotVVM.Framework.Compilation.Styles.IStyleMatchContext,System.Boolean,System.Boolean)">
            <summary> Returns child control, children child controls, ... Unlike Descendants, this method includes all children including those in control properties. </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.AllDescendants``1(DotVVM.Framework.Compilation.Styles.IStyleMatchContext,System.Boolean,System.Boolean)">
            <summary> Returns child controls, children child controls, ... Filter only those of type <typeparamref name="T"/>. Unlike Descendants, this method includes all children including those in control properties. </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.GetTags(DotVVM.Framework.Compilation.Styles.IStyleMatchContext)">
            <summary> Returns the contents of Styles.Tag property or an empty array if none is specified. </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.HasTag(DotVVM.Framework.Compilation.Styles.IStyleMatchContext,System.String)">
            <summary> Checks that Styles.Tag property is present and contains the specified tag name. </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.HasTag(DotVVM.Framework.Compilation.Styles.IStyleMatchContext,System.String[])">
            <summary> Checks that Styles.Tag property is present and contains all the specified tag names. </summary>
        </member>
        <member name="M:StyleMatchContextExtensionMethods.HasAncestorWithTag(DotVVM.Framework.Compilation.Styles.IStyleMatchContext,System.String)">
            <summary> Checks that this controls has an ancestor with a specified tag. </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DotvvmBuilderExtensions.AddDefaultTempStorages(Microsoft.Extensions.DependencyInjection.IDotvvmServiceCollection,System.String)">
            <summary>
            Adds file system temporary file storages to the application. See <see cref="T:DotVVM.Core.Storage.IUploadedFileStorage" />
            and <see cref="T:DotVVM.Core.Storage.IReturnedFileStorage" /> for more details.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IDotvvmServiceCollection" /> instance.</param>
            <param name="tempPath">The absolute or relative path to directory where to store temporary files.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DotvvmBuilderExtensions.AddDefaultTempStorages(Microsoft.Extensions.DependencyInjection.IDotvvmServiceCollection,System.String,System.TimeSpan)">
            <summary>
            Adds file system temporary file storages to the application. See <see cref="T:DotVVM.Core.Storage.IUploadedFileStorage" />
            and <see cref="T:DotVVM.Core.Storage.IReturnedFileStorage" /> for more details.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IDotvvmServiceCollection" /> instance.</param>
            <param name="tempPath">The absolute or relative path to directory where to store temporary files.</param>
            <param name="autoDeleteInterval">The interval to delete the temporary files after.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DotvvmBuilderExtensions.AddUploadedFileStorage(Microsoft.Extensions.DependencyInjection.IDotvvmServiceCollection,System.String)">
            <summary>
            Adds file system uploaded file storage to the application. See <see cref="T:DotVVM.Core.Storage.IUploadedFileStorage" /> for more details.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IDotvvmServiceCollection" /> instance.</param>
            <param name="tempPath">The absolute or relative path to directory where to store temporary files.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DotvvmBuilderExtensions.AddUploadedFileStorage(Microsoft.Extensions.DependencyInjection.IDotvvmServiceCollection,System.String,System.TimeSpan)">
            <summary>
            Adds file system uploaded file storage to the application. See <see cref="T:DotVVM.Core.Storage.IUploadedFileStorage" /> for more details.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IDotvvmServiceCollection" /> instance.</param>
            <param name="tempPath">The absolute or relative path to directory where to store temporary files.</param>
            <param name="autoDeleteInterval">The interval to delete the temporary files after.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DotvvmBuilderExtensions.AddReturnedFileStorage(Microsoft.Extensions.DependencyInjection.IDotvvmServiceCollection,System.String)">
            <summary>
            Adds file system returned file storage to the application. See <see cref="T:DotVVM.Core.Storage.IReturnedFileStorage" /> for more details.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IDotvvmServiceCollection" /> instance.</param>
            <param name="tempPath">The absolute or relative path to directory where to store temporary files.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DotvvmBuilderExtensions.AddReturnedFileStorage(Microsoft.Extensions.DependencyInjection.IDotvvmServiceCollection,System.String,System.TimeSpan)">
            <summary>
            Adds file system returned file storage to the application. See <see cref="T:DotVVM.Core.Storage.IReturnedFileStorage" /> for more details.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IDotvvmServiceCollection" /> instance.</param>
            <param name="tempPath">The absolute or relative path to directory where to store temporary files.</param>
            <param name="autoDeleteInterval">The interval to delete the temporary files after.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DotvvmBuilderExtensions.AddDiagnosticServices(Microsoft.Extensions.DependencyInjection.IDotvvmServiceCollection)">
            <summary>
            Adds diagnostic services required for DotVVM Diagnostic Window to work.
            DotVVM Diagnostic Window helps with debugging postbacks and highlighting requests with potential issues during development time. 
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IDotvvmServiceCollection" /> instance.</param>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.DotvvmServiceCollection">
            <summary>
            Allows fine grained configuration of DotVVM services.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.DependencyInjection.DotvvmServiceCollection.Services">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DotvvmServiceCollection.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.DependencyInjection.DotvvmServiceCollection" /> class.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DotvvmServiceCollectionExtensions.RegisterDotVVMServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds essential DotVVM services to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.IDotvvmServiceCollection">
            <summary>
            An interface for configuring DotVVM services.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.WebUtilities.MultipartReader.HeaderLengthLimit">
            <summary>
            The limit for individual header lines inside a multipart section.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.WebUtilities.MultipartReader.TotalHeaderSizeLimit">
            <summary>
            The combined size limit for headers per multipart section.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.WebUtilities.MultipartReaderStream.#ctor(Microsoft.AspNet.WebUtilities.BufferedReadStream,System.String,System.Boolean)">
            <summary>
            Creates a stream that reads until it reaches the given boundary pattern.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.WebUtilities.MultipartSection.BaseStreamOffset">
            <summary>
            The position where the body starts in the total multipart body.
            This may not be available if the total multipart body is not seekable.
            </summary>
        </member>
        <member name="M:DotvvmRequestContextExtensions.GetSpaContentPlaceHolderUniqueId(DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Gets the unique id of the SpaContentPlaceHolder that should be loaded.
            </summary>
        </member>
        <member name="M:DotvvmRequestContextExtensions.GetCancellationToken(DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Gets cancellation token for the request
            </summary>
        </member>
        <member name="M:DotvvmRequestContextExtensions.ChangeCurrentCulture(DotVVM.Framework.Hosting.IDotvvmRequestContext,System.String)">
            <summary>
            Changes the current culture of this HTTP request.
            </summary>
        </member>
        <member name="M:DotvvmRequestContextExtensions.ChangeCurrentCulture(DotVVM.Framework.Hosting.IDotvvmRequestContext,System.String,System.String)">
            <summary>
            Changes the current culture of this HTTP request.
            </summary>
        </member>
        <member name="M:DotvvmRequestContextExtensions.GetCurrentUICulture(DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Gets the current UI culture of this HTTP request.
            </summary>
        </member>
        <member name="M:DotvvmRequestContextExtensions.GetCurrentCulture(DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Gets the current culture of this HTTP request.
            </summary>
        </member>
        <member name="M:DotvvmRequestContextExtensions.InterruptRequest(DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Interrupts the execution of the current request.
            </summary>
        </member>
        <member name="M:DotvvmRequestContextExtensions.RedirectToUrl(DotVVM.Framework.Hosting.IDotvvmRequestContext,System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns the redirect response and interrupts the execution of current request.
            </summary>
        </member>
        <member name="M:DotvvmRequestContextExtensions.RedirectToLocalUrl(DotVVM.Framework.Hosting.IDotvvmRequestContext,System.String,System.Boolean,System.Boolean)">
            <summary>
            Verifies that the URL is local and returns the redirect response and interrupts the execution of current request.
            </summary>
        </member>
        <member name="M:DotvvmRequestContextExtensions.RedirectToRoute(DotVVM.Framework.Hosting.IDotvvmRequestContext,System.String,System.Object,System.Boolean,System.Boolean,System.String,System.Object)">
            <summary>
            Returns the redirect response and interrupts the execution of current request.
            </summary>
        </member>
        <member name="M:DotvvmRequestContextExtensions.RedirectToUrlPermanent(DotVVM.Framework.Hosting.IDotvvmRequestContext,System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns the permanent redirect response and interrupts the execution of current request.
            </summary>
        </member>
        <member name="M:DotvvmRequestContextExtensions.RedirectToRoutePermanent(DotVVM.Framework.Hosting.IDotvvmRequestContext,System.String,System.Object,System.Boolean,System.Boolean,System.String,System.Object)">
            <summary>
            Returns the permanent redirect response and interrupts the execution of current request.
            </summary>
        </member>
        <member name="M:DotvvmRequestContextExtensions.FailOnInvalidModelState(DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Ends the request execution when the <see cref="T:DotVVM.Framework.Hosting.ModelState"/> is not valid and displays the validation errors in <see cref="T:DotVVM.Framework.Controls.ValidationSummary"/> control.
            If it is valid, it does nothing.
            </summary>
        </member>
        <member name="M:DotvvmRequestContextExtensions.GetSerializedViewModel(DotVVM.Framework.Hosting.IDotvvmRequestContext)">
            <summary>
            Gets the serialized view model.
            </summary>
        </member>
        <member name="M:DotvvmRequestContextExtensions.TranslateVirtualPath(DotVVM.Framework.Hosting.IDotvvmRequestContext,System.String)">
            <summary>
            Translates the virtual path (~/something) to the domain relative path (/virtualDirectory/something). 
            For example, when the app is configured to run in a virtual directory '/virtDir', the URL '~/myPage.dothtml' will be translated to '/virtDir/myPage.dothtml'.
            </summary>
        </member>
        <member name="M:DotvvmRequestContextExtensions.TranslateVirtualPath(System.String,DotVVM.Framework.Hosting.IHttpContext)">
            <summary>
            Translates the virtual path (~/something) to the domain relative path (/virtualDirectory/something). 
            For example, when the app is configured to run in a virtual directory '/virtDir', the URL '~/myPage.dothtml' will be translated to '/virtDir/myPage.dothtml'.
            </summary>
        </member>
        <member name="M:DotvvmRequestContextExtensions.ReturnFile(DotVVM.Framework.Hosting.IDotvvmRequestContext,System.Byte[],System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String)">
            <summary>
            Redirects the client to the specified file.
            </summary>
        </member>
        <member name="M:DotvvmRequestContextExtensions.ReturnFile(DotVVM.Framework.Hosting.IDotvvmRequestContext,System.IO.Stream,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String)">
            <summary>
            Redirects the client to the specified file.
            </summary>
        </member>
        <member name="M:DotvvmRequestContextExtensions.ReturnFileAsync(DotVVM.Framework.Hosting.IDotvvmRequestContext,System.Byte[],System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String)">
            <summary>
            Redirects the client to the specified file.
            </summary>
        </member>
        <member name="M:DotvvmRequestContextExtensions.ReturnFileAsync(DotVVM.Framework.Hosting.IDotvvmRequestContext,System.IO.Stream,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String)">
            <summary>
            Redirects the client to the specified file.
            </summary>
        </member>
    </members>
</doc>
